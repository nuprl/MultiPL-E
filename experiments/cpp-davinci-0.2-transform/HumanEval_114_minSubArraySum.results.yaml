language: cpp
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66wny6qg.cpp: In function 'int main()':\n/tmp/tmp66wny6qg.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/tmp/tmp66wny6qg.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp66wny6qg.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp66wny6qg.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long currSum = 0;\n    for (int i = 0; i\
    \ < nums.size(); i++) {\n        currSum += nums[i];\n        if (currSum < minSum)\
    \ {\n            minSum = currSum;\n        }\n        if (currSum > 0) {\n  \
    \          currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmsswnmj.cpp: In function 'int main()':\n/tmp/tmpgmsswnmj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgmsswnmj.cpp:2:\n/tmp/tmpgmsswnmj.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgmsswnmj.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgmsswnmj.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgmsswnmj.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgmsswnmj.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgmsswnmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctsw2ik2.cpp: In function 'int main()':\n/tmp/tmpctsw2ik2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctsw2ik2.cpp:2:\n/tmp/tmpctsw2ik2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpctsw2ik2.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpctsw2ik2.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpctsw2ik2.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpctsw2ik2.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpctsw2ik2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1;\
    \ i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph1illou3.cpp: In function 'int main()':\n/tmp/tmph1illou3.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph1illou3.cpp:2:\n/tmp/tmph1illou3.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmph1illou3.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmph1illou3.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmph1illou3.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmph1illou3.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmph1illou3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkcg0sp9.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpvkcg0sp9.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpvkcg0sp9.cpp:22:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpvkcg0sp9.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpvkcg0sp9.cpp: In function 'int main()':\n/tmp/tmpvkcg0sp9.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkcg0sp9.cpp:2:\n/tmp/tmpvkcg0sp9.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpvkcg0sp9.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpvkcg0sp9.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvkcg0sp9.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvkcg0sp9.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpama_tku2.cpp: In function 'int main()':\n/tmp/tmpama_tku2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/tmp/tmpama_tku2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpama_tku2.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpama_tku2.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66wny6qg.cpp: In function 'int main()':\n/tmp/tmp66wny6qg.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/tmp/tmp66wny6qg.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp66wny6qg.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp66wny6qg.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8bc_otuy: /tmp/tmp8bc_otuy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min = nums[0];\n    long sum = nums[0];\n    for (int i = 1; i <\
    \ nums.size(); i++) {\n        if (sum > 0) {\n            sum = nums[i];\n  \
    \      } else {\n            sum += nums[i];\n        }\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (long\
    \ i = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currentSum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        currentSum = std::min(currentSum + nums[i],\
    \ nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpama_tku2.cpp: In function 'int main()':\n/tmp/tmpama_tku2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/tmp/tmpama_tku2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpama_tku2.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpama_tku2.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7_twkd8: /tmp/tmph7_twkd8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long curr_sum = 0;\n    for (auto num :\
    \ nums) {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n     \
    \       min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n        \
    \    curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9gs0fdsr: /tmp/tmp9gs0fdsr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto num : nums)\
    \ {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n           \
    \ min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxpgubhft: /tmp/tmpxpgubhft.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        minSum = std::min(minSum,\
    \ sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplxh0qwah: /tmp/tmplxh0qwah.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    if (nums.size() == 0) {\n        return 0;\n    }\n    long minSum =\
    \ nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum\
    \ = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuerq5hpk: /tmp/tmpuerq5hpk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = 0;\n    for (auto num :\
    \ nums) {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n     \
    \       min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n        \
    \    curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n \
    \   auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min_sum = 0;\n    long min_val = 0;\n    for\
    \ (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum - min_val);\n        min_val = std::min(min_val, sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpt6e_4c81: /tmp/tmpt6e_4c81.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8bc_otuy: /tmp/tmp8bc_otuy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n  \
    \      sum += num;\n        if (sum < minSum) {\n            minSum = sum;\n \
    \       }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn49b565c: /tmp/tmpn49b565c.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuerq5hpk: /tmp/tmpuerq5hpk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7_twkd8: /tmp/tmph7_twkd8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min_sum = std::numeric_limits<long>::max();\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  minSum = std::min(minSum, sum);\n        if (sum < 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy0sg5yul: /tmp/tmpy0sg5yul.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpama_tku2.cpp: In function 'int main()':\n/tmp/tmpama_tku2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/tmp/tmpama_tku2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpama_tku2.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpama_tku2.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpama_tku2.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpama_tku2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n\
    \            min_sum = sum;\n        }\n        if (sum > 0) {\n            sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66wny6qg.cpp: In function 'int main()':\n/tmp/tmp66wny6qg.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/tmp/tmp66wny6qg.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp66wny6qg.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp66wny6qg.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp66wny6qg.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp66wny6qg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n  \
    \      sum += num;\n        if (sum < minSum) {\n            minSum = sum;\n \
    \       }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpn49b565c: /tmp/tmpn49b565c.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long result = 0;\n    long sum = 0;\n    for (auto num : nums) {\n  \
    \      sum += num;\n        if (sum < result) {\n            result = sum;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkfn0uk40: /tmp/tmpkfn0uk40.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = std::numeric_limits<long>::max();\n  long sum = 0;\n  for\
    \ (auto num : nums) {\n    sum += num;\n    min_sum = std::min(min_sum, sum);\n\
    \    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmrq7qk08: /tmp/tmpmrq7qk08.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < minSum) {\n            minSum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = LONG_MAX;\n    long curr_sum = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum\
    \ < min_sum) {\n            min_sum = curr_sum;\n        }\n        if (curr_sum\
    \ > 0) {\n            curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long current_sum = 0;\n    for (auto num : nums)\
    \ {\n        current_sum += num;\n        if (current_sum < min_sum) {\n     \
    \       min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n  \
    \          current_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3gzr4sm8: /tmp/tmp3gzr4sm8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprz99mwzq: /tmp/tmprz99mwzq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        current_sum = std::min(nums[i], current_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (auto num : nums)\
    \ {\n        sum += num;\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkcg0sp9.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpvkcg0sp9.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpvkcg0sp9.cpp:22:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpvkcg0sp9.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpvkcg0sp9.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpvkcg0sp9.cpp: In function 'int main()':\n/tmp/tmpvkcg0sp9.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkcg0sp9.cpp:2:\n/tmp/tmpvkcg0sp9.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpvkcg0sp9.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpvkcg0sp9.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvkcg0sp9.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvkcg0sp9.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprz99mwzq: /tmp/tmprz99mwzq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz496ccie.cpp: In function 'int main()':\n/tmp/tmpz496ccie.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/tmp/tmpz496ccie.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpz496ccie.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz496ccie.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz496ccie.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz496ccie.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8bc_otuy: /tmp/tmp8bc_otuy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmph7_twkd8: /tmp/tmph7_twkd8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        minSum = std::min(minSum, sum);\n \
    \       if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkdzl8rxl: /tmp/tmpkdzl8rxl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprz99mwzq: /tmp/tmprz99mwzq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3kg51jzk: /tmp/tmp3kg51jzk.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto i = 0; i < nums.size();\
    \ i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum) {\n  \
    \          min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n     \
    \       curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8lbgv8ul: /tmp/tmp8lbgv8ul.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (long num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = std::numeric_limits<long>::max();\n  long sum = 0;\n  for\
    \ (long num : nums) {\n    sum += num;\n    min_sum = std::min(min_sum, sum);\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long current_sum\
    \ = 0;\n    for (auto num : nums) {\n        current_sum += num;\n        if (current_sum\
    \ < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum\
    \ > 0) {\n            current_sum = 0;\n        }\n    }\n    return min_sum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < minSum) {\n            minSum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8keg323p.cpp: In function 'int main()':\n/tmp/tmp8keg323p.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/tmp/tmp8keg323p.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmp8keg323p.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8keg323p.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8keg323p.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8keg323p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto num : nums)\
    \ {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n           \
    \ min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxpgubhft: /tmp/tmpxpgubhft.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n \
    \       sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate =\
    \ minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujlqk2dd.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpujlqk2dd.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpujlqk2dd.cpp:19:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpujlqk2dd.cpp:19:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpujlqk2dd.cpp: In function 'int main()':\n/tmp/tmpujlqk2dd.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujlqk2dd.cpp:2:\n/tmp/tmpujlqk2dd.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpujlqk2dd.cpp:23:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujlqk2dd.cpp:23:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpujlqk2dd.cpp:23:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = INT_MAX;\n    long curr_sum = 0;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum\
    \ < min_sum) {\n            min_sum = curr_sum;\n        }\n        if (curr_sum\
    \ > 0) {\n            curr_sum = 0;\n        }\n    }\n    return min_sum;\n}\n\
    int main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1;\
    \ i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph1illou3.cpp: In function 'int main()':\n/tmp/tmph1illou3.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph1illou3.cpp:2:\n/tmp/tmph1illou3.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmph1illou3.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmph1illou3.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmph1illou3.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmph1illou3.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmph1illou3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n     \
    \   if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7wnltti.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpj7wnltti.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpj7wnltti.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj7wnltti.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj7wnltti.cpp: In function 'int main()':\n/tmp/tmpj7wnltti.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj7wnltti.cpp:2:\n/tmp/tmpj7wnltti.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpj7wnltti.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj7wnltti.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj7wnltti.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprz99mwzq: /tmp/tmprz99mwzq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuhjze2a4.cpp: In function 'int main()':\n/tmp/tmpuhjze2a4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/tmp/tmpuhjze2a4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuhjze2a4.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuhjze2a4.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuhjze2a4.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuhjze2a4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n  \
    \  assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2,\
    \ (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctsw2ik2.cpp: In function 'int main()':\n/tmp/tmpctsw2ik2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctsw2ik2.cpp:2:\n/tmp/tmpctsw2ik2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpctsw2ik2.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpctsw2ik2.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpctsw2ik2.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpctsw2ik2.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpctsw2ik2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = nums[0];\n  long sum = 0;\n  for (auto num : nums) {\n \
    \   sum += num;\n    min_sum = std::min(min_sum, sum);\n    if (sum > 0) {\n \
    \     sum = 0;\n    }\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuerq5hpk: /tmp/tmpuerq5hpk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n  long min_sum = nums[0];\n  long sum = 0;\n  for (auto num : nums) {\n \
    \   sum += num;\n    min_sum = std::min(min_sum, sum);\n    if (sum > 0) {\n \
    \     sum = 0;\n    }\n  }\n  return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805059
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxqnbzhr.cpp: In function 'int main()':\n/tmp/tmpuxqnbzhr.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/tmp/tmpuxqnbzhr.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuxqnbzhr.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuxqnbzhr.cpp:26:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuxqnbzhr.cpp:26:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuxqnbzhr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = 0;\n    long curr_sum = 0;\n    for (auto num : nums)\
    \ {\n        curr_sum += num;\n        if (curr_sum < min_sum) {\n           \
    \ min_sum = curr_sum;\n        }\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxpgubhft: /tmp/tmpxpgubhft.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805058
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = std::numeric_limits<long>::max();\n    long curr_sum =\
    \ 0;\n    for (auto num : nums) {\n        curr_sum += num;\n        min_sum =\
    \ std::min(min_sum, curr_sum);\n        if (curr_sum > 0) {\n            curr_sum\
    \ = 0;\n        }\n    }\n    return min_sum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzoz2gt6.cpp: In function 'long int minSubArraySum(std::vector<long\
    \ int>)':\n/tmp/tmpuzoz2gt6.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpuzoz2gt6.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return min_sum;\n     ^\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuzoz2gt6.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuzoz2gt6.cpp: In function 'int main()':\n/tmp/tmpuzoz2gt6.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzoz2gt6.cpp:2:\n/tmp/tmpuzoz2gt6.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpuzoz2gt6.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuzoz2gt6.cpp:24:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuzoz2gt6.cpp:24:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n \
    \       min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacnhevyj.cpp: In function 'int main()':\n/tmp/tmpacnhevyj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/tmp/tmpacnhevyj.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpacnhevyj.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpacnhevyj.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpacnhevyj.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpacnhevyj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long sum = 0;\n    long min_sum = 0;\n    long min_val = 0;\n    for\
    \ (auto num : nums) {\n        sum += num;\n        min_sum = std::min(min_sum,\
    \ sum - min_val);\n        min_val = std::min(min_val, sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpt6e_4c81: /tmp/tmpt6e_4c81.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i\
    \ = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgreh5b13.cpp: In function 'int main()':\n/tmp/tmpgreh5b13.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = minSubArraySum;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/tmp/tmpgreh5b13.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)3, (long)4,\
    \ (long)1, (long)2, (long)4}))) == (1));\n                                   \
    \     ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n                 \
    \                                                                            \
    \  ^\n/tmp/tmpgreh5b13.cpp:21:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgreh5b13.cpp:21:95:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgreh5b13.cpp:21:95: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgreh5b13.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long currSum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3kg51jzk: /tmp/tmp3kg51jzk.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805059
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums)\
    \ {\n    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1,\
    \ (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
    \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
    \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl24f12m: /tmp/tmpgl24f12m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1659805057
