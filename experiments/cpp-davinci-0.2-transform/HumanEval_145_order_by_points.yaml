name: HumanEval_145_order_by_points
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts\
  \ the given list of integers\n// in ascending order according to the sum of their\
  \ digits.\n// Note: if there are several items with similar sum of their digits,\n\
  // order them based on their index in original list.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1,\
  \ (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1,\
  \ (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n\
  // (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
  \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
  \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
  \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
  \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
  \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
  \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
  \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
  \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
  \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
completions: ["    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ map;\n    for (int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n  \
    \      int num = nums[i];\n        if (num < 0) {\n            num = num * -1;\n\
    \        }\n        while (num > 0) {\n            sum += num % 10;\n        \
    \    num = num / 10;\n        }\n        map[sum].push_back(nums[i]);\n    }\n\
    \    for (auto it = map.begin(); it != map.end(); it++) {\n        for (int i\
    \ = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::vector<int>\
    \ sums;\n    std::vector<int> indices;\n    int sum = 0;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        sum = 0;\n        while (nums[i] != 0) {\n\
    \            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n   \
    \     sums.push_back(sum);\n        indices.push_back(i);\n    }\n    for (int\
    \ i = 0; i < sums.size(); i++) {\n        for (int j = i + 1; j < sums.size();\
    \ j++) {\n            if (sums[i] > sums[j]) {\n                int temp = sums[i];\n\
    \                sums[i] = sums[j];\n                sums[j] = temp;\n       \
    \         temp = indices[i];\n                indices[i] = indices[j];\n     \
    \           indices[j] = temp;\n            }\n        }\n    }\n    for (int\
    \ i = 0; i < indices.size(); i++) {\n        result.push_back(nums[indices[i]]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::vector<int>\
    \ sum;\n    std::vector<int> index;\n    int s = 0;\n    int i = 0;\n    for (auto\
    \ n : nums) {\n        s = 0;\n        while (n != 0) {\n            s += n %\
    \ 10;\n            n /= 10;\n        }\n        sum.push_back(s);\n        index.push_back(i);\n\
    \        i++;\n    }\n    for (int i = 0; i < sum.size(); i++) {\n        for\
    \ (int j = i + 1; j < sum.size(); j++) {\n            if (sum[i] > sum[j]) {\n\
    \                std::swap(sum[i], sum[j]);\n                std::swap(index[i],\
    \ index[j]);\n            }\n        }\n    }\n    for (auto i : index) {\n  \
    \      result.push_back(nums[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::vector<long> sum_of_digits;\n    std::vector<long> index;\n\
    \    std::vector<long> temp;\n    long sum = 0;\n    for(int i = 0; i < nums.size();\
    \ i++) {\n        sum = 0;\n        temp = nums;\n        while(temp[i] != 0)\
    \ {\n            sum += temp[i] % 10;\n            temp[i] /= 10;\n        }\n\
    \        sum_of_digits.push_back(sum);\n        index.push_back(i);\n    }\n \
    \   for(int i = 0; i < nums.size(); i++) {\n        for(int j = 0; j < nums.size()\
    \ - 1; j++) {\n            if(sum_of_digits[j] > sum_of_digits[j + 1]) {\n   \
    \             std::swap(sum_of_digits[j], sum_of_digits[j + 1]);\n           \
    \     std::swap(index[j], index[j + 1]);\n            }\n        }\n    }\n  \
    \  for(int i = 0; i < nums.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        int num = nums[i];\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        int num = nums[i];\n        if (num < 0) {\n       \
    \     num = -num;\n        }\n        while (num > 0) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        long n = nums[i];\n        if (n < 0) {\n         \
    \   n = n * -1;\n        }\n        while (n > 0) {\n            sum += n % 10;\n\
    \            n = n / 10;\n        }\n        map[sum].push_back(nums[i]);\n  \
    \  }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        std::vector<long>\
    \ temp = it->second;\n        for (int i = 0; i < temp.size(); i++) {\n      \
    \      result.push_back(temp[i]);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n\
    \        if (num < 0) num = -num;\n        while (num) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        m[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        for (int\
    \ i = 0; i < it->second.size(); i++) {\n            res.push_back(it->second[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        long num = nums[i];\n        if (num < 0) {\n      \
    \      num = -num;\n        }\n        while (num) {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        std::vector<long>\
    \ temp = it->second;\n        for (int i = 0; i < temp.size(); i++) {\n      \
    \      res.push_back(temp[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> map;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        int sum = 0;\n        int num = nums[i];\n    \
    \    while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        map[sum].push_back(nums[i]);\n    }\n    for (auto it = map.begin();\
    \ it != map.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++)\
    \ {\n            result.push_back(it->second[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::map<int, std::vector<long>>\
    \ map;\n    for (int i = 0; i < nums.size(); i++) {\n        int sum = 0;\n  \
    \      int num = nums[i];\n        while (num != 0) {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        int num = nums[i];\n        while (num != 0) {\n   \
    \         sum += num % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ sum;\n    std::vector<long> index;\n    std::vector<long> nums_copy;\n    nums_copy\
    \ = nums;\n    long sum_of_digits = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        sum_of_digits = 0;\n        while (nums[i] != 0) {\n            sum_of_digits\
    \ += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(sum_of_digits);\n\
    \        index.push_back(i);\n    }\n    for (int i = 0; i < sum.size(); i++)\
    \ {\n        for (int j = i + 1; j < sum.size(); j++) {\n            if (sum[i]\
    \ > sum[j]) {\n                std::swap(sum[i], sum[j]);\n                std::swap(index[i],\
    \ index[j]);\n            }\n        }\n    }\n    for (int i = 0; i < index.size();\
    \ i++) {\n        result.push_back(nums_copy[index[i]]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::vector<long> sum_of_digits;\n    std::vector<long>\
    \ index;\n    for(int i=0;i<nums.size();i++){\n        long sum = 0;\n       \
    \ long num = nums[i];\n        if(num<0){\n            num = num*(-1);\n     \
    \   }\n        while(num>0){\n            sum = sum + num%10;\n            num\
    \ = num/10;\n        }\n        sum_of_digits.push_back(sum);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sum_of_digits.size();i++){\n        for(int j=i+1;j<sum_of_digits.size();j++){\n\
    \            if(sum_of_digits[i]>sum_of_digits[j]){\n                long temp\
    \ = sum_of_digits[i];\n                sum_of_digits[i] = sum_of_digits[j];\n\
    \                sum_of_digits[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        int num = nums[i];\n        if (num < 0) {\n       \
    \     num = num * -1;\n        }\n        while (num > 0) {\n            sum +=\
    \ num % 10;\n            num = num / 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        long num = nums[i];\n        while (num != 0) {\n  \
    \          sum += num % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ sum;\n    std::vector<long> index;\n    long temp;\n    for(int i=0;i<nums.size();i++){\n\
    \        temp=0;\n        while(nums[i]!=0){\n            temp+=nums[i]%10;\n\
    \            nums[i]/=10;\n        }\n        sum.push_back(temp);\n        index.push_back(i);\n\
    \    }\n    for(int i=0;i<sum.size();i++){\n        for(int j=i+1;j<sum.size();j++){\n\
    \            if(sum[i]>sum[j]){\n                temp=sum[i];\n              \
    \  sum[i]=sum[j];\n                sum[j]=temp;\n                temp=index[i];\n\
    \                index[i]=index[j];\n                index[j]=temp;\n        \
    \    }\n        }\n    }\n    for(int i=0;i<index.size();i++){\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        long num = nums[i];\n        while (num != 0) {\n \
    \           sum += num % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ sum;\n    std::vector<long> index;\n    long s = 0;\n    for(int i = 0; i <\
    \ nums.size(); i++) {\n        s = 0;\n        while(nums[i] != 0) {\n       \
    \     s += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        sum.push_back(s);\n\
    \        index.push_back(i);\n    }\n    for(int i = 0; i < sum.size(); i++) {\n\
    \        for(int j = i + 1; j < sum.size(); j++) {\n            if(sum[i] > sum[j])\
    \ {\n                long temp = sum[i];\n                sum[i] = sum[j];\n \
    \               sum[j] = temp;\n                temp = index[i];\n           \
    \     index[i] = index[j];\n                index[j] = temp;\n            }\n\
    \        }\n    }\n    for(int i = 0; i < index.size(); i++) {\n        result.push_back(nums[index[i]]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::map<int,\
    \ std::vector<long>> map;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   int sum = 0;\n        int num = nums[i];\n        while (num != 0) {\n   \
    \         sum += num % 10;\n            num /= 10;\n        }\n        map[sum].push_back(nums[i]);\n\
    \    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        for\
    \ (int i = 0; i < it->second.size(); i++) {\n            result.push_back(it->second[i]);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
