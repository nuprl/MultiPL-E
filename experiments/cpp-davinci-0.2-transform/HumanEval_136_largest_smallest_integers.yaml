name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n\
  // std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n\
  // >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>>\
  \ largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest = std::nullopt;\n    std::optional<long> smallest = std::nullopt;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest.has_value()\
    \ || i > largest.value()) {\n                largest = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (!smallest.has_value() || i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest, smallest);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto& i : lst) {\n     \
    \   if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] < 0) {\n            if (a.has_value()) {\n               \
    \ if (lst[i] > a.value()) {\n                    a = lst[i];\n               \
    \ }\n            } else {\n                a = lst[i];\n            }\n      \
    \  } else if (lst[i] > 0) {\n            if (b.has_value()) {\n              \
    \  if (lst[i] < b.value()) {\n                    b = lst[i];\n              \
    \  }\n            } else {\n                b = lst[i];\n            }\n     \
    \   }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long> a;\n\
    \    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (largest_negative == std::nullopt) {\n                largest_negative =\
    \ i;\n            } else {\n                largest_negative = std::max(largest_negative.value(),\
    \ i);\n            }\n        } else if (i > 0) {\n            if (smallest_positive\
    \ == std::nullopt) {\n                smallest_positive = i;\n            } else\
    \ {\n                smallest_positive = std::min(smallest_positive.value(), i);\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative_integer = std::nullopt;\n\
    \    std::optional<long> smallest_positive_integer = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (i < 0 && (largest_negative_integer == std::nullopt ||\
    \ i > *largest_negative_integer)) {\n            largest_negative_integer = i;\n\
    \        }\n        if (i > 0 && (smallest_positive_integer == std::nullopt ||\
    \ i < *smallest_positive_integer)) {\n            smallest_positive_integer =\
    \ i;\n        }\n    }\n    return std::make_tuple(largest_negative_integer, smallest_positive_integer);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i: lst) {\n        if (i < 0) {\n            if (!largest_negative\
    \ || *largest_negative < i) {\n                largest_negative = i;\n       \
    \     }\n        } else if (i > 0) {\n            if (!smallest_positive || *smallest_positive\
    \ > i) {\n                smallest_positive = i;\n            }\n        }\n \
    \   }\n    return std::make_tuple(largest_negative, smallest_positive);", "  \
    \  std::optional<long> largest_negative = std::nullopt;\n    std::optional<long>\
    \ smallest_positive = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest_negative == std::nullopt) {\n                largest_negative\
    \ = i;\n            } else {\n                largest_negative = std::max(largest_negative.value(),\
    \ i);\n            }\n        } else if (i > 0) {\n            if (smallest_positive\
    \ == std::nullopt) {\n                smallest_positive = i;\n            } else\
    \ {\n                smallest_positive = std::min(smallest_positive.value(), i);\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative_integer;\n \
    \   std::optional<long> smallest_positive_integer;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!largest_negative_integer.has_value() ||\
    \ i > largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long>\
    \ smallest_positive = std::nullopt;\n    for (auto x : lst) {\n        if (x <\
    \ 0) {\n            if (largest_negative == std::nullopt || x > *largest_negative)\
    \ {\n                largest_negative = x;\n            }\n        } else if (x\
    \ > 0) {\n            if (smallest_positive == std::nullopt || x < *smallest_positive)\
    \ {\n                smallest_positive = x;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i > 0)\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else if (i < b.value()) {\n                b = i;\n            }\n        }\
    \ else if (i < 0) {\n            if (!a.has_value()) {\n                a = i;\n\
    \            } else if (i > a.value()) {\n                a = i;\n           \
    \ }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0 && (!largest_negative\
    \ || i > *largest_negative)) {\n            largest_negative = i;\n        }\n\
    \        if (i > 0 && (!smallest_positive || i < *smallest_positive)) {\n    \
    \        smallest_positive = i;\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i > 0)\
    \ {\n            if (!b.has_value()) {\n                b = i;\n            }\
    \ else if (i < b.value()) {\n                b = i;\n            }\n        }\
    \ else if (i < 0) {\n            if (!a.has_value()) {\n                a = i;\n\
    \            } else if (i > a.value()) {\n                a = i;\n           \
    \ }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative = std::nullopt;\n\
    \    std::optional<long> smallest_positive = std::nullopt;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (largest_negative == std::nullopt\
    \ || i > *largest_negative) {\n                largest_negative = i;\n       \
    \     }\n        } else if (i > 0) {\n            if (smallest_positive == std::nullopt\
    \ || i < *smallest_positive) {\n                smallest_positive = i;\n     \
    \       }\n        }\n    }\n    return std::make_tuple(largest_negative, smallest_positive);",
  "\tstd::optional<long> largest_negative;\n\tstd::optional<long> smallest_positive;\n\
    \tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> a, b;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a;\n    std::optional<long>\
    \ b;\n    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value())\
    \ {\n                b = i;\n            } else if (i < b.value()) {\n       \
    \         b = i;\n            }\n        } else if (i < 0) {\n            if (!a.has_value())\
    \ {\n                a = i;\n            } else if (i > a.value()) {\n       \
    \         a = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "  std::optional<long> largest_neg = std::nullopt;\n  std::optional<long>\
    \ smallest_pos = std::nullopt;\n  for (auto i : lst) {\n    if (i < 0) {\n   \
    \   if (largest_neg == std::nullopt) {\n        largest_neg = i;\n      } else\
    \ {\n        largest_neg = std::max(largest_neg.value(), i);\n      }\n    } else\
    \ if (i > 0) {\n      if (smallest_pos == std::nullopt) {\n        smallest_pos\
    \ = i;\n      } else {\n        smallest_pos = std::min(smallest_pos.value(),\
    \ i);\n      }\n    }\n  }\n  return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative_integer;\n    std::optional<long> smallest_positive_integer;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative_integer.has_value()\
    \ || i > largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "  std::optional<long> largest_negative;\n  std::optional<long>\
    \ smallest_positive;\n  for (auto &i : lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n        largest_negative = i;\n      }\n\
    \    } else if (i > 0) {\n      if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n        smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative = std::nullopt;\n\
    \    std::optional<long> smallest_positive = std::nullopt;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative_integer;\n \
    \   std::optional<long> smallest_positive_integer;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!largest_negative_integer.has_value() ||\
    \ i > largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    int max\
    \ = INT_MIN;\n    int min = INT_MAX;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        }\n\
    \        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n\
    \    }\n    if(max == INT_MIN){\n        max = NULL;\n    }\n    if(min == INT_MAX){\n\
    \        min = NULL;\n    }\n    return std::make_tuple(max, min);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a = std::nullopt;\n    std::optional<long> b = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative_number;\n\
    \    std::optional<long> smallest_positive_number;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!largest_negative_number.has_value()) {\n\
    \                largest_negative_number = i;\n            } else {\n        \
    \        if (i > largest_negative_number.value()) {\n                    largest_negative_number\
    \ = i;\n                }\n            }\n        } else if (i > 0) {\n      \
    \      if (!smallest_positive_number.has_value()) {\n                smallest_positive_number\
    \ = i;\n            } else {\n                if (i < smallest_positive_number.value())\
    \ {\n                    smallest_positive_number = i;\n                }\n  \
    \          }\n        }\n    }\n    return std::make_tuple(largest_negative_number,\
    \ smallest_positive_number);", "    std::optional<long> largest_negative;\n  \
    \  std::optional<long> smallest_positive;\n    for (auto i : lst) {\n        if\
    \ (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a;\n    std::optional<long> b;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg, smallest_pos;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_neg.has_value()\
    \ || i > largest_neg.value()) {\n                largest_neg = i;\n          \
    \  }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value() ||\
    \ i < smallest_pos.value()) {\n                smallest_pos = i;\n           \
    \ }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a = std::nullopt;\n    std::optional<long>\
    \ b = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!a.has_value() || i > a.value()) {\n                a = i;\n        \
    \    }\n        } else {\n            if (!b.has_value() || i < b.value()) {\n\
    \                b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        } else if\
    \ (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n            \
    \    a = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i: lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    if (lst.size() == 0) {\n        return std::make_tuple(a,\
    \ b);\n    }\n    long max = lst[0];\n    long min = lst[0];\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n        }\n        if (lst[i] < min) {\n            min = lst[i];\n\
    \        }\n    }\n    if (max > 0) {\n        a = max;\n    }\n    if (min <\
    \ 0) {\n        b = min;\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ &i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest;\n    std::optional<long> smallest;\n    for (auto i : lst) {\n    \
    \    if (i < 0) {\n            if (!largest.has_value() || i > largest.value())\
    \ {\n                largest = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest.has_value() || i < smallest.value()) {\n          \
    \      smallest = i;\n            }\n        }\n    }\n    return std::make_tuple(largest,\
    \ smallest);", "    std::optional<long> largest_neg, smallest_pos;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_neg.has_value() ||\
    \ i > largest_neg.value()) {\n                largest_neg = i;\n            }\n\
    \        } else if (i > 0) {\n            if (!smallest_pos.has_value() || i <\
    \ smallest_pos.value()) {\n                smallest_pos = i;\n            }\n\
    \        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);", " \
    \   std::optional<long> largest_negative = std::nullopt;\n    std::optional<long>\
    \ smallest_positive = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest_negative == std::nullopt) {\n                largest_negative\
    \ = i;\n            } else {\n                largest_negative = std::max(largest_negative.value(),\
    \ i);\n            }\n        } else if (i > 0) {\n            if (smallest_positive\
    \ == std::nullopt) {\n                smallest_positive = i;\n            } else\
    \ {\n                smallest_positive = std::min(smallest_positive.value(), i);\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest = std::nullopt;\n   \
    \ std::optional<long> smallest = std::nullopt;\n    for (auto i : lst) {\n   \
    \     if (i > 0) {\n            if (!smallest.has_value()) {\n               \
    \ smallest = i;\n            } else if (i < smallest.value()) {\n            \
    \    smallest = i;\n            }\n        } else if (i < 0) {\n            if\
    \ (!largest.has_value()) {\n                largest = i;\n            } else if\
    \ (i > largest.value()) {\n                largest = i;\n            }\n     \
    \   }\n    }\n    return std::make_tuple(largest, smallest);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0 && (!largest_negative\
    \ || i > *largest_negative)) {\n            largest_negative = i;\n        }\n\
    \        if (i > 0 && (!smallest_positive || i < *smallest_positive)) {\n    \
    \        smallest_positive = i;\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a = std::nullopt;\n    std::optional<long>\
    \ b = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!a.has_value() || i > a.value()) {\n                a = i;\n        \
    \    }\n        } else {\n            if (!b.has_value() || i < b.value()) {\n\
    \                b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative_integer;\n    std::optional<long> smallest_positive_integer;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative_integer.has_value()\
    \ || i > largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ x : lst) {\n        if (x < 0) {\n            if (!largest_negative.has_value()\
    \ || x > largest_negative.value()) {\n                largest_negative = x;\n\
    \            }\n        } else if (x > 0) {\n            if (!smallest_positive.has_value()\
    \ || x < smallest_positive.value()) {\n                smallest_positive = x;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a, b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || a.value()\
    \ < i) {\n                a = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!b.has_value() || b.value() > i) {\n                b = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_neg, smallest_pos;\n\t\
    for (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_neg.has_value() ||\
    \ i > largest_neg.value()) {\n\t\t\t\tlargest_neg = i;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if (i > 0) {\n\t\t\tif (!smallest_pos.has_value() || i < smallest_pos.value())\
    \ {\n\t\t\t\tsmallest_pos = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_neg,\
    \ smallest_pos);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto x : lst) {\n        if (x < 0) {\n       \
    \     if (!largest_negative.has_value() || x > largest_negative.value()) {\n \
    \               largest_negative = x;\n            }\n        } else if (x > 0)\
    \ {\n            if (!smallest_positive.has_value() || x < smallest_positive.value())\
    \ {\n                smallest_positive = x;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ &i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        } else if\
    \ (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n            \
    \    a = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n\
    \            if (!b.has_value() || i < b.value()) {\n                b = i;\n\
    \            }\n        } else if (i < 0) {\n            if (!a.has_value() ||\
    \ i > a.value()) {\n                a = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest;\n    std::optional<long>\
    \ smallest;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest.has_value()\
    \ || i > largest.value()) {\n                largest = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (!smallest.has_value() || i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest, smallest);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> largest_negative,\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> large = std::nullopt;\n\
    \    std::optional<long> small = std::nullopt;\n    for (auto i : lst) {\n   \
    \     if (i > 0) {\n            if (small == std::nullopt) {\n               \
    \ small = i;\n            } else if (i < small) {\n                small = i;\n\
    \            }\n        } else if (i < 0) {\n            if (large == std::nullopt)\
    \ {\n                large = i;\n            } else if (i > large) {\n       \
    \         large = i;\n            }\n        }\n    }\n    return std::make_tuple(large,\
    \ small);", "    std::optional<long> a;\n    std::optional<long> b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tlong max_neg = LONG_MIN;\n\tlong min_pos = LONG_MAX;\n\
    \tbool has_neg = false;\n\tbool has_pos = false;\n\tfor (long i : lst) {\n\t\t\
    if (i < 0) {\n\t\t\thas_neg = true;\n\t\t\tif (i > max_neg) {\n\t\t\t\tmax_neg\
    \ = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\thas_pos = true;\n\t\t\tif\
    \ (i < min_pos) {\n\t\t\t\tmin_pos = i;\n\t\t\t}\n\t\t}\n\t}\n\tstd::optional<long>\
    \ a;\n\tstd::optional<long> b;\n\tif (has_neg) {\n\t\ta = max_neg;\n\t}\n\tif\
    \ (has_pos) {\n\t\tb = min_pos;\n\t}\n\treturn std::make_tuple(a, b);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "\tstd::optional<long> largest_negative, smallest_positive;\n\tfor (auto i : lst)\
    \ {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value() || i < smallest_positive.value()) {\n\t\t\
    \t\tsmallest_positive = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a = std::nullopt;\n    std::optional<long>\
    \ b = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!a.has_value() || i > a.value()) {\n                a = i;\n        \
    \    }\n        } else {\n            if (!b.has_value() || i < b.value()) {\n\
    \                b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> a = std::nullopt;\n    std::optional<long> b\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!a.has_value() || i > a.value()) {\n                a = i;\n          \
    \  }\n        } else if (i > 0) {\n            if (!b.has_value() || i < b.value())\
    \ {\n                b = i;\n            }\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative_integer;\n    std::optional<long>\
    \ smallest_positive_integer;\n    for (auto x : lst) {\n        if (x < 0) {\n\
    \            if (!largest_negative_integer.has_value() || x > largest_negative_integer.value())\
    \ {\n                largest_negative_integer = x;\n            }\n        } else\
    \ if (x > 0) {\n            if (!smallest_positive_integer.has_value() || x <\
    \ smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = x;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg = std::nullopt;\n\
    \    std::optional<long> smallest_pos = std::nullopt;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (largest_neg == std::nullopt) {\n  \
    \              largest_neg = i;\n            } else {\n                largest_neg\
    \ = std::max(largest_neg.value(), i);\n            }\n        } else if (i > 0)\
    \ {\n            if (smallest_pos == std::nullopt) {\n                smallest_pos\
    \ = i;\n            } else {\n                smallest_pos = std::min(smallest_pos.value(),\
    \ i);\n            }\n        }\n    }\n    return std::make_tuple(largest_neg,\
    \ smallest_pos);", "    std::optional<long> a, b;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n  \
    \              a = i;\n            }\n        } else if (i > 0) {\n          \
    \  if (!b.has_value() || i < b.value()) {\n                b = i;\n          \
    \  }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tstd::optional<long>\
    \ a, b;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() ||\
    \ i > a.value())\n\t\t\t\ta = i;\n\t\t}\n\t\telse if (i > 0) {\n\t\t\tif (!b.has_value()\
    \ || i < b.value())\n\t\t\t\tb = i;\n\t\t}\n\t}\n\treturn std::make_tuple(a, b);",
  "    std::optional<long> largest_negative_integer = std::nullopt;\n    std::optional<long>\
    \ smallest_positive_integer = std::nullopt;\n    for (long i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative_integer.has_value() || i >\
    \ largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a = std::nullopt;\n    std::optional<long> b = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest;\n    std::optional<long> smallest;\n    for (auto i : lst) {\n    \
    \    if (i < 0) {\n            if (!largest.has_value() || i > largest.value())\
    \ {\n                largest = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest.has_value() || i < smallest.value()) {\n          \
    \      smallest = i;\n            }\n        }\n    }\n    return std::make_tuple(largest,\
    \ smallest);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest = std::nullopt;\n    std::optional<long> smallest = std::nullopt;\n\
    \    for (auto i : lst) {\n        if (i > 0) {\n            if (!smallest.has_value())\
    \ {\n                smallest = i;\n            } else if (i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        } else if (i < 0) {\n\
    \            if (!largest.has_value()) {\n                largest = i;\n     \
    \       } else if (i > largest.value()) {\n                largest = i;\n    \
    \        }\n        }\n    }\n    return std::make_tuple(largest, smallest);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i: lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!largest_neg.has_value() || i > largest_neg.value()) {\n                largest_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value()\
    \ || i < smallest_pos.value()) {\n                smallest_pos = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative, smallest_positive;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        } else if\
    \ (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n            \
    \    a = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    if(lst.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    std::optional<long> largest_negative\
    \ = std::nullopt;\n    std::optional<long> smallest_positive = std::nullopt;\n\
    \    for(auto i : lst) {\n        if(i < 0) {\n            if(largest_negative\
    \ == std::nullopt) {\n                largest_negative = i;\n            } else\
    \ {\n                largest_negative = std::max(largest_negative.value(), i);\n\
    \            }\n        } else if(i > 0) {\n            if(smallest_positive ==\
    \ std::nullopt) {\n                smallest_positive = i;\n            } else\
    \ {\n                smallest_positive = std::min(smallest_positive.value(), i);\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "  std::optional<long> largest_negative = std::nullopt;\n\
    \  std::optional<long> smallest_positive = std::nullopt;\n  for (auto i : lst)\
    \ {\n    if (i < 0) {\n      if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n        largest_negative = i;\n      }\n    } else if (i > 0) {\n      if\
    \ (!smallest_positive.has_value() || i < smallest_positive.value()) {\n      \
    \  smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    for (auto i: lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::tuple<std::optional<long>,\
    \ std::optional<long>> result;\n    std::optional<long> a, b;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    result = std::make_tuple(a, b);\n    return\
    \ result;", "    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long>\
    \ smallest_positive = std::nullopt;\n    for (auto i: lst) {\n        if (i <\
    \ 0) {\n            if (!largest_negative.has_value() || largest_negative.value()\
    \ < i) {\n                largest_negative = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (!smallest_positive.has_value() || smallest_positive.value()\
    \ > i) {\n                smallest_positive = i;\n            }\n        }\n \
    \   }\n    return std::make_tuple(largest_negative, smallest_positive);", "  \
    \  std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    if(lst.size() == 0)\n        return std::make_tuple(a, b);\n    long max\
    \ = INT_MIN;\n    long min = INT_MAX;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0 && lst[i] < min)\n            min = lst[i];\n        if(lst[i]\
    \ < 0 && lst[i] > max)\n            max = lst[i];\n    }\n    if(max == INT_MIN)\n\
    \        a = std::nullopt;\n    else\n        a = max;\n    if(min == INT_MAX)\n\
    \        b = std::nullopt;\n    else\n        b = min;\n    return std::make_tuple(a,\
    \ b);", "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative)\
    \ {\n                largest_negative = i;\n            } else {\n           \
    \     largest_negative = std::max(largest_negative.value(), i);\n            }\n\
    \        } else if (i > 0) {\n            if (!smallest_positive) {\n        \
    \        smallest_positive = i;\n            } else {\n                smallest_positive\
    \ = std::min(smallest_positive.value(), i);\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n\
    \            if (!b.has_value() || i < b.value()) {\n                b = i;\n\
    \            }\n        } else if (i < 0) {\n            if (!a.has_value() ||\
    \ i > a.value()) {\n                a = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);"]
stop_tokens:
- "\n}"
