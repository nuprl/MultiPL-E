name: HumanEval_14_all_prefixes
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
  \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
  // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
  abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
  \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
  asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
  W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;", "    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n\
    \    }\n    return prefixes;", "  std::vector<std::string> result;\n  for (int\
    \ i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0, i +\
    \ 1));\n  }\n  return result;", "    std::vector<std::string> prefixes;\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;"]
stop_tokens:
- "\n}"
