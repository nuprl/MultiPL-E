language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream ss2;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i != 0) ss2 << \" \";\n        if (nums[i] == 0) ss2 << \"zero\";\n\
    \        else if (nums[i] == 1) ss2 << \"one\";\n        else if (nums[i] == 2)\
    \ ss2 << \"two\";\n        else if (nums[i] == 3) ss2 << \"three\";\n        else\
    \ if (nums[i] == 4) ss2 << \"four\";\n        else if (nums[i] == 5) ss2 << \"\
    five\";\n        else if (nums[i] == 6) ss2 << \"six\";\n        else if (nums[i]\
    \ == 7) ss2 << \"seven\";\n        else if (nums[i] == 8) ss2 << \"eight\";\n\
    \        else if (nums[i] == 9) ss2 << \"nine\";\n    }\n    return ss2.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ynvdgt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx0ynvdgt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpx0ynvdgt.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpx0ynvdgt.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpx0ynvdgt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx0ynvdgt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkvlg4hs0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkvlg4hs0.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpkvlg4hs0.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmpkvlg4hs0.cpp:80:1: error: expected \u2018}\u2019 at\
    \ end of input\n   80 | }\n      | ^\n/tmp/tmpkvlg4hs0.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkvlg4hs0.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::stringstream ss1;\n    for(int i = 0; i < v.size(); i++) {\n       \
    \ if(v[i] == 0) {\n            ss1 << \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            ss1 << \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            ss1 << \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           ss1 << \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        ss1 << \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    ss1 << \"five \";\n        }\n        else if(v[i] == 6) {\n            ss1\
    \ << \"six \";\n        }\n        else if(v[i] == 7) {\n            ss1 <<\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2r7lfhv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_2r7lfhv.cpp:70:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   70 | }\n      | ^\n/tmp/tmp_2r7lfhv.cpp:71:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   71 | int main() {\n     \
    \ |            ^\n/tmp/tmp_2r7lfhv.cpp:78:1: error: expected \u2018}\u2019 at\
    \ end of input\n   78 | }\n      | ^\n/tmp/tmp_2r7lfhv.cpp:46:39: note: to match\
    \ this \u2018{\u2019\n   46 |     for(int i = 0; i < v.size(); i++) {\n      |\
    \                                       ^\n/tmp/tmp_2r7lfhv.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmp_2r7lfhv.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_2r7lfhv.cpp:78:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   78 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (auto num : nums) {\n        if (num == 0) result\
    \ += \"zero \";\n        else if (num == 1) result += \"one \";\n        else\
    \ if (num == 2) result += \"two \";\n        else if (num == 3) result += \"three\
    \ \";\n        else if (num == 4) result += \"four \";\n        else if (num ==\
    \ 5) result += \"five \";\n        else if (num == 6) result += \"six \";\n  \
    \      else if (num == 7) result += \"seven \";\n        else if (num == 8) result\
    \ += \"eight \";\n        else if (num == 9) result += \"nine \";\n    }\n   \
    \ return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> v;\n    while(std::getline(ss, token, ' ')) {\n        if(token\
    \ == \"zero\") {\n            v.push_back(0);\n        } else if(token == \"one\"\
    ) {\n            v.push_back(1);\n        } else if(token == \"two\") {\n    \
    \        v.push_back(2);\n        } else if(token == \"three\") {\n          \
    \  v.push_back(3);\n        } else if(token == \"four\") {\n            v.push_back(4);\n\
    \        } else if(token == \"five\") {\n            v.push_back(5);\n       \
    \ } else if(token == \"six\") {\n            v.push_back(6);\n        } else if(token\
    \ == \"seven\") {\n            v.push_back(7);\n        } else if(token == \"\
    eight\") {\n            v.push_back(8);\n        } else if(token == \"nine\")\
    \ {\n            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if(v[i] == 1) {\n\
    \            result += \"one \";\n        } else if(v[i] == 2) {\n           \
    \ result += \"two \";\n        } else if(v[i] == 3) {\n            result += \"\
    three \";\n        } else if(v[i] == 4) {\n            result += \"four \";\n\
    \        } else if(v[i] == 5) {\n            result += \"five \";\n        } else\
    \ if(v[i] == 6) {\n            result += \"six \";\n        } else if(v[i] ==\
    \ 7) {\n            result += \"seven \";\n        } else if(v[i] == 8) {\n  \
    \          result += \"eight \";\n        } else if(v[\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0ayl7_k.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmph0ayl7_k.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmph0ayl7_k.cpp:56:21: error: expected\
    \ \u2018]\u2019 before \u2018}\u2019 token\n   56 |         } else if(v[\n   \
    \   |                     ^\n      |                     ]\n   57 | }\n      |\
    \ ~                    \n/tmp/tmph0ayl7_k.cpp:56:21: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   56 |         } else if(v[\n      |          \
    \        ~  ^\n      |                     )\n   57 | }\n      | ~           \
    \         \n/tmp/tmph0ayl7_k.cpp:57:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmph0ayl7_k.cpp:58:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   58\
    \ | int main() {\n      |            ^\n/tmp/tmph0ayl7_k.cpp:65:1: error: expected\
    \ \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmph0ayl7_k.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmph0ayl7_k.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> vec;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            vec.push_back(0);\n        } else if (temp == \"one\") {\n  \
    \          vec.push_back(1);\n        } else if (temp == \"two\") {\n        \
    \    vec.push_back(2);\n        } else if (temp == \"three\") {\n            vec.push_back(3);\n\
    \        } else if (temp == \"four\") {\n            vec.push_back(4);\n     \
    \   } else if (temp == \"five\") {\n            vec.push_back(5);\n        } else\
    \ if (temp == \"six\") {\n            vec.push_back(6);\n        } else if (temp\
    \ == \"seven\") {\n            vec.push_back(7);\n        } else if (temp == \"\
    eight\") {\n            vec.push_back(8);\n        } else if (temp == \"nine\"\
    ) {\n            vec.push_back(9);\n        }\n    }\n    std::sort(vec.begin(),\
    \ vec.end());\n    std::string result;\n    for (int i = 0; i < vec.size(); i++)\
    \ {\n        if (vec[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if (vec[i] == 1) {\n            result += \"one \";\n        } else if (vec[i]\
    \ == 2) {\n            result += \"two \";\n        } else if (vec[i] == 3) {\n\
    \            result += \"three \";\n        } else if (vec[i] == 4) {\n      \
    \      result += \"four \";\n        } else if (vec[i] == 5) {\n            result\
    \ += \"five \";\n        } else if (vec[i] == 6) {\n            result += \"six\
    \ \";\n        } else if (vec[i] == 7) {\n            result += \"seven \";\n\
    \        } else if (vec[i] == 8) {\n            result += \"eight \";\n      \
    \  } else if (vec[i] == 9) {\n           \n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbmix8vxn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbmix8vxn.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpbmix8vxn.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpbmix8vxn.cpp:37:42:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < vec.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmpbmix8vxn.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpbmix8vxn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpbmix8vxn.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph9lwuaf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpph9lwuaf.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) res +=\
    \ \"zero \";\n        else if (nums[i] == 1) res += \"one \";\n        else if\
    \ (nums[i] == 2) res += \"two \";\n        else if (nums[i] == 3) res += \"three\
    \ \";\n        else if (nums[i] == 4) res += \"four \";\n        else if (nums[i]\
    \ == 5) res += \"five \";\n        else if (nums[i] == 6) res += \"six \";\n \
    \       else if (nums[i] == 7) res += \"seven \";\n        else if (nums[i] ==\
    \ 8) res += \"eight \";\n        else if (nums[i] == 9) res += \"nine \";\n  \
    \  }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::stringstream ss(numbers);\n  std::vector<int> nums;\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result = \"\";\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ppi456j.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0ppi456j.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp0ppi456j.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp0ppi456j.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp0ppi456j.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp0ppi456j.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") nums.push_back(0);\n        else if (token == \"one\") nums.push_back(1);\n\
    \        else if (token == \"two\") nums.push_back(2);\n        else if (token\
    \ == \"three\") nums.push_back(3);\n        else if (token == \"four\") nums.push_back(4);\n\
    \        else if (token == \"five\") nums.push_back(5);\n        else if (token\
    \ == \"six\") nums.push_back(6);\n        else if (token == \"seven\") nums.push_back(7);\n\
    \        else if (token == \"eight\") nums.push_back(8);\n        else if (token\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] ==\
    \ 0) {\n            result += \"zero \";\n        } else if (nums[i] == 1) {\n\
    \            result += \"one \";\n        } else if (nums[i] == 2) {\n       \
    \     result += \"two \";\n        } else if (nums[i] == 3) {\n            result\
    \ += \"three \";\n        } else if (nums[i] == 4) {\n            result += \"\
    four \";\n        } else if (nums[i] == 5) {\n            result += \"five \"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six \";\n     \
    \   } else if (nums[i] == 7) {\n            result += \"seven \";\n        } else\
    \ if (\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4ar35wq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpn4ar35wq.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpn4ar35wq.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmpn4ar35wq.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpn4ar35wq.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpn4ar35wq.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpn4ar35wq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpn4ar35wq.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph9lwuaf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpph9lwuaf.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) res += \"zero \";\n     \
    \   else if(v[i] == 1) res += \"one \";\n        else if(v[i] == 2) res += \"\
    two \";\n        else if(v[i] == 3) res += \"three \";\n        else if(v[i] ==\
    \ 4) res += \"four \";\n        else if(v[i] == 5) res += \"five \";\n       \
    \ else if(v[i] == 6) res += \"six \";\n        else if(v[i] == 7) res += \"seven\
    \ \";\n        else if(v[i] == 8) res += \"eight \";\n        else if(v[i] ==\
    \ 9) res += \"nine \";\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpy13413xa: /tmp/tmpy13413xa.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\")\
    \ {\n            nums.push_back(0);\n        } else if(temp == \"one\") {\n  \
    \          nums.push_back(1);\n        } else if(temp == \"two\") {\n        \
    \    nums.push_back(2);\n        } else if(temp == \"three\") {\n            nums.push_back(3);\n\
    \        } else if(temp == \"four\") {\n            nums.push_back(4);\n     \
    \   } else if(temp == \"five\") {\n            nums.push_back(5);\n        } else\
    \ if(temp == \"six\") {\n            nums.push_back(6);\n        } else if(temp\
    \ == \"seven\") {\n            nums.push_back(7);\n        } else if(temp == \"\
    eight\") {\n            nums.push_back(8);\n        } else if(temp == \"nine\"\
    ) {\n            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for(int i = 0; i < nums.size(); i++)\
    \ {\n        if(nums[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if(nums[i] == 1) {\n            result += \"one \";\n        } else if(nums[i]\
    \ == 2) {\n            result += \"two \";\n        } else if(nums[i] == 3) {\n\
    \            result += \"three \";\n        } else if(nums[i] == 4) {\n      \
    \      result += \"four \";\n        } else if(nums[i] == 5) {\n            result\
    \ += \"five \";\n        } else if(nums[i] == 6) {\n            result += \"six\
    \ \";\n        } else if(nums[i] == 7) {\n            result += \"seven \";\n\
    \        } else if(nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp787h09zh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp787h09zh.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp787h09zh.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp787h09zh.cpp:37:42:\
    \ note: to match this \u2018{\u2019\n   37 |     for(int i = 0; i < nums.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmp787h09zh.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp787h09zh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp787h09zh.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") nums.push_back(0);\n\
    \    else if (word == \"one\") nums.push_back(1);\n    else if (word == \"two\"\
    ) nums.push_back(2);\n    else if (word == \"three\") nums.push_back(3);\n   \
    \ else if (word == \"four\") nums.push_back(4);\n    else if (word == \"five\"\
    ) nums.push_back(5);\n    else if (word == \"six\") nums.push_back(6);\n    else\
    \ if (word == \"seven\") nums.push_back(7);\n    else if (word == \"eight\") nums.push_back(8);\n\
    \    else if (word == \"nine\") nums.push_back(9);\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::stringstream res;\n  for (auto i : nums) {\n    if (i ==\
    \ 0) res << \"zero \";\n    else if (i == 1) res << \"one \";\n    else if (i\
    \ == 2) res << \"two \";\n    else if (i == 3) res << \"three \";\n    else if\
    \ (i == 4) res << \"four \";\n    else if (i == 5) res << \"five \";\n    else\
    \ if (i == 6) res << \"six \";\n    else if (i == 7) res << \"seven \";\n    else\
    \ if (i == 8) res << \"eight \";\n    else if (i == 9) res << \"nine \";\n  }\n\
    \  return res.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpd987m_yf: /tmp/tmpd987m_yf.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::vector<int> v;\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\")\n\t\t\tv.push_back(0);\n\
    \t\telse if (word == \"one\")\n\t\t\tv.push_back(1);\n\t\telse if (word == \"\
    two\")\n\t\t\tv.push_back(2);\n\t\telse if (word == \"three\")\n\t\t\tv.push_back(3);\n\
    \t\telse if (word == \"four\")\n\t\t\tv.push_back(4);\n\t\telse if (word == \"\
    five\")\n\t\t\tv.push_back(5);\n\t\telse if (word == \"six\")\n\t\t\tv.push_back(6);\n\
    \t\telse if (word == \"seven\")\n\t\t\tv.push_back(7);\n\t\telse if (word == \"\
    eight\")\n\t\t\tv.push_back(8);\n\t\telse if (word == \"nine\")\n\t\t\tv.push_back(9);\n\
    \t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < v.size(); i++) {\n\t\tif (v[i] == 0)\n\t\t\tresult += \"zero \";\n\
    \t\telse if (v[i] == 1)\n\t\t\tresult += \"one \";\n\t\telse if (v[i] == 2)\n\t\
    \t\tresult += \"two \";\n\t\telse if (v[i] == 3)\n\t\t\tresult += \"three \";\n\
    \t\telse if (v[i] == 4)\n\t\t\tresult += \"four \";\n\t\telse if (v[i] == 5)\n\
    \t\t\tresult += \"five \";\n\t\telse if (v[i] == 6)\n\t\t\tresult += \"six \"\
    ;\n\t\telse if (v[i] == 7)\n\t\t\tresult += \"seven \";\n\t\telse if (v[i] ==\
    \ 8)\n\t\t\tresult +=\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbi2hrd0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgbi2hrd0.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpgbi2hrd0.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpgbi2hrd0.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpgbi2hrd0.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpgbi2hrd0.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\")\
    \ nums.push_back(0);\n        else if(temp == \"one\") nums.push_back(1);\n  \
    \      else if(temp == \"two\") nums.push_back(2);\n        else if(temp == \"\
    three\") nums.push_back(3);\n        else if(temp == \"four\") nums.push_back(4);\n\
    \        else if(temp == \"five\") nums.push_back(5);\n        else if(temp ==\
    \ \"six\") nums.push_back(6);\n        else if(temp == \"seven\") nums.push_back(7);\n\
    \        else if(temp == \"eight\") nums.push_back(8);\n        else if(temp ==\
    \ \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream res;\n    for(int i = 0; i < nums.size(); i++) {\n    \
    \    if(i != 0) res << \" \";\n        if(nums[i] == 0) res << \"zero\";\n   \
    \     else if(nums[i] == 1) res << \"one\";\n        else if(nums[i] == 2) res\
    \ << \"two\";\n        else if(nums[i] == 3) res << \"three\";\n        else if(nums[i]\
    \ == 4) res << \"four\";\n        else if(nums[i] == 5) res << \"five\";\n   \
    \     else if(nums[i] == 6) res << \"six\";\n        else if(nums[i] == 7) res\
    \ << \"seven\";\n        else if(nums[i] == 8) res << \"eight\";\n        else\
    \ if(nums[i] == 9) res << \"nine\";\n    }\n    return res.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn75ovd1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmprn75ovd1.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmprn75ovd1.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmprn75ovd1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n            result\
    \ << \" \";\n        }\n        if (nums[i] == 0) {\n            result << \"\
    zero\";\n        } else if (nums[i] == 1) {\n            result << \"one\";\n\
    \        } else if (nums[i] == 2) {\n            result << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            result << \"three\";\n        } else if\
    \ (nums[i] == 4) {\n            result << \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result << \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result << \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result << \"seven\";\n        } else\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8whox685.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8whox685.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmp8whox685.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmp8whox685.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmp8whox685.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp8whox685.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse\
    \ if (nums[i] == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 2) {\n\t\t\tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\
    \tresult += \"three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult +=\
    \ \"four\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz207_vy.cpp:60:14: warning: missing terminating \" character\n\
    \   60 |    result += \"four\n      |              ^\n/tmp/tmpyz207_vy.cpp:60:14:\
    \ error: missing terminating \" character\n   60 |    result += \"four\n     \
    \ |              ^~~~~\n/tmp/tmpyz207_vy.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyz207_vy.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmpyz207_vy.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmpyz207_vy.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmpyz207_vy.cpp:46:40: note: to match\
    \ this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmpyz207_vy.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpyz207_vy.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyz207_vy.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq11v8jj3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpq11v8jj3.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpq11v8jj3.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpq11v8jj3.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpq11v8jj3.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpq11v8jj3.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string res;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            res += \"zero \";\n        } else if (v[i] == 1) {\n  \
    \          res += \"one \";\n        } else if (v[i] == 2) {\n            res\
    \ += \"two \";\n        } else if (v[i] == 3) {\n            res += \"three \"\
    ;\n        } else if (v[i] == 4) {\n            res += \"four \";\n        } else\
    \ if (v[i] == 5) {\n            res += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            res += \"six \";\n        } else if (v[i] == 7) {\n      \
    \      res += \"seven \";\n        } else if (v[i] == 8) {\n            res +=\
    \ \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpru5gpsk8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpru5gpsk8.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpru5gpsk8.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpru5gpsk8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp)\n        nums.push_back(temp);\n\
    \    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ &i : nums)\n        result += i + \" \";\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwacaqlcm: /tmp/tmpwacaqlcm.cpp:23: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string output = \"\";\n    for\
    \ (auto i : nums) {\n        if (i == 0) {\n            output += \"zero \";\n\
    \        } else if (i == 1) {\n            output += \"one \";\n        } else\
    \ if (i == 2) {\n            output += \"two \";\n        } else if (i == 3) {\n\
    \            output += \"three \";\n        } else if (i == 4) {\n           \
    \ output += \"four \";\n        } else if (i == 5) {\n            output += \"\
    five \";\n        } else if (i == 6) {\n            output += \"six \";\n    \
    \    } else if (i == 7) {\n            output += \"seven \";\n        } else if\
    \ (i == 8) {\n            output += \"eight \";\n        } else if (i == 9) {\n\
    \            output += \"nine \";\n        }\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpspmp17ea: /tmp/tmpspmp17ea.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::stringstream result;\n    for (int i = 0; i < v.size(); i++) {\n     \
    \   if (i != 0) {\n            result << \" \";\n        }\n        if (v[i] ==\
    \ 0) {\n            result << \"zero\";\n        } else if (v[i] == 1) {\n   \
    \         result << \"one\";\n        } else if (v[i] == 2) {\n            result\
    \ << \"two\";\n        } else if (v[i] == 3) {\n            result << \"three\"\
    ;\n        } else if (v[i] == 4) {\n            result << \"four\";\n        }\
    \ else if (v[i] == 5) {\n            result << \"five\";\n        } else if (v[i]\
    \ == 6) {\n            result << \"six\";\n        } else if (v[i] == 7) {\n \
    \           result << \"seven\";\n        } else if (v[i] == 8) {\n          \
    \  result << \"eight\";\n        } else if\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2iurd9q.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpq2iurd9q.cpp:60:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n      | (\n/tmp/tmpq2iurd9q.cpp:61:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   61 |\
    \ int main() {\n      |            ^\n/tmp/tmpq2iurd9q.cpp:68:1: error: expected\
    \ \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpq2iurd9q.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpq2iurd9q.cpp:68:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   68 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> num_vec;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        num_vec.push_back(temp);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::stringstream\
    \ ss2;\n    for (auto i : num_vec) {\n        ss2 << i << \" \";\n    }\n    return\
    \ ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ijupgj9: /tmp/tmp7ijupgj9.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream res;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n            res << \"\
    \ \";\n        }\n        if (nums[i] == 0) {\n            res << \"zero\";\n\
    \        } else if (nums[i] == 1) {\n            res << \"one\";\n        } else\
    \ if (nums[i] == 2) {\n            res << \"two\";\n        } else if (nums[i]\
    \ == 3) {\n            res << \"three\";\n        } else if (nums[i] == 4) {\n\
    \            res << \"four\";\n        } else if (nums[i] == 5) {\n          \
    \  res << \"five\";\n        } else if (nums[i] == 6) {\n            res << \"\
    six\";\n        } else if (nums[i] == 7) {\n            res << \"seven\";\n  \
    \      } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr2q_tn13.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpr2q_tn13.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpr2q_tn13.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpr2q_tn13.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpr2q_tn13.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpr2q_tn13.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res += \" \";\n   \
    \     if (nums[i] == 0) res += \"zero\";\n        else if (nums[i] == 1) res +=\
    \ \"one\";\n        else if (nums[i] == 2) res += \"two\";\n        else if (nums[i]\
    \ == 3) res += \"three\";\n        else if (nums[i] == 4) res += \"four\";\n \
    \       else if (nums[i] == 5) res += \"five\";\n        else if (nums[i] == 6)\
    \ res += \"six\";\n        else if (nums[i] == 7) res += \"seven\";\n        else\
    \ if (nums[i] == 8) res += \"eight\";\n        else if (nums[i] == 9) res += \"\
    nine\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string res;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            res += \"zero \";\n        } else if (v[i] == 1) {\n  \
    \          res += \"one \";\n        } else if (v[i] == 2) {\n            res\
    \ += \"two \";\n        } else if (v[i] == 3) {\n            res += \"three \"\
    ;\n        } else if (v[i] == 4) {\n            res += \"four \";\n        } else\
    \ if (v[i] == 5) {\n            res += \"five \";\n        } else if (v[i] ==\
    \ 6) {\n            res += \"six \";\n        } else if (v[i] == 7) {\n      \
    \      res += \"seven \";\n        } else if (v[i] == 8) {\n            res +=\
    \ \"eight \";\n        } else if (v[i] == 9) {\n           \n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpru5gpsk8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpru5gpsk8.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpru5gpsk8.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpru5gpsk8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpru5gpsk8.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n         \
    \   result << \"zero \";\n        } else if (nums[i] == 1) {\n            result\
    \ << \"one \";\n        } else if (nums[i] == 2) {\n            result << \"two\
    \ \";\n        } else if (nums[i] == 3) {\n            result << \"three \";\n\
    \        } else if (nums[i] == 4) {\n            result << \"four \";\n      \
    \  } else if (nums[i] == 5) {\n            result << \"five \";\n        } else\
    \ if (nums[i] == 6) {\n            result << \"six \";\n        } else if (nums[i]\
    \ == 7) {\n            result << \"seven \";\n        } else if (nums[i] == 8)\
    \ {\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9odkd0c.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf9odkd0c.cpp:56:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   56 | int main() {\n      |            ^\n/tmp/tmpf9odkd0c.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpf9odkd0c.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpf9odkd0c.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpf9odkd0c.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpf9odkd0c.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\")\
    \ {\n            nums.push_back(0);\n        } else if(temp == \"one\") {\n  \
    \          nums.push_back(1);\n        } else if(temp == \"two\") {\n        \
    \    nums.push_back(2);\n        } else if(temp == \"three\") {\n            nums.push_back(3);\n\
    \        } else if(temp == \"four\") {\n            nums.push_back(4);\n     \
    \   } else if(temp == \"five\") {\n            nums.push_back(5);\n        } else\
    \ if(temp == \"six\") {\n            nums.push_back(6);\n        } else if(temp\
    \ == \"seven\") {\n            nums.push_back(7);\n        } else if(temp == \"\
    eight\") {\n            nums.push_back(8);\n        } else if(temp == \"nine\"\
    ) {\n            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for(int i = 0; i < nums.size();\
    \ i++) {\n        if(nums[i] == 0) {\n            ss2 << \"zero \";\n        }\
    \ else if(nums[i] == 1) {\n            ss2 << \"one \";\n        } else if(nums[i]\
    \ == 2) {\n            ss2 << \"two \";\n        } else if(nums[i] == 3) {\n \
    \           ss2 << \"three \";\n        } else if(nums[i] == 4) {\n          \
    \  ss2 << \"four \";\n        } else if(nums[i] == 5) {\n            ss2 << \"\
    five \";\n        } else if(nums[i] == 6) {\n            ss2 << \"six \";\n  \
    \      } else if(nums[i] == 7) {\n            ss2 << \"seven \";\n        } else\
    \ if(\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84wiycsb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp84wiycsb.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp84wiycsb.cpp:54:19: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if(\n     \
    \ |                  ~^\n      |                   )\n   55 | }\n      | ~   \
    \               \n/tmp/tmp84wiycsb.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmp84wiycsb.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmp84wiycsb.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp84wiycsb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp84wiycsb.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\")\
    \ nums.push_back(0);\n        else if(temp == \"one\") nums.push_back(1);\n  \
    \      else if(temp == \"two\") nums.push_back(2);\n        else if(temp == \"\
    three\") nums.push_back(3);\n        else if(temp == \"four\") nums.push_back(4);\n\
    \        else if(temp == \"five\") nums.push_back(5);\n        else if(temp ==\
    \ \"six\") nums.push_back(6);\n        else if(temp == \"seven\") nums.push_back(7);\n\
    \        else if(temp == \"eight\") nums.push_back(8);\n        else if(temp ==\
    \ \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for(int i = 0; i < nums.size(); i++) {\n       \
    \ if(nums[i] == 0) result += \"zero \";\n        else if(nums[i] == 1) result\
    \ += \"one \";\n        else if(nums[i] == 2) result += \"two \";\n        else\
    \ if(nums[i] == 3) result += \"three \";\n        else if(nums[i] == 4) result\
    \ += \"four \";\n        else if(nums[i] == 5) result += \"five \";\n        else\
    \ if(nums[i] == 6) result += \"six \";\n        else if(nums[i] == 7) result +=\
    \ \"seven \";\n        else if(nums[i] == 8) result += \"eight \";\n        else\
    \ if(nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpe8nvdwmy: /tmp/tmpe8nvdwmy.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph9lwuaf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpph9lwuaf.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            ss2\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            ss2 << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            ss2 << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            ss2 << \"three\";\n        } else if (nums[i]\
    \ == 4) {\n            ss2 << \"four\";\n        } else if (nums[i] == 5) {\n\
    \            ss2 << \"five\";\n        } else if (nums[i] == 6) {\n          \
    \  ss2 << \"six\";\n        } else if (nums[i] == 7) {\n            ss2 << \"\
    seven\";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xoq3ke2.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0xoq3ke2.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp0xoq3ke2.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp0xoq3ke2.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp0xoq3ke2.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp0xoq3ke2.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    )\n            nums.push_back(0);\n        else if (word == \"one\")\n       \
    \     nums.push_back(1);\n        else if (word == \"two\")\n            nums.push_back(2);\n\
    \        else if (word == \"three\")\n            nums.push_back(3);\n       \
    \ else if (word == \"four\")\n            nums.push_back(4);\n        else if\
    \ (word == \"five\")\n            nums.push_back(5);\n        else if (word ==\
    \ \"six\")\n            nums.push_back(6);\n        else if (word == \"seven\"\
    )\n            nums.push_back(7);\n        else if (word == \"eight\")\n     \
    \       nums.push_back(8);\n        else if (word == \"nine\")\n            nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0)\n      \
    \      result += \"zero \";\n        else if (nums[i] == 1)\n            result\
    \ += \"one \";\n        else if (nums[i] == 2)\n            result += \"two \"\
    ;\n        else if (nums[i] == 3)\n            result += \"three \";\n       \
    \ else if (nums[i] == 4)\n            result += \"four \";\n        else if (nums[i]\
    \ == 5)\n            result += \"five \";\n        else if (nums[i] == 6)\n  \
    \          result += \"six \";\n        else if (nums[i] == 7)\n            result\
    \ += \"seven \";\n        else if (nums[i] == 8)\n            result += \"eight\
    \ \";\n        else if (nums[i] == 9)\n            result += \"nine \";\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpdoq3_cak: /tmp/tmpdoq3_cak.cpp:63: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto num : nums) {\n        if (num == 0) result += \"zero \";\n     \
    \   else if (num == 1) result += \"one \";\n        else if (num == 2) result\
    \ += \"two \";\n        else if (num == 3) result += \"three \";\n        else\
    \ if (num == 4) result += \"four \";\n        else if (num == 5) result += \"\
    five \";\n        else if (num == 6) result += \"six \";\n        else if (num\
    \ == 7) result += \"seven \";\n        else if (num == 8) result += \"eight \"\
    ;\n        else if (num == 9) result += \"nine \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result << \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result << \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result << \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result << \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ << \"four\";\n        } else if (nums[i] == 5) {\n            result << \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result << \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result << \"seven\";\n        } else\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl4py4qnb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl4py4qnb.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpl4py4qnb.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpl4py4qnb.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpl4py4qnb.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpl4py4qnb.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\")\n           \
    \ nums.push_back(0);\n        else if (word == \"one\")\n            nums.push_back(1);\n\
    \        else if (word == \"two\")\n            nums.push_back(2);\n        else\
    \ if (word == \"three\")\n            nums.push_back(3);\n        else if (word\
    \ == \"four\")\n            nums.push_back(4);\n        else if (word == \"five\"\
    )\n            nums.push_back(5);\n        else if (word == \"six\")\n       \
    \     nums.push_back(6);\n        else if (word == \"seven\")\n            nums.push_back(7);\n\
    \        else if (word == \"eight\")\n            nums.push_back(8);\n       \
    \ else if (word == \"nine\")\n            nums.push_back(9);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0)\n            result += \"zero \";\n      \
    \  else if (nums[i] == 1)\n            result += \"one \";\n        else if (nums[i]\
    \ == 2)\n            result += \"two \";\n        else if (nums[i] == 3)\n   \
    \         result += \"three \";\n        else if (nums[i] == 4)\n            result\
    \ += \"four \";\n        else if (nums[i] == 5)\n            result += \"five\
    \ \";\n        else if (nums[i] == 6)\n            result += \"six \";\n     \
    \   else if (nums[i] == 7)\n            result += \"seven \";\n        else if\
    \ (nums[i] == 8)\n            result += \"eight \";\n        else if (nums[i]\
    \ == 9)\n            result += \"nine \";\n    }\n    return result;\n\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp5rvxwfsp: /tmp/tmp5rvxwfsp.cpp:64: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\")\n           \
    \ nums.push_back(0);\n        else if (word == \"one\")\n            nums.push_back(1);\n\
    \        else if (word == \"two\")\n            nums.push_back(2);\n        else\
    \ if (word == \"three\")\n            nums.push_back(3);\n        else if (word\
    \ == \"four\")\n            nums.push_back(4);\n        else if (word == \"five\"\
    )\n            nums.push_back(5);\n        else if (word == \"six\")\n       \
    \     nums.push_back(6);\n        else if (word == \"seven\")\n            nums.push_back(7);\n\
    \        else if (word == \"eight\")\n            nums.push_back(8);\n       \
    \ else if (word == \"nine\")\n            nums.push_back(9);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0)\n            result += \"zero \";\n      \
    \  else if (nums[i] == 1)\n            result += \"one \";\n        else if (nums[i]\
    \ == 2)\n            result += \"two \";\n        else if (nums[i] == 3)\n   \
    \         result += \"three \";\n        else if (nums[i] == 4)\n            result\
    \ += \"four \";\n        else if (nums[i] == 5)\n            result += \"five\
    \ \";\n        else if (nums[i] == 6)\n            result += \"six \";\n     \
    \   else if (nums[i] == 7)\n            result += \"seven \";\n        else if\
    \ (nums[i] == 8)\n            result += \"eight \";\n        else if (nums[i]\
    \ == 9)\n            result += \"nine \";\n    }\n    return result;\n\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp5rvxwfsp: /tmp/tmp5rvxwfsp.cpp:64: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ result;\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) result\
    \ += \" \";\n        if (v[i] == 0) result += \"zero\";\n        else if (v[i]\
    \ == 1) result += \"one\";\n        else if (v[i] == 2) result += \"two\";\n \
    \       else if (v[i] == 3) result += \"three\";\n        else if (v[i] == 4)\
    \ result += \"four\";\n        else if (v[i] == 5) result += \"five\";\n     \
    \   else if (v[i] == 6) result += \"six\";\n        else if (v[i] == 7) result\
    \ += \"seven\";\n        else if (v[i] == 8) result += \"eight\";\n        else\
    \ if (v[i] == 9) result += \"nine\";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph9lwuaf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpph9lwuaf.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream res;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res << \" \"\
    ;\n        if (nums[i] == 0) res << \"zero\";\n        else if (nums[i] == 1)\
    \ res << \"one\";\n        else if (nums[i] == 2) res << \"two\";\n        else\
    \ if (nums[i] == 3) res << \"three\";\n        else if (nums[i] == 4) res << \"\
    four\";\n        else if (nums[i] == 5) res << \"five\";\n        else if (nums[i]\
    \ == 6) res << \"six\";\n        else if (nums[i] == 7) res << \"seven\";\n  \
    \      else if (nums[i] == 8) res << \"eight\";\n        else if (nums[i] == 9)\
    \ res << \"nine\";\n    }\n    return res.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> v;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        v.push_back(token);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        result += v[i];\n        if(i != v.size()\
    \ - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp8828h0ac: /tmp/tmp8828h0ac.cpp:29: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ res;\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) res += \"\
    \ \";\n        if (v[i] == 0) res += \"zero\";\n        else if (v[i] == 1) res\
    \ += \"one\";\n        else if (v[i] == 2) res += \"two\";\n        else if (v[i]\
    \ == 3) res += \"three\";\n        else if (v[i] == 4) res += \"four\";\n    \
    \    else if (v[i] == 5) res += \"five\";\n        else if (v[i] == 6) res +=\
    \ \"six\";\n        else if (v[i] == 7) res += \"seven\";\n        else if (v[i]\
    \ == 8) res += \"eight\";\n        else if (v[i] == 9) res += \"nine\";\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string res\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] ==\
    \ 0) {\n            res += \"zero \";\n        } else if (nums[i] == 1) {\n  \
    \          res += \"one \";\n        } else if (nums[i] == 2) {\n            res\
    \ += \"two \";\n        } else if (nums[i] == 3) {\n            res += \"three\
    \ \";\n        } else if (nums[i] == 4) {\n            res += \"four \";\n   \
    \     } else if (nums[i] == 5) {\n            res += \"five \";\n        } else\
    \ if (nums[i] == 6) {\n            res += \"six \";\n        } else if (nums[i]\
    \ == 7) {\n            res += \"seven \";\n        } else if (\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4f14krf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa4f14krf.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmpa4f14krf.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpa4f14krf.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa4f14krf.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<int>\
    \ nums;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n           \
    \ nums.push_back(0);\n        } else if(temp == \"one\") {\n            nums.push_back(1);\n\
    \        } else if(temp == \"two\") {\n            nums.push_back(2);\n      \
    \  } else if(temp == \"three\") {\n            nums.push_back(3);\n        } else\
    \ if(temp == \"four\") {\n            nums.push_back(4);\n        } else if(temp\
    \ == \"five\") {\n            nums.push_back(5);\n        } else if(temp == \"\
    six\") {\n            nums.push_back(6);\n        } else if(temp == \"seven\"\
    ) {\n            nums.push_back(7);\n        } else if(temp == \"eight\") {\n\
    \            nums.push_back(8);\n        } else if(temp == \"nine\") {\n     \
    \       nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < nums.size(); i++) {\n   \
    \     if(nums[i] == 0) {\n            ans += \"zero \";\n        } else if(nums[i]\
    \ == 1) {\n            ans += \"one \";\n        } else if(nums[i] == 2) {\n \
    \           ans += \"two \";\n        } else if(nums[i] == 3) {\n            ans\
    \ += \"three \";\n        } else if(nums[i] == 4) {\n            ans += \"four\
    \ \";\n        } else if(nums[i] == 5) {\n            ans += \"five \";\n    \
    \    } else if(nums[i] == 6) {\n            ans += \"six \";\n        } else if(nums[i]\
    \ == 7) {\n            ans += \"seven \";\n        } else if(nums[i] == 8)\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb3lifk8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvb3lifk8.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpvb3lifk8.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpvb3lifk8.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpvb3lifk8.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpvb3lifk8.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        ans += nums[i];\n        if (i\
    \ != nums.size() - 1) {\n            ans += \" \";\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwl4zedq1: /tmp/tmpwl4zedq1.cpp:29: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ksceh0b.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7ksceh0b.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ksceh0b.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ksceh0b.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream out;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) out << \" \"\
    ;\n        if (nums[i] == 0) out << \"zero\";\n        else if (nums[i] == 1)\
    \ out << \"one\";\n        else if (nums[i] == 2) out << \"two\";\n        else\
    \ if (nums[i] == 3) out << \"three\";\n        else if (nums[i] == 4) out << \"\
    four\";\n        else if (nums[i] == 5) out << \"five\";\n        else if (nums[i]\
    \ == 6) out << \"six\";\n        else if (nums[i] == 7) out << \"seven\";\n  \
    \      else if (nums[i] == 8) out << \"eight\";\n        else if (nums[i] == 9)\
    \ out << \"nine\";\n    }\n    return out.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::stringstream ss2;\n    for (int i = 0; i < v.size(); i++) {\n        if\
    \ (v[i] == 0) {\n            ss2 << \"zero\";\n        } else if (v[i] == 1) {\n\
    \            ss2 << \"one\";\n        } else if (v[i] == 2) {\n            ss2\
    \ << \"two\";\n        } else if (v[i] == 3) {\n            ss2 << \"three\";\n\
    \        } else if (v[i] == 4) {\n            ss2 << \"four\";\n        } else\
    \ if (v[i] == 5) {\n            ss2 << \"five\";\n        } else if (v[i] == 6)\
    \ {\n            ss2 << \"six\";\n        } else if (v[i] == 7) {\n          \
    \  ss2 << \"seven\";\n        } else if (v[i] == 8) {\n            ss2 << \"eight\"\
    ;\n        } else if (v[i] == 9) {\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6qql2hz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc6qql2hz.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmpc6qql2hz.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpc6qql2hz.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpc6qql2hz.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpc6qql2hz.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc6qql2hz.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> nums;\n    while (std::getline(ss, token, ' ')) {\n       \
    \ if (token == \"zero\") {\n            nums.push_back(0);\n        } else if\
    \ (token == \"one\") {\n            nums.push_back(1);\n        } else if (token\
    \ == \"two\") {\n            nums.push_back(2);\n        } else if (token == \"\
    three\") {\n            nums.push_back(3);\n        } else if (token == \"four\"\
    ) {\n            nums.push_back(4);\n        } else if (token == \"five\") {\n\
    \            nums.push_back(5);\n        } else if (token == \"six\") {\n    \
    \        nums.push_back(6);\n        } else if (token == \"seven\") {\n      \
    \      nums.push_back(7);\n        } else if (token == \"eight\") {\n        \
    \    nums.push_back(8);\n        } else if (token == \"nine\") {\n           \
    \ nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (nums[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if (nums[i] == 1) {\n            result += \"one \";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two \";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three \";\n        } else if (nums[i] == 4) {\n     \
    \       result += \"four \";\n        } else if (nums[i] == 5) {\n           \
    \ result += \"five \";\n        } else if (nums[i] == 6) {\n            result\
    \ += \"six \";\n        } else if (nums[i] == 7) {\n            result += \"seven\
    \ \";\n        } else if (\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvnfrkbk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpyvnfrkbk.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpyvnfrkbk.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmpyvnfrkbk.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpyvnfrkbk.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpyvnfrkbk.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpyvnfrkbk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpyvnfrkbk.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        nums.push_back(item);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpzijs58j8: /tmp/tmpzijs58j8.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ksceh0b.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7ksceh0b.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ksceh0b.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ksceh0b.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7ksceh0b.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  int i;\n    while (ss >> i)\n        v.push_back(i);\n    std::sort(v.begin(),\
    \ v.end());\n    std::stringstream sorted;\n    for (auto n : v)\n        sorted\
    \ << n << \" \";\n    return sorted.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp4nvregrx: /tmp/tmp4nvregrx.cpp:23: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string number;\n  \
    \  std::vector<int> nums;\n    while (ss >> number) {\n        if (number == \"\
    zero\") {\n            nums.push_back(0);\n        } else if (number == \"one\"\
    ) {\n            nums.push_back(1);\n        } else if (number == \"two\") {\n\
    \            nums.push_back(2);\n        } else if (number == \"three\") {\n \
    \           nums.push_back(3);\n        } else if (number == \"four\") {\n   \
    \         nums.push_back(4);\n        } else if (number == \"five\") {\n     \
    \       nums.push_back(5);\n        } else if (number == \"six\") {\n        \
    \    nums.push_back(6);\n        } else if (number == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (number == \"eight\") {\n          \
    \  nums.push_back(8);\n        } else if (number == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n  \
    \          result += \"zero \";\n        } else if (nums[i] == 1) {\n        \
    \    result += \"one \";\n        } else if (nums[i] == 2) {\n            result\
    \ += \"two \";\n        } else if (nums[i] == 3) {\n            result += \"three\
    \ \";\n        } else if (nums[i] == 4) {\n            result += \"four \";\n\
    \        } else if (nums[i] == 5) {\n            result += \"five \";\n      \
    \  } else if (nums[i] == 6) {\n            result += \"six \";\n        } else\
    \ if (nums[i] == 7) {\n            result += \"seven \";\n        } else if (nums[i]\
    \ == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpv0n2gj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvpv0n2gj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpvpv0n2gj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpvpv0n2gj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpvpv0n2gj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpvpv0n2gj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvpv0n2gj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::stringstream ss2;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) ss2 << \"zero \";\n     \
    \   else if(v[i] == 1) ss2 << \"one \";\n        else if(v[i] == 2) ss2 << \"\
    two \";\n        else if(v[i] == 3) ss2 << \"three \";\n        else if(v[i] ==\
    \ 4) ss2 << \"four \";\n        else if(v[i] == 5) ss2 << \"five \";\n       \
    \ else if(v[i] == 6) ss2 << \"six \";\n        else if(v[i] == 7) ss2 << \"seven\
    \ \";\n        else if(v[i] == 8) ss2 << \"eight \";\n        else if(v[i] ==\
    \ 9) ss2 << \"nine \";\n    }\n    return ss2.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpzn3w8321: /tmp/tmpzn3w8321.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            ss2 << \" \";\n        }\n      \
    \  if (nums[i] == 0) {\n            ss2 << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            ss2 << \"one\";\n        } else if (nums[i] == 2) {\n \
    \           ss2 << \"two\";\n        } else if (nums[i] == 3) {\n            ss2\
    \ << \"three\";\n        } else if (nums[i] == 4) {\n            ss2 << \"four\"\
    ;\n        } else if (nums[i] == 5) {\n            ss2 << \"five\";\n        }\
    \ else if (nums[i] == 6) {\n            ss2 << \"six\";\n        } else if (nums[i]\
    \ == 7) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn75ovd1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmprn75ovd1.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmprn75ovd1.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmprn75ovd1.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmprn75ovd1.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (temp == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (temp == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ept_rre.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7ept_rre.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ept_rre.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ept_rre.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream out;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) out << \" \"\
    ;\n        if (nums[i] == 0) out << \"zero\";\n        else if (nums[i] == 1)\
    \ out << \"one\";\n        else if (nums[i] == 2) out << \"two\";\n        else\
    \ if (nums[i] == 3) out << \"three\";\n        else if (nums[i] == 4) out << \"\
    four\";\n        else if (nums[i] == 5) out << \"five\";\n        else if (nums[i]\
    \ == 6) out << \"six\";\n        else if (nums[i] == 7) out << \"seven\";\n  \
    \      else if (nums[i] == 8) out << \"eight\";\n        else if (nums[i] == 9)\
    \ out << \"nine\";\n    }\n    return out.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string res = \"\";\n    for(int i = 0; i < v.size(); i++) {\n      \
    \  if(v[i] == 0) {\n            res += \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            res += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            res += \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           res += \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        res += \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    res += \"five \";\n        }\n        else if(v[i] == 6) {\n            res\
    \ += \"six \";\n        }\n        else if(v[i] == 7) {\n            res += \"\
    seven \";\n        }\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvw1fcdyz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpvw1fcdyz.cpp:73:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpvw1fcdyz.cpp:80:1:\
    \ error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpvw1fcdyz.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpvw1fcdyz.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n        \
    \    result += \" \";\n        }\n        if (nums[i] == 0) {\n            result\
    \ += \"zero\";\n        } else if (nums[i] == 1) {\n            result += \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            result += \"two\";\n      \
    \  } else if (nums[i] == 3) {\n            result += \"three\";\n        } else\
    \ if (nums[i] == 4) {\n            result += \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result += \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result += \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result +=\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j9smcdy.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp3j9smcdy.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmp3j9smcdy.cpp:58:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   58 | int main() {\n     \
    \ |            ^\n/tmp/tmp3j9smcdy.cpp:65:1: error: expected \u2018}\u2019 at\
    \ end of input\n   65 | }\n      | ^\n/tmp/tmp3j9smcdy.cpp:37:43: note: to match\
    \ this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmp3j9smcdy.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp3j9smcdy.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp3j9smcdy.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::stringstream result;\n    for (int i = 0; i < v.size(); i++) {\n     \
    \   if (i != 0) {\n            result << \" \";\n        }\n        if (v[i] ==\
    \ 0) {\n            result << \"zero\";\n        } else if (v[i] == 1) {\n   \
    \         result << \"one\";\n        } else if (v[i] == 2) {\n            result\
    \ << \"two\";\n        } else if (v[i] == 3) {\n            result << \"three\"\
    ;\n        } else if (v[i] == 4) {\n            result << \"four\";\n        }\
    \ else if (v[i] == 5) {\n            result << \"five\";\n        } else if (v[i]\
    \ == 6) {\n            result << \"six\";\n        } else if (v[i] == 7) {\n \
    \           result << \"seven\";\n        } else if (v[i] == 8) {\n          \
    \  result << \"eight\";\n        } else if\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2iurd9q.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpq2iurd9q.cpp:60:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n      | (\n/tmp/tmpq2iurd9q.cpp:61:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   61 |\
    \ int main() {\n      |            ^\n/tmp/tmpq2iurd9q.cpp:68:1: error: expected\
    \ \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpq2iurd9q.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpq2iurd9q.cpp:68:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   68 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpxp18gps7: /tmp/tmpxp18gps7.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ result;\n    for (auto i : v) {\n        if (i == 0) result += \"zero \";\n\
    \        else if (i == 1) result += \"one \";\n        else if (i == 2) result\
    \ += \"two \";\n        else if (i == 3) result += \"three \";\n        else if\
    \ (i == 4) result += \"four \";\n        else if (i == 5) result += \"five \"\
    ;\n        else if (i == 6) result += \"six \";\n        else if (i == 7) result\
    \ += \"seven \";\n        else if (i == 8) result += \"eight \";\n        else\
    \ if (i == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    )\n            nums.push_back(0);\n        else if (word == \"one\")\n       \
    \     nums.push_back(1);\n        else if (word == \"two\")\n            nums.push_back(2);\n\
    \        else if (word == \"three\")\n            nums.push_back(3);\n       \
    \ else if (word == \"four\")\n            nums.push_back(4);\n        else if\
    \ (word == \"five\")\n            nums.push_back(5);\n        else if (word ==\
    \ \"six\")\n            nums.push_back(6);\n        else if (word == \"seven\"\
    )\n            nums.push_back(7);\n        else if (word == \"eight\")\n     \
    \       nums.push_back(8);\n        else if (word == \"nine\")\n            nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0)\n  \
    \          result += \"zero \";\n        else if (nums[i] == 1)\n            result\
    \ += \"one \";\n        else if (nums[i] == 2)\n            result += \"two \"\
    ;\n        else if (nums[i] == 3)\n            result += \"three \";\n       \
    \ else if (nums[i] == 4)\n            result += \"four \";\n        else if (nums[i]\
    \ == 5)\n            result += \"five \";\n        else if (nums[i] == 6)\n  \
    \          result += \"six \";\n        else if (nums[i] == 7)\n            result\
    \ += \"seven \";\n        else if (nums[i] == 8)\n            result += \"eight\
    \ \";\n        else if (nums[i] == 9)\n            result += \"nine \";\n    }\n\
    \    return result;\n\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpk8el093y: /tmp/tmpk8el093y.cpp:64: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::stringstream result;\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (i != 0) result << \" \";\n\t\tif (nums[i] == 0) result << \"\
    zero\";\n\t\telse if (nums[i] == 1) result << \"one\";\n\t\telse if (nums[i] ==\
    \ 2) result << \"two\";\n\t\telse if (nums[i] == 3) result << \"three\";\n\t\t\
    else if (nums[i] == 4) result << \"four\";\n\t\telse if (nums[i] == 5) result\
    \ << \"five\";\n\t\telse if (nums[i] == 6) result << \"six\";\n\t\telse if (nums[i]\
    \ == 7) result << \"seven\";\n\t\telse if (nums[i] == 8) result << \"eight\";\n\
    \t\telse if (nums[i] == 9) result << \"nine\";\n\t}\n\treturn result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    std::vector<int> nums;\n    while (ss >> word) {\n\
    \        if (word == \"zero\") {\n            nums.push_back(0);\n        } else\
    \ if (word == \"one\") {\n            nums.push_back(1);\n        } else if (word\
    \ == \"two\") {\n            nums.push_back(2);\n        } else if (word == \"\
    three\") {\n            nums.push_back(3);\n        } else if (word == \"four\"\
    ) {\n            nums.push_back(4);\n        } else if (word == \"five\") {\n\
    \            nums.push_back(5);\n        } else if (word == \"six\") {\n     \
    \       nums.push_back(6);\n        } else if (word == \"seven\") {\n        \
    \    nums.push_back(7);\n        } else if (word == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (word == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiktp48qb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpiktp48qb.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpiktp48qb.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpiktp48qb.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpiktp48qb.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpiktp48qb.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (i != 0) result += \" \";\n\t\tif (nums[i] == 0) result += \"zero\"\
    ;\n\t\telse if (nums[i] == 1) result += \"one\";\n\t\telse if (nums[i] == 2) result\
    \ += \"two\";\n\t\telse if (nums[i] == 3) result += \"three\";\n\t\telse if (nums[i]\
    \ == 4) result += \"four\";\n\t\telse if (nums[i] == 5) result += \"five\";\n\t\
    \telse if (nums[i] == 6) result += \"six\";\n\t\telse if (nums[i] == 7) result\
    \ += \"seven\";\n\t\telse if (nums[i] == 8) result += \"eight\";\n\t\telse if\
    \ (nums[i] == 9) result += \"nine\";\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n            result\
    \ << \" \";\n        }\n        if (nums[i] == 0) {\n            result << \"\
    zero\";\n        } else if (nums[i] == 1) {\n            result << \"one\";\n\
    \        } else if (nums[i] == 2) {\n            result << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            result << \"three\";\n        } else if\
    \ (nums[i] == 4) {\n            result << \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result << \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result << \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result << \"seven\";\n        } else\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8whox685.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8whox685.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmp8whox685.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmp8whox685.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmp8whox685.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp8whox685.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ans += nums[i] + \" \";\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp96ctbs3a: /tmp/tmp96ctbs3a.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream res;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res << \" \"\
    ;\n        if (nums[i] == 0) res << \"zero\";\n        else if (nums[i] == 1)\
    \ res << \"one\";\n        else if (nums[i] == 2) res << \"two\";\n        else\
    \ if (nums[i] == 3) res << \"three\";\n        else if (nums[i] == 4) res << \"\
    four\";\n        else if (nums[i] == 5) res << \"five\";\n        else if (nums[i]\
    \ == 6) res << \"six\";\n        else if (nums[i] == 7) res << \"seven\";\n  \
    \      else if (nums[i] == 8) res << \"eight\";\n        else if (nums[i] == 9)\
    \ res << \"nine\";\n    }\n    return res.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ynvdgt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx0ynvdgt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpx0ynvdgt.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpx0ynvdgt.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpx0ynvdgt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx0ynvdgt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpxp18gps7: /tmp/tmpxp18gps7.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string s;\n    while(ss >> s) {\n        if(s == \"zero\") v.push_back(0);\n\
    \        else if(s == \"one\") v.push_back(1);\n        else if(s == \"two\")\
    \ v.push_back(2);\n        else if(s == \"three\") v.push_back(3);\n        else\
    \ if(s == \"four\") v.push_back(4);\n        else if(s == \"five\") v.push_back(5);\n\
    \        else if(s == \"six\") v.push_back(6);\n        else if(s == \"seven\"\
    ) v.push_back(7);\n        else if(s == \"eight\") v.push_back(8);\n        else\
    \ if(s == \"nine\") v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string ans;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) ans += \"zero \";\n        else if(v[i] == 1) ans += \"one \";\n     \
    \   else if(v[i] == 2) ans += \"two \";\n        else if(v[i] == 3) ans += \"\
    three \";\n        else if(v[i] == 4) ans += \"four \";\n        else if(v[i]\
    \ == 5) ans += \"five \";\n        else if(v[i] == 6) ans += \"six \";\n     \
    \   else if(v[i] == 7) ans += \"seven \";\n        else if(v[i] == 8) ans += \"\
    eight \";\n        else if(v[i] == 9) ans += \"nine \";\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmplfo6parf: /tmp/tmplfo6parf.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream res;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) res << \" \"\
    ;\n        if (nums[i] == 0) res << \"zero\";\n        else if (nums[i] == 1)\
    \ res << \"one\";\n        else if (nums[i] == 2) res << \"two\";\n        else\
    \ if (nums[i] == 3) res << \"three\";\n        else if (nums[i] == 4) res << \"\
    four\";\n        else if (nums[i] == 5) res << \"five\";\n        else if (nums[i]\
    \ == 6) res << \"six\";\n        else if (nums[i] == 7) res << \"seven\";\n  \
    \      else if (nums[i] == 8) res << \"eight\";\n        else if (nums[i] == 9)\
    \ res << \"nine\";\n    }\n    return res.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ynvdgt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx0ynvdgt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpx0ynvdgt.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpx0ynvdgt.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpx0ynvdgt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx0ynvdgt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result += \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result += \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result += \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result += \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result += \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ += \"four\";\n        } else if (nums[i] == 5) {\n            result += \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result += \"seven\";\n        } else\
    \ if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_6gaar_.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb_6gaar_.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpb_6gaar_.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpb_6gaar_.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpb_6gaar_.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpb_6gaar_.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ res;\n    for (auto i : v) {\n        if (i == 0) res += \"zero \";\n      \
    \  else if (i == 1) res += \"one \";\n        else if (i == 2) res += \"two \"\
    ;\n        else if (i == 3) res += \"three \";\n        else if (i == 4) res +=\
    \ \"four \";\n        else if (i == 5) res += \"five \";\n        else if (i ==\
    \ 6) res += \"six \";\n        else if (i == 7) res += \"seven \";\n        else\
    \ if (i == 8) res += \"eight \";\n        else if (i == 9) res += \"nine \";\n\
    \    }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ynvdgt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx0ynvdgt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpx0ynvdgt.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpx0ynvdgt.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpx0ynvdgt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx0ynvdgt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::stringstream result;\n\
    \    std::vector<int> v;\n    std::string temp;\n    while(ss >> temp) {\n   \
    \     if(temp == \"zero\")\n            v.push_back(0);\n        else if(temp\
    \ == \"one\")\n            v.push_back(1);\n        else if(temp == \"two\")\n\
    \            v.push_back(2);\n        else if(temp == \"three\")\n           \
    \ v.push_back(3);\n        else if(temp == \"four\")\n            v.push_back(4);\n\
    \        else if(temp == \"five\")\n            v.push_back(5);\n        else\
    \ if(temp == \"six\")\n            v.push_back(6);\n        else if(temp == \"\
    seven\")\n            v.push_back(7);\n        else if(temp == \"eight\")\n  \
    \          v.push_back(8);\n        else if(temp == \"nine\")\n            v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    for(int i = 0; i < v.size(); i++)\
    \ {\n        if(v[i] == 0)\n            result << \"zero\";\n        else if(v[i]\
    \ == 1)\n            result << \"one\";\n        else if(v[i] == 2)\n        \
    \    result << \"two\";\n        else if(v[i] == 3)\n            result << \"\
    three\";\n        else if(v[i] == 4)\n            result << \"four\";\n      \
    \  else if(v[i] == 5)\n            result << \"five\";\n        else if(v[i] ==\
    \ 6)\n            result << \"six\";\n        else if(v[i] == 7)\n           \
    \ result << \"seven\";\n        else if(v[i] == 8)\n            result << \"eight\"\
    ;\n        else if(v[i] == 9)\n            result << \"nine\";\n        if(i !=\
    \ v.size() - 1)\n            result << \" \";\n    }\n    return result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result\
    \ += \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) res +=\
    \ \"zero \";\n        else if (nums[i] == 1) res += \"one \";\n        else if\
    \ (nums[i] == 2) res += \"two \";\n        else if (nums[i] == 3) res += \"three\
    \ \";\n        else if (nums[i] == 4) res += \"four \";\n        else if (nums[i]\
    \ == 5) res += \"five \";\n        else if (nums[i] == 6) res += \"six \";\n \
    \       else if (nums[i] == 7) res += \"seven \";\n        else if (nums[i] ==\
    \ 8) res += \"eight \";\n        else if (nums[i] == 9) res += \"nine \";\n  \
    \  }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n \
    \   std::vector<int> nums_count(10, 0);\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        for (int i = 0; i <\
    \ 10; i++) {\n            if (word == nums[i]) {\n                nums_count[i]++;\n\
    \            }\n        }\n    }\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < 10; i++) {\n        for (int j = 0; j < nums_count[i]; j++) {\n \
    \           result += nums[i] + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ num : nums) {\n        switch (num) {\n            case 0:\n               \
    \ result += \"zero \";\n                break;\n            case 1:\n        \
    \        result += \"one \";\n                break;\n            case 2:\n  \
    \              result += \"two \";\n                break;\n            case 3:\n\
    \                result += \"three \";\n                break;\n            case\
    \ 4:\n                result += \"four \";\n                break;\n         \
    \   case 5:\n                result += \"five \";\n                break;\n  \
    \          case 6:\n                result += \"six \";\n                break;\n\
    \            case 7:\n                result += \"seven \";\n                break;\n\
    \            case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpti_lhiwx: /tmp/tmpti_lhiwx.cpp:76: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (auto i : v) {\n        if (i == 0) {\n      \
    \      result += \"zero \";\n        } else if (i == 1) {\n            result\
    \ += \"one \";\n        } else if (i == 2) {\n            result += \"two \";\n\
    \        } else if (i == 3) {\n            result += \"three \";\n        } else\
    \ if (i == 4) {\n            result += \"four \";\n        } else if (i == 5)\
    \ {\n            result += \"five \";\n        } else if (i == 6) {\n        \
    \    result += \"six \";\n        } else if (i == 7) {\n            result +=\
    \ \"seven \";\n        } else if (i == 8) {\n            result += \"eight \"\
    ;\n        } else if (i == 9) {\n            result += \"nine \";\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmphd8hocc2: /tmp/tmphd8hocc2.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result\
    \ += \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums = {\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n \
    \   std::vector<int> nums_int;\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            if (word == nums[i]) {\n                nums_int.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(nums_int.begin(), nums_int.end());\n\
    \    std::string result = \"\";\n    for (int i = 0; i < nums_int.size(); i++)\
    \ {\n        result += nums[nums_int[i]] + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpyzana_le: /tmp/tmpyzana_le.cpp:30: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string ret;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        if (i != 0) {\n            ret += \" \";\n        }\n        if (nums[i]\
    \ == 0) {\n            ret += \"zero\";\n        } else if (nums[i] == 1) {\n\
    \            ret += \"one\";\n        } else if (nums[i] == 2) {\n           \
    \ ret += \"two\";\n        } else if (nums[i] == 3) {\n            ret += \"three\"\
    ;\n        } else if (nums[i] == 4) {\n            ret += \"four\";\n        }\
    \ else if (nums[i] == 5) {\n            ret += \"five\";\n        } else if (nums[i]\
    \ == 6) {\n            ret += \"six\";\n        } else if (nums[i] == 7) {\n \
    \           ret += \"seven\";\n        } else if\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrjllmvh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmptrjllmvh.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmptrjllmvh.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmptrjllmvh.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmptrjllmvh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmptrjllmvh.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream ss2;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i != 0) ss2 << \" \";\n        if (nums[i] == 0) ss2 << \"zero\";\n\
    \        else if (nums[i] == 1) ss2 << \"one\";\n        else if (nums[i] == 2)\
    \ ss2 << \"two\";\n        else if (nums[i] == 3) ss2 << \"three\";\n        else\
    \ if (nums[i] == 4) ss2 << \"four\";\n        else if (nums[i] == 5) ss2 << \"\
    five\";\n        else if (nums[i] == 6) ss2 << \"six\";\n        else if (nums[i]\
    \ == 7) ss2 << \"seven\";\n        else if (nums[i] == 8) ss2 << \"eight\";\n\
    \        else if (nums[i] == 9) ss2 << \"nine\";\n    }\n    return ss2.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ token;\n  while (std::getline(ss, token, ' ')) {\n    if (token == \"zero\"\
    ) {\n      nums.push_back(0);\n    } else if (token == \"one\") {\n      nums.push_back(1);\n\
    \    } else if (token == \"two\") {\n      nums.push_back(2);\n    } else if (token\
    \ == \"three\") {\n      nums.push_back(3);\n    } else if (token == \"four\"\
    ) {\n      nums.push_back(4);\n    } else if (token == \"five\") {\n      nums.push_back(5);\n\
    \    } else if (token == \"six\") {\n      nums.push_back(6);\n    } else if (token\
    \ == \"seven\") {\n      nums.push_back(7);\n    } else if (token == \"eight\"\
    ) {\n      nums.push_back(8);\n    } else if (token == \"nine\") {\n      nums.push_back(9);\n\
    \    }\n  }\n  std::sort(nums.begin(), nums.end());\n  std::string result = \"\
    \";\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] == 0) {\n    \
    \  result += \"zero \";\n    } else if (nums[i] == 1) {\n      result += \"one\
    \ \";\n    } else if (nums[i] == 2) {\n      result += \"two \";\n    } else if\
    \ (nums[i] == 3) {\n      result += \"three \";\n    } else if (nums[i] == 4)\
    \ {\n      result += \"four \";\n    } else if (nums[i] == 5) {\n      result\
    \ += \"five \";\n    } else if (nums[i] == 6) {\n      result += \"six \";\n \
    \   } else if (nums[i] == 7) {\n      result += \"seven \";\n    } else if (\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s_vh3mf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2s_vh3mf.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp2s_vh3mf.cpp:54:16: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |     } else if (\n      | \
    \              ~^\n      |                )\n   55 | }\n      | ~            \
    \   \n/tmp/tmp2s_vh3mf.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp2s_vh3mf.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp2s_vh3mf.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp2s_vh3mf.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp2s_vh3mf.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse\
    \ if (nums[i] == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 2) {\n\t\t\tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\
    \tresult += \"three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult +=\
    \ \"four\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3fflgr59.cpp:60:14: warning: missing terminating \" character\n\
    \   60 |    result += \"four\n      |              ^\n/tmp/tmp3fflgr59.cpp:60:14:\
    \ error: missing terminating \" character\n   60 |    result += \"four\n     \
    \ |              ^~~~~\n/tmp/tmp3fflgr59.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp3fflgr59.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp3fflgr59.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmp3fflgr59.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmp3fflgr59.cpp:46:40: note: to match\
    \ this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmp3fflgr59.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp3fflgr59.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp3fflgr59.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    )\n            nums.push_back(0);\n        else if (temp == \"one\")\n       \
    \     nums.push_back(1);\n        else if (temp == \"two\")\n            nums.push_back(2);\n\
    \        else if (temp == \"three\")\n            nums.push_back(3);\n       \
    \ else if (temp == \"four\")\n            nums.push_back(4);\n        else if\
    \ (temp == \"five\")\n            nums.push_back(5);\n        else if (temp ==\
    \ \"six\")\n            nums.push_back(6);\n        else if (temp == \"seven\"\
    )\n            nums.push_back(7);\n        else if (temp == \"eight\")\n     \
    \       nums.push_back(8);\n        else if (temp == \"nine\")\n            nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0)\n      \
    \      result += \"zero \";\n        else if (nums[i] == 1)\n            result\
    \ += \"one \";\n        else if (nums[i] == 2)\n            result += \"two \"\
    ;\n        else if (nums[i] == 3)\n            result += \"three \";\n       \
    \ else if (nums[i] == 4)\n            result += \"four \";\n        else if (nums[i]\
    \ == 5)\n            result += \"five \";\n        else if (nums[i] == 6)\n  \
    \          result += \"six \";\n        else if (nums[i] == 7)\n            result\
    \ += \"seven \";\n        else if (nums[i] == 8)\n            result += \"eight\
    \ \";\n        else if (nums[i] == 9)\n            result += \"nine \";\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpnnrna8fm: /tmp/tmpnnrna8fm.cpp:63: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp7ubanyvl: /tmp/tmp7ubanyvl.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::stringstream result;\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (i != 0) result << \" \";\n\t\tif (nums[i] == 0) result << \"\
    zero\";\n\t\telse if (nums[i] == 1) result << \"one\";\n\t\telse if (nums[i] ==\
    \ 2) result << \"two\";\n\t\telse if (nums[i] == 3) result << \"three\";\n\t\t\
    else if (nums[i] == 4) result << \"four\";\n\t\telse if (nums[i] == 5) result\
    \ << \"five\";\n\t\telse if (nums[i] == 6) result << \"six\";\n\t\telse if (nums[i]\
    \ == 7) result << \"seven\";\n\t\telse if (nums[i] == 8) result << \"eight\";\n\
    \t\telse if (nums[i] == 9) result << \"nine\";\n\t}\n\treturn result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<std::string> nums;\n\tstd::stringstream ss(numbers);\n\
    \tstd::string temp;\n\twhile (ss >> temp) {\n\t\tnums.push_back(temp);\n\t}\n\t\
    std::sort(nums.begin(), nums.end());\n\tstd::string result;\n\tfor (int i = 0;\
    \ i < nums.size(); i++) {\n\t\tresult += nums[i] + \" \";\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp0tyr5vgh: /tmp/tmp0tyr5vgh.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        ans += nums[i];\n        if (i\
    \ != nums.size() - 1) {\n            ans += \" \";\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwl4zedq1: /tmp/tmpwl4zedq1.cpp:29: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            ss2\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            ss2 << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            ss2 << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            ss2 << \"three\";\n        } else if (nums[i]\
    \ == 4) {\n            ss2 << \"four\";\n        } else if (nums[i] == 5) {\n\
    \            ss2 << \"five\";\n        } else if (nums[i] == 6) {\n          \
    \  ss2 << \"six\";\n        } else if (nums[i] == 7) {\n            ss2 << \"\
    seven\";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xoq3ke2.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0xoq3ke2.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp0xoq3ke2.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp0xoq3ke2.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp0xoq3ke2.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp0xoq3ke2.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\n\
    \            v.push_back(0);\n        else if (word == \"one\")\n            v.push_back(1);\n\
    \        else if (word == \"two\")\n            v.push_back(2);\n        else\
    \ if (word == \"three\")\n            v.push_back(3);\n        else if (word ==\
    \ \"four\")\n            v.push_back(4);\n        else if (word == \"five\")\n\
    \            v.push_back(5);\n        else if (word == \"six\")\n            v.push_back(6);\n\
    \        else if (word == \"seven\")\n            v.push_back(7);\n        else\
    \ if (word == \"eight\")\n            v.push_back(8);\n        else if (word ==\
    \ \"nine\")\n            v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if\
    \ (v[i] == 0)\n            result += \"zero \";\n        else if (v[i] == 1)\n\
    \            result += \"one \";\n        else if (v[i] == 2)\n            result\
    \ += \"two \";\n        else if (v[i] == 3)\n            result += \"three \"\
    ;\n        else if (v[i] == 4)\n            result += \"four \";\n        else\
    \ if (v[i] == 5)\n            result += \"five \";\n        else if (v[i] == 6)\n\
    \            result += \"six \";\n        else if (v[i] == 7)\n            result\
    \ += \"seven \";\n        else if (v[i] == 8)\n            result += \"eight \"\
    ;\n        else if (v[i] == 9)\n            result += \"nine \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpf2wl3gb1: /tmp/tmpf2wl3gb1.cpp:63: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph9lwuaf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpph9lwuaf.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpph9lwuaf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpph9lwuaf.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ynvdgt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx0ynvdgt.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpx0ynvdgt.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpx0ynvdgt.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpx0ynvdgt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpx0ynvdgt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string res\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] ==\
    \ 0) {\n            res += \"zero \";\n        } else if (nums[i] == 1) {\n  \
    \          res += \"one \";\n        } else if (nums[i] == 2) {\n            res\
    \ += \"two \";\n        } else if (nums[i] == 3) {\n            res += \"three\
    \ \";\n        } else if (nums[i] == 4) {\n            res += \"four \";\n   \
    \     } else if (nums[i] == 5) {\n            res += \"five \";\n        } else\
    \ if (nums[i] == 6) {\n            res += \"six \";\n        } else if (nums[i]\
    \ == 7) {\n            res += \"seven \";\n        } else if (\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4f14krf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa4f14krf.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmpa4f14krf.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpa4f14krf.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpa4f14krf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa4f14krf.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062750
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string res;\n    for (int i = 0; i < nums.size(); i++) {\n        if\
    \ (i != 0) res += \" \";\n        if (nums[i] == 0) res += \"zero\";\n       \
    \ else if (nums[i] == 1) res += \"one\";\n        else if (nums[i] == 2) res +=\
    \ \"two\";\n        else if (nums[i] == 3) res += \"three\";\n        else if\
    \ (nums[i] == 4) res += \"four\";\n        else if (nums[i] == 5) res += \"five\"\
    ;\n        else if (nums[i] == 6) res += \"six\";\n        else if (nums[i] ==\
    \ 7) res += \"seven\";\n        else if (nums[i] == 8) res += \"eight\";\n   \
    \     else if (nums[i] == 9) res += \"nine\";\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062752
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ result;\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) result\
    \ += \" \";\n        if (v[i] == 0) result += \"zero\";\n        else if (v[i]\
    \ == 1) result += \"one\";\n        else if (v[i] == 2) result += \"two\";\n \
    \       else if (v[i] == 3) result += \"three\";\n        else if (v[i] == 4)\
    \ result += \"four\";\n        else if (v[i] == 5) result += \"five\";\n     \
    \   else if (v[i] == 6) result += \"six\";\n        else if (v[i] == 7) result\
    \ += \"seven\";\n        else if (v[i] == 8) result += \"eight\";\n        else\
    \ if (v[i] == 9) result += \"nine\";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) result += \"zero \";\n  \
    \      else if(v[i] == 1) result += \"one \";\n        else if(v[i] == 2) result\
    \ += \"two \";\n        else if(v[i] == 3) result += \"three \";\n        else\
    \ if(v[i] == 4) result += \"four \";\n        else if(v[i] == 5) result += \"\
    five \";\n        else if(v[i] == 6) result += \"six \";\n        else if(v[i]\
    \ == 7) result += \"seven \";\n        else if(v[i] == 8) result += \"eight \"\
    ;\n        else if(v[i] == 9) result += \"nine \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp3c1oeszn: /tmp/tmp3c1oeszn.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062752
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (temp == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (temp == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ept_rre.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp7ept_rre.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ept_rre.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp7ept_rre.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp7ept_rre.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062751
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062751
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gu870rj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8gu870rj.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp8gu870rj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8gu870rj.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhanvuth.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwhanvuth.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpwhanvuth.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpwhanvuth.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpwhanvuth.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062749
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062750
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7hkeptn1: /tmp/tmp7hkeptn1.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660062749
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h33_zt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2h33_zt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp2h33_zt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp2h33_zt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    std::map<std::string, int> num_map = {{\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    while (ss >> word) {\n     \
    \   nums.push_back(num_map[word]);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (auto num : nums) {\n        for (auto pair\
    \ : num_map) {\n            if (pair.second == num) {\n                result\
    \ += pair.first + \" \";\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062753
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwwvvmzb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqwwvvmzb.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpqwwvvmzb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpqwwvvmzb.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062748
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            ans\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            ans += \"one\
    \ \";\n        } else if (nums[i] == 2) {\n            ans += \"two \";\n    \
    \    } else if (nums[i] == 3) {\n            ans += \"three \";\n        } else\
    \ if (nums[i] == 4) {\n            ans += \"four \";\n        } else if (nums[i]\
    \ == 5) {\n            ans += \"five \";\n        } else if (nums[i] == 6) {\n\
    \            ans += \"six \";\n        } else if (nums[i] == 7) {\n          \
    \  ans += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygxp2_t6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpygxp2_t6.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpygxp2_t6.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpygxp2_t6.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpygxp2_t6.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpygxp2_t6.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062752
