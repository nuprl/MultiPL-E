language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream ss2;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i != 0) ss2 << \" \";\n        if (nums[i] == 0) ss2 << \"zero\";\n\
    \        else if (nums[i] == 1) ss2 << \"one\";\n        else if (nums[i] == 2)\
    \ ss2 << \"two\";\n        else if (nums[i] == 3) ss2 << \"three\";\n        else\
    \ if (nums[i] == 4) ss2 << \"four\";\n        else if (nums[i] == 5) ss2 << \"\
    five\";\n        else if (nums[i] == 6) ss2 << \"six\";\n        else if (nums[i]\
    \ == 7) ss2 << \"seven\";\n        else if (nums[i] == 8) ss2 << \"eight\";\n\
    \        else if (nums[i] == 9) ss2 << \"nine\";\n    }\n    return ss2.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0allqh4f.cpp: In function 'int main()':\n/tmp/tmp0allqh4f.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0allqh4f.cpp:2:\n/tmp/tmp0allqh4f.cpp:43:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpljo3uoto.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpljo3uoto.cpp:58:1: error: expected '(' before '}' token\n }\n ^\n/tmp/tmpljo3uoto.cpp:59:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpljo3uoto.cpp:66:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvi1i0d7i.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpvi1i0d7i.cpp:72:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpvi1i0d7i.cpp:72:1: error: expected ';' before '}' token\n/tmp/tmpvi1i0d7i.cpp:73:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpvi1i0d7i.cpp:80:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::stringstream ss1;\n    for(int i = 0; i < v.size(); i++) {\n       \
    \ if(v[i] == 0) {\n            ss1 << \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            ss1 << \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            ss1 << \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           ss1 << \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        ss1 << \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    ss1 << \"five \";\n        }\n        else if(v[i] == 6) {\n            ss1\
    \ << \"six \";\n        }\n        else if(v[i] == 7) {\n            ss1 <<\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6dr12e7u.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp6dr12e7u.cpp:70:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmp6dr12e7u.cpp:70:1: error: expected ';' before '}' token\n/tmp/tmp6dr12e7u.cpp:71:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmp6dr12e7u.cpp:78:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp6dr12e7u.cpp:78:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj6lueb0.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmppj6lueb0.cpp:57:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (auto num : nums) {\n        if (num == 0) result\
    \ += \"zero \";\n        else if (num == 1) result += \"one \";\n        else\
    \ if (num == 2) result += \"two \";\n        else if (num == 3) result += \"three\
    \ \";\n        else if (num == 4) result += \"four \";\n        else if (num ==\
    \ 5) result += \"five \";\n        else if (num == 6) result += \"six \";\n  \
    \      else if (num == 7) result += \"seven \";\n        else if (num == 8) result\
    \ += \"eight \";\n        else if (num == 9) result += \"nine \";\n    }\n   \
    \ return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yes3t9h.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp7yes3t9h.cpp:26:15: error: 'num' does not name a type\n     for (auto\
    \ num : nums) {\n               ^\n/tmp/tmp7yes3t9h.cpp:38:5: error: expected\
    \ ';' before 'return'\n     return result.substr(0, result.size() - 1);\n    \
    \ ^\n/tmp/tmp7yes3t9h.cpp:38:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yes3t9h.cpp:38:5: error: expected ';' before 'return'\n/tmp/tmp7yes3t9h.cpp:38:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp7yes3t9h.cpp:38:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp7yes3t9h.cpp: In function 'int\
    \ main()':\n/tmp/tmp7yes3t9h.cpp:41:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yes3t9h.cpp:2:\n/tmp/tmp7yes3t9h.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplmhi8qxu.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmplmhi8qxu.cpp:57:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmplmhi8qxu.cpp:64:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmplmhi8qxu.cpp:64:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> v;\n    while(std::getline(ss, token, ' ')) {\n        if(token\
    \ == \"zero\") {\n            v.push_back(0);\n        } else if(token == \"one\"\
    ) {\n            v.push_back(1);\n        } else if(token == \"two\") {\n    \
    \        v.push_back(2);\n        } else if(token == \"three\") {\n          \
    \  v.push_back(3);\n        } else if(token == \"four\") {\n            v.push_back(4);\n\
    \        } else if(token == \"five\") {\n            v.push_back(5);\n       \
    \ } else if(token == \"six\") {\n            v.push_back(6);\n        } else if(token\
    \ == \"seven\") {\n            v.push_back(7);\n        } else if(token == \"\
    eight\") {\n            v.push_back(8);\n        } else if(token == \"nine\")\
    \ {\n            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if(v[i] == 1) {\n\
    \            result += \"one \";\n        } else if(v[i] == 2) {\n           \
    \ result += \"two \";\n        } else if(v[i] == 3) {\n            result += \"\
    three \";\n        } else if(v[i] == 4) {\n            result += \"four \";\n\
    \        } else if(v[i] == 5) {\n            result += \"five \";\n        } else\
    \ if(v[i] == 6) {\n            result += \"six \";\n        } else if(v[i] ==\
    \ 7) {\n            result += \"seven \";\n        } else if(v[i] == 8) {\n  \
    \          result += \"eight \";\n        } else if(v[\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqphi8s4o.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpqphi8s4o.cpp:57:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpqphi8s4o.cpp:57:1: error: expected ']' before '}' token\n/tmp/tmpqphi8s4o.cpp:57:1:\
    \ error: expected ')' before '}' token\n/tmp/tmpqphi8s4o.cpp:57:1: error: expected\
    \ primary-expression before '}' token\n/tmp/tmpqphi8s4o.cpp:57:1: error: expected\
    \ ';' before '}' token\n/tmp/tmpqphi8s4o.cpp:58:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpqphi8s4o.cpp:65:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> vec;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            vec.push_back(0);\n        } else if (temp == \"one\") {\n  \
    \          vec.push_back(1);\n        } else if (temp == \"two\") {\n        \
    \    vec.push_back(2);\n        } else if (temp == \"three\") {\n            vec.push_back(3);\n\
    \        } else if (temp == \"four\") {\n            vec.push_back(4);\n     \
    \   } else if (temp == \"five\") {\n            vec.push_back(5);\n        } else\
    \ if (temp == \"six\") {\n            vec.push_back(6);\n        } else if (temp\
    \ == \"seven\") {\n            vec.push_back(7);\n        } else if (temp == \"\
    eight\") {\n            vec.push_back(8);\n        } else if (temp == \"nine\"\
    ) {\n            vec.push_back(9);\n        }\n    }\n    std::sort(vec.begin(),\
    \ vec.end());\n    std::string result;\n    for (int i = 0; i < vec.size(); i++)\
    \ {\n        if (vec[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if (vec[i] == 1) {\n            result += \"one \";\n        } else if (vec[i]\
    \ == 2) {\n            result += \"two \";\n        } else if (vec[i] == 3) {\n\
    \            result += \"three \";\n        } else if (vec[i] == 4) {\n      \
    \      result += \"four \";\n        } else if (vec[i] == 5) {\n            result\
    \ += \"five \";\n        } else if (vec[i] == 6) {\n            result += \"six\
    \ \";\n        } else if (vec[i] == 7) {\n            result += \"seven \";\n\
    \        } else if (vec[i] == 8) {\n            result += \"eight \";\n      \
    \  } else if (vec[i] == 9) {\n           \n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzqd0ntd.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpdzqd0ntd.cpp:59:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmpdzqd0ntd.cpp:66:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmpdzqd0ntd.cpp:66:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf297c6av.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpf297c6av.cpp:59:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmpf297c6av.cpp:66:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmpf297c6av.cpp:66:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) res +=\
    \ \"zero \";\n        else if (nums[i] == 1) res += \"one \";\n        else if\
    \ (nums[i] == 2) res += \"two \";\n        else if (nums[i] == 3) res += \"three\
    \ \";\n        else if (nums[i] == 4) res += \"four \";\n        else if (nums[i]\
    \ == 5) res += \"five \";\n        else if (nums[i] == 6) res += \"six \";\n \
    \       else if (nums[i] == 7) res += \"seven \";\n        else if (nums[i] ==\
    \ 8) res += \"eight \";\n        else if (nums[i] == 9) res += \"nine \";\n  \
    \  }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfrrj83r.cpp: In function 'int main()':\n/tmp/tmppfrrj83r.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppfrrj83r.cpp:2:\n/tmp/tmppfrrj83r.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj6lueb0.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmppj6lueb0.cpp:57:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::stringstream ss(numbers);\n  std::vector<int> nums;\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result = \"\";\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8omvfnf.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpt8omvfnf.cpp:55:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpt8omvfnf.cpp:55:1: error: expected ';' before '}' token\n/tmp/tmpt8omvfnf.cpp:56:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpt8omvfnf.cpp:63:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") nums.push_back(0);\n        else if (token == \"one\") nums.push_back(1);\n\
    \        else if (token == \"two\") nums.push_back(2);\n        else if (token\
    \ == \"three\") nums.push_back(3);\n        else if (token == \"four\") nums.push_back(4);\n\
    \        else if (token == \"five\") nums.push_back(5);\n        else if (token\
    \ == \"six\") nums.push_back(6);\n        else if (token == \"seven\") nums.push_back(7);\n\
    \        else if (token == \"eight\") nums.push_back(8);\n        else if (token\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsweagx05.cpp: In function 'int main()':\n/tmp/tmpsweagx05.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsweagx05.cpp:2:\n/tmp/tmpsweagx05.cpp:43:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] ==\
    \ 0) {\n            result += \"zero \";\n        } else if (nums[i] == 1) {\n\
    \            result += \"one \";\n        } else if (nums[i] == 2) {\n       \
    \     result += \"two \";\n        } else if (nums[i] == 3) {\n            result\
    \ += \"three \";\n        } else if (nums[i] == 4) {\n            result += \"\
    four \";\n        } else if (nums[i] == 5) {\n            result += \"five \"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six \";\n     \
    \   } else if (nums[i] == 7) {\n            result += \"seven \";\n        } else\
    \ if (\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsyog5kdp.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpsyog5kdp.cpp:55:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpsyog5kdp.cpp:55:1: error: expected ')' before '}' token\n/tmp/tmpsyog5kdp.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmpsyog5kdp.cpp:55:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpsyog5kdp.cpp:56:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpsyog5kdp.cpp:63:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf297c6av.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpf297c6av.cpp:59:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmpf297c6av.cpp:66:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmpf297c6av.cpp:66:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) res += \"zero \";\n     \
    \   else if(v[i] == 1) res += \"one \";\n        else if(v[i] == 2) res += \"\
    two \";\n        else if(v[i] == 3) res += \"three \";\n        else if(v[i] ==\
    \ 4) res += \"four \";\n        else if(v[i] == 5) res += \"five \";\n       \
    \ else if(v[i] == 6) res += \"six \";\n        else if(v[i] == 7) res += \"seven\
    \ \";\n        else if(v[i] == 8) res += \"eight \";\n        else if(v[i] ==\
    \ 9) res += \"nine \";\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcpsjqvp.cpp: In function 'int main()':\n/tmp/tmpmcpsjqvp.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmcpsjqvp.cpp:2:\n/tmp/tmpmcpsjqvp.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj6lueb0.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmppj6lueb0.cpp:57:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj6lueb0.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmppj6lueb0.cpp:57:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmppj6lueb0.cpp:64:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86hjd0ld.cpp: In function 'int main()':\n/tmp/tmp86hjd0ld.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp86hjd0ld.cpp:2:\n/tmp/tmp86hjd0ld.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
