language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfv218ahp.cpp: In function 'int main()':\n/tmp/tmpfv218ahp.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfv218ahp.cpp:2:\n/tmp/tmpfv218ahp.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpfv218ahp.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpfv218ahp.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpfv218ahp.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfv218ahp.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfv218ahp.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfv218ahp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpown5r_pl.cpp: In function 'int main()':\n/tmp/tmpown5r_pl.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpown5r_pl.cpp:2:\n/tmp/tmpown5r_pl.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpown5r_pl.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpown5r_pl.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpown5r_pl.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpown5r_pl.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpown5r_pl.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpown5r_pl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfv218ahp.cpp: In function 'int main()':\n/tmp/tmpfv218ahp.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfv218ahp.cpp:2:\n/tmp/tmpfv218ahp.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpfv218ahp.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpfv218ahp.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpfv218ahp.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfv218ahp.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpfv218ahp.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfv218ahp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltk3czdr.cpp: In function 'int main()':\n/tmp/tmpltk3czdr.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = all_prefixes;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/tmp/tmpltk3czdr.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n                          ^\n/tmp/tmpltk3czdr.cpp:16:62:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                        ^\n/tmp/tmpltk3czdr.cpp:16:186: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n                                      \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpltk3czdr.cpp:16:186:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpltk3czdr.cpp:16:186: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpltk3czdr.cpp:16:186: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpltk3czdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
