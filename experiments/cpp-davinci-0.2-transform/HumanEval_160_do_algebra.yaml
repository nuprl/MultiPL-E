name: HumanEval_160_do_algebra
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
  \ and operand. The first list has basic algebra operations, and \n// the second\
  \ list is a list of integers. Use the two given lists to build the algebric \n//\
  \ expression and return the evaluation of this expression.\n// The basic algebra\
  \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( *\
  \ ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+',\
  \ '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result =\
  \ 9\n// Note:\n// The length of operator list is equal to the length of operand\
  \ list minus one.\n// Operand is a list of of non-negative integers.\n// Operator\
  \ list has at least one operator, and operand list has at least two operands.\n\
  long do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n"
tests: "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) ==\
  \ (8));\n}\n"
completions: ["    long result = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n     \
    \   }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    std::stack<long>\
    \ stk;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = stk.top();\n            stk.pop();\n            long b =\
    \ stk.top();\n            stk.pop();\n            stk.push(a + b);\n        }\
    \ else if(op[i] == \"-\") {\n            long a = stk.top();\n            stk.pop();\n\
    \            long b = stk.top();\n            stk.pop();\n            stk.push(b\
    \ - a);\n        } else if(op[i] == \"*\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(a * b);\n        } else if(op[i] == \"//\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(b / a);\n        } else if(op[i]\
    \ == \"**\") {\n            long a = stk.top();\n            stk.pop();\n    \
    \        long b = stk.top();\n            stk.pop();\n            stk.push(pow(b,\
    \ a));\n        }\n    }\n    return stk.top();", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    // Write your code here\n    std::stack<long> stk;\n    for(int i = 0; i <\
    \ op.size(); i++){\n        if(op[i] == \"+\"){\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(a + b);\n        }\n        else if(op[i] == \"-\"){\n \
    \           long a = stk.top();\n            stk.pop();\n            long b =\
    \ stk.top();\n            stk.pop();\n            stk.push(b - a);\n        }\n\
    \        else if(op[i] == \"*\"){\n            long a = stk.top();\n         \
    \   stk.pop();\n            long b = stk.top();\n            stk.pop();\n    \
    \        stk.push(a * b);\n        }\n        else if(op[i] == \"//\"){\n    \
    \        long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(b / a);\n        }\n        else\
    \ if(op[i] == \"**\"){\n            long a = stk.top();\n            stk.pop();\n\
    \            long b = stk.top();\n            stk.pop();\n            stk.push(pow(b,\
    \ a));\n        }\n    }\n    return stk.top();", "\tlong result = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn result;", "    long result = operand[0];\n    for(int i =\
    \ 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result +=\
    \ operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n            result\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n           \
    \ result *= operand[i+1];\n        }\n        else if(op[i] == \"//\") {\n   \
    \         result /= operand[i+1];\n        }\n        else if(op[i] == \"**\"\
    ) {\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    long res = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            res +=\
    \ operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            res\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            res\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ res /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n       \
    \     res = pow(res, operand[i+1]);\n        }\n    }\n    return res;", "   \
    \ // Write your code here\n    long result = operand[0];\n    for(int i = 0; i\
    \ < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "  long result = operand[0];\n\
    \  for (int i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result\
    \ += operand[i + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i\
    \ + 1];\n    } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n \
    \   } else if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else\
    \ if (op[i] == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n\
    \  }\n  return result;", "\tlong result = operand[0];\n\tfor (int i = 0; i < op.size();\
    \ i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\
    \telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] ==\
    \ \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ result;", "    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::stack<long>\
    \ st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n        \
    \    long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b-a);\n        }\n\
    \        else if(op[i]==\"*\"){\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(a*b);\n\
    \        }\n        else if(op[i]==\"//\"){\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n     \
    \       long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b,a));\n        }\n    }\n   \
    \ return st.top();", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"\
    *\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\
    \ else if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        } else {\n            st.push(operand[i]);\n\
    \        }\n    }\n    return st.top();", "    long ans = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            ans\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            ans -= operand[i+1];\n\
    \        } else if(op[i] == \"*\") {\n            ans *= operand[i+1];\n     \
    \   } else if(op[i] == \"//\") {\n            ans /= operand[i+1];\n        }\
    \ else if(op[i] == \"**\") {\n            ans = pow(ans, operand[i+1]);\n    \
    \    }\n    }\n    return ans;", "    std::stack<long> st;\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a + b);\n        } else if(op[i] == \"-\") {\n          \
    \  long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        } else if(op[i] ==\
    \ \"*\") {\n            long a = st.top();\n            st.pop();\n          \
    \  long b = st.top();\n            st.pop();\n            st.push(a * b);\n  \
    \      } else if(op[i] == \"//\") {\n            long a = st.top();\n        \
    \    st.pop();\n            long b = st.top();\n            st.pop();\n      \
    \      st.push(b / a);\n        } else if(op[i] == \"**\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(pow(b, a));\n        } else {\n       \
    \     st.push(operand[i]);\n        }\n    }\n    return st.top();", "  // Write\
    \ your code here\n  long result = operand[0];\n  for(int i = 0; i < op.size();\
    \ i++){\n    if(op[i] == \"+\"){\n      result += operand[i+1];\n    }\n    else\
    \ if(op[i] == \"-\"){\n      result -= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"*\"){\n      result *= operand[i+1];\n    }\n    else if(op[i] == \"//\"\
    ){\n      result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"){\n    \
    \  result = pow(result, operand[i+1]);\n    }\n  }\n  return result;", "    //\
    \ Write your code here\n    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long res = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            res += operand[i+1];\n        } else if(op[i] == \"\
    -\") {\n            res -= operand[i+1];\n        } else if(op[i] == \"*\") {\n\
    \            res *= operand[i+1];\n        } else if(op[i] == \"//\") {\n    \
    \        res /= operand[i+1];\n        } else if(op[i] == \"**\") {\n        \
    \    res = pow(res, operand[i+1]);\n        }\n    }\n    return res;"]
stop_tokens:
- "\n}"
