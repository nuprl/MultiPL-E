language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] != 0)\
    \ {\n            int rem = x[i] % 10;\n            if(rem % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            x[i]\
    \ /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpl_g57lsx: /tmp/tmpl_g57lsx.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        std::string s = std::to_string(i);\n        bool flag\
    \ = true;\n        for (auto j : s) {\n            if (j == '2' || j == '4' ||\
    \ j == '6' || j == '8') {\n                flag = false;\n                break;\n\
    \            }\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpztagiucs: /tmp/tmpztagiucs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool isUnique = true;\n        while (i > 0) {\n   \
    \         if (i % 2 == 0) {\n                isUnique = false;\n             \
    \   break;\n            }\n            i /= 10;\n        }\n        if (isUnique)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgaiztou9: /tmp/tmpgaiztou9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            bool flag=true;\n            while(i>0){\n              \
    \  if(i%2==0){\n                    flag=false;\n                    break;\n\
    \                }\n                i/=10;\n            }\n            if(flag){\n\
    \                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxbwltu3q: /tmp/tmpxbwltu3q.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long temp = x[i];\n\
    \        while(temp > 0) {\n            if(temp % 10 % 2 == 0) {\n           \
    \     flag = 1;\n                break;\n            }\n            temp /= 10;\n\
    \        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n      \
    \  }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        int flag = 0;\n    \
    \    while(num){\n            int rem = num%10;\n            if(rem%2==0){\n \
    \               flag = 1;\n                break;\n            }\n           \
    \ num = num/10;\n        }\n        if(flag==0){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) result.push_back(x[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 0;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool isUnique\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                isUnique = false;\n          \
    \      break;\n            }\n            num /= 10;\n        }\n        if (isUnique)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num>0){\n            if(num%10%2==0){\n                flag = false;\n\
    \                break;\n            }\n            num/=10;\n        }\n    \
    \    if(flag) v.push_back(x[i]);\n    }\n    std::sort(v.begin(),v.end());\n \
    \   return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                break;\n          \
    \  }\n            num /= 10;\n        }\n        if (num == 0) {\n           \
    \ result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i = x.begin(); i != x.end(); i++) {\n        bool flag = true;\n     \
    \   long temp = *i;\n        while (temp > 0) {\n            if (temp % 2 == 0)\
    \ {\n                flag = false;\n                break;\n            }\n  \
    \          temp /= 10;\n        }\n        if (flag) {\n            result.push_back(*i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        bool flag = true;\n        while(i) {\n            if(i %\
    \ 2 == 0) {\n                flag = false;\n                break;\n         \
    \   }\n            i /= 10;\n        }\n        if(flag) res.push_back(i);\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpp8uwfi5u: /tmp/tmpp8uwfi5u.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          is_unique = false;\n                break;\n            }\n       \
    \     num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (long\
    \ i = 0; i < x.size(); i++) {\n    long num = x[i];\n    bool is_unique = true;\n\
    \    while (num > 0) {\n      if (num % 2 == 0) {\n        is_unique = false;\n\
    \        break;\n      }\n      num /= 10;\n    }\n    if (is_unique) {\n    \
    \  result.push_back(x[i]);\n    }\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            int flag = 0;\n            while(i) {\n                if(i %\
    \ 2 == 0) {\n                    flag = 1;\n                    break;\n     \
    \           }\n                i /= 10;\n            }\n            if(flag ==\
    \ 0) {\n                res.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpthn_kmv8: /tmp/tmpthn_kmv8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num>0){\n            int rem = num%10;\n            if(rem%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool isUnique\
    \ = true;\n        while(num > 0) {\n            int digit = num % 10;\n     \
    \       if(digit % 2 == 0) {\n                isUnique = false;\n            \
    \    break;\n            }\n            num /= 10;\n        }\n        if(isUnique)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            if(temp%10%2==0){\n                flag=1;\n   \
    \             break;\n            }\n            temp/=10;\n        }\n      \
    \  if(flag==0){\n            v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgrva6d9z: /tmp/tmpgrva6d9z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 1;\n        long temp = x[i];\n\
    \        while(temp) {\n            if(temp % 10 % 2 == 0) {\n               \
    \ flag = 0;\n                break;\n            }\n            temp /= 10;\n\
    \        }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            long digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgrva6d9z: /tmp/tmpgrva6d9z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 0;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgrva6d9z: /tmp/tmpgrva6d9z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjbe2x02b: /tmp/tmpjbe2x02b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] != 0)\
    \ {\n            int rem = x[i] % 10;\n            if(rem % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            x[i]\
    \ /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpx78hi524: /tmp/tmpx78hi524.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i) {\n                if(i\
    \ % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb451efma: /tmp/tmpb451efma.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool is_unique = true;\n            while(i) {\n            \
    \    if(i % 2 == 0) {\n                    is_unique = false;\n              \
    \      break;\n                }\n                i /= 10;\n            }\n  \
    \          if(is_unique) {\n                res.push_back(i);\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmph_0xnnpi: /tmp/tmph_0xnnpi.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n  for (int i\
    \ = 0; i < x.size(); i++) {\n    int num = x[i];\n    int flag = 0;\n    while\
    \ (num > 0) {\n      int rem = num % 10;\n      if (rem % 2 == 0) {\n        flag\
    \ = 1;\n        break;\n      }\n      num = num / 10;\n    }\n    if (flag ==\
    \ 0) {\n      res.push_back(x[i]);\n    }\n  }\n  sort(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        if (x[i] < 10) {\n            result.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while (x[i] != 0) {\n\
    \                if (x[i] % 2 == 0) {\n                    flag = 1;\n       \
    \             break;\n                }\n                x[i] /= 10;\n       \
    \     }\n            if (flag == 0) {\n                result.push_back(x[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpthhqkb0r: /tmp/tmpthhqkb0r.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num > 0) {\n            int r = num % 10;\n            if(r % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxiam3tna: /tmp/tmpxiam3tna.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i>0){\n                if(i%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpw24ol6z9: /tmp/tmpw24ol6z9.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i>0){\n                if(i%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5hoejje7: /tmp/tmp5hoejje7.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 0;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if(x[i] % 2 == 0) {\n                flag = 1;\n            \
    \    break;\n            }\n            x[i] /= 10;\n        }\n        if(flag\
    \ == 0)\n            res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpffep97pj: /tmp/tmpffep97pj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i > 0) {\n             \
    \   if(i % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpheq7ocjd: /tmp/tmpheq7ocjd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        bool flag = true;\n        while(x[i] >\
    \ 0) {\n            int rem = x[i] % 10;\n            if(rem % 2 == 0) {\n   \
    \             flag = false;\n                break;\n            }\n         \
    \   x[i] /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9na9hdcd: /tmp/tmp9na9hdcd.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                is_unique = false;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (is_unique)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] != 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5vs_693j: /tmp/tmp5vs_693j.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        bool flag = true;\n        while(i > 0) {\n            if(i\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            i /= 10;\n        }\n        if(flag) res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg8l5gnr7: /tmp/tmpg8l5gnr7.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < x.size(); i++) {\n    long num = x[i];\n    bool flag = true;\n \
    \   while (num > 0) {\n      if (num % 2 == 0) {\n        flag = false;\n    \
    \    break;\n      }\n      num /= 10;\n    }\n    if (flag) {\n      result.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp!=0){\n            int rem=temp%10;\n            if(rem%2==0){\n \
    \               flag=1;\n                break;\n            }\n            temp=temp/10;\n\
    \        }\n        if(flag==0){\n            v.push_back(x[i]);\n        }\n\
    \    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg7xonnqm: /tmp/tmpg7xonnqm.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        int flag\
    \ = 0;\n        while (temp != 0) {\n            if ((temp % 10) % 2 == 0) {\n\
    \                flag = 1;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 0;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long temp =\
    \ x[i];\n        while (temp != 0) {\n            if (temp % 2 == 0) {\n     \
    \           flag = 1;\n                break;\n            }\n            temp\
    \ /= 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjbe2x02b: /tmp/tmpjbe2x02b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjbe2x02b: /tmp/tmpjbe2x02b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool hasEven = false;\n        while (i > 0) {\n   \
    \         if ((i % 10) % 2 == 0) {\n                hasEven = true;\n        \
    \        break;\n            }\n            i /= 10;\n        }\n        if (!hasEven)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp043iskpm: /tmp/tmp043iskpm.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            int flag = 0;\n            while(i > 0) {\n                if(i\
    \ % 2 == 0) {\n                    flag = 1;\n                    break;\n   \
    \             }\n                i /= 10;\n            }\n            if(flag\
    \ == 0) {\n                res.push_back(i);\n            }\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfhq_3f75: /tmp/tmpfhq_3f75.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool is_unique\
    \ = true;\n        while(num > 0) {\n            int digit = num % 10;\n     \
    \       if(digit % 2 == 0) {\n                is_unique = false;\n           \
    \     break;\n            }\n            num /= 10;\n        }\n        if(is_unique)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 0;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp!=0){\n            if(temp%10%2==0){\n                flag=1;\n  \
    \              break;\n            }\n            temp/=10;\n        }\n     \
    \   if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if((num % 10) % 2 == 0) {\n           \
    \     flag = false;\n                break;\n            }\n            num /=\
    \ 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0)\n            res.push_back(x[i]);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcwfs37y3: /tmp/tmpcwfs37y3.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            long digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag)\n         \
    \   result.push_back(i);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptsryv6cb: /tmp/tmptsryv6cb.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 0;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num){\n            if(num%10%2==0){\n                flag = false;\n\
    \                break;\n            }\n            num/=10;\n        }\n    \
    \    if(flag) ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            int flag = 0;\n            while (i > 0) {\n    \
    \            if (i % 2 == 0) {\n                    flag = 1;\n              \
    \      break;\n                }\n                i /= 10;\n            }\n  \
    \          if (flag == 0) {\n                result.push_back(i);\n          \
    \  }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcnsfbasq: /tmp/tmpcnsfbasq.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool is_unique = true;\n        while (i > 0) {\n  \
    \          if (i % 2 == 0) {\n                is_unique = false;\n           \
    \     break;\n            }\n            i /= 10;\n        }\n        if (is_unique)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4svjuad9: /tmp/tmp4svjuad9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int count = 0;\n        while (x[i]\
    \ > 0) {\n            int digit = x[i] % 10;\n            if (digit % 2 == 0)\
    \ {\n                count++;\n            }\n            x[i] /= 10;\n      \
    \  }\n        if (count == 0) {\n            result.push_back(x[i]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvobbb1oj: /tmp/tmpvobbb1oj.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        while(num > 0)\
    \ {\n            if(num % 2 == 0) {\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if(num == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        while(num > 0)\
    \ {\n            if(num % 2 == 0) {\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if(num == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i) {\n                if(i\
    \ % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb451efma: /tmp/tmpb451efma.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long n=x[i];\n        while(n>0){\n\
    \            if(n%10%2==0){\n                flag=1;\n                break;\n\
    \            }\n            n=n/10;\n        }\n        if(flag==0){\n       \
    \     v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num = num / 10;\n        }\n        if(flag == 0) {\n       \
    \     res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (int i\
    \ = 0; i < x.size(); i++) {\n\t\tint flag = 0;\n\t\twhile (x[i] > 0) {\n\t\t\t\
    int rem = x[i] % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tx[i] = x[i] / 10;\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tres.push_back(x[i]);\n\
    \t\t}\n\t}\n\tsort(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpe6o7uu6_: /tmp/tmpe6o7uu6_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (std::to_string(i).find_first_of(\"02468\") == std::string::npos)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            int rem=temp%10;\n            if(rem%2==0){\n  \
    \              flag=1;\n                break;\n            }\n            temp=temp/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp!=0){\n            int rem=temp%10;\n            if(rem%2==0){\n \
    \               flag=1;\n                break;\n            }\n            temp=temp/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] == 0) {\n            res.push_back(x[i]);\n\
    \            continue;\n        }\n        int flag = 0;\n        while(x[i] !=\
    \ 0) {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n  \
    \              break;\n            }\n            x[i] /= 10;\n        }\n   \
    \     if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp34ocpgpa: /tmp/tmp34ocpgpa.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) res.push_back(x[i]);\n    }\n    sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i>0){\n                if(i%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i/=10;\n            }\n            if(flag==0){\n           \
    \     res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgfbsz1ro: /tmp/tmpgfbsz1ro.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            int rem=i%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            i=i/10;\n        }\n        if(flag==0){\n       \
    \     res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3xbigpys: /tmp/tmp3xbigpys.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            int flag = 0;\n            while(i) {\n                if(i %\
    \ 2 == 0) {\n                    flag = 1;\n                    break;\n     \
    \           }\n                i /= 10;\n            }\n            if(flag ==\
    \ 0) {\n                res.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpthn_kmv8: /tmp/tmpthn_kmv8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          is_unique = false;\n                break;\n            }\n       \
    \     num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp!=0){\n            if(temp%2==0){\n                flag=1;\n     \
    \           break;\n            }\n            temp=temp/10;\n        }\n    \
    \    if(flag==0){\n            v.push_back(x[i]);\n        }\n    }\n    sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool isUnique\
    \ = true;\n        while(num > 0) {\n            if(num % 2 == 0) {\n        \
    \        isUnique = false;\n                break;\n            }\n          \
    \  num /= 10;\n        }\n        if(isUnique) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i>0){\n                if(i%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i/=10;\n            }\n            if(flag==0){\n           \
    \     res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgfbsz1ro: /tmp/tmpgfbsz1ro.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long temp =\
    \ x[i];\n        while (temp > 0) {\n            int digit = temp % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = 1;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if (flag == 0) {\n\
    \            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i) {\n                if(i\
    \ % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb451efma: /tmp/tmpb451efma.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num =\
    \ x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n        \
    \        flag = 1;\n                break;\n            }\n            num /=\
    \ 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < x.size(); i++) {\n\t\tint num = x[i];\n\t\tint flag = 1;\n\t\twhile\
    \ (num > 0) {\n\t\t\tint digit = num % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\
    \tflag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif (flag\
    \ == 1) {\n\t\t\tresult.push_back(x[i]);\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\
    \treturn result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it;\n    for(it = x.begin(); it != x.end(); it++) {\n        long num = *it;\n\
    \        bool flag = true;\n        while(num > 0) {\n            if(num % 2 ==\
    \ 0) {\n                flag = false;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag) {\n            result.push_back(*it);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] > 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmphbavz83i: /tmp/tmphbavz83i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0) ans.push_back(i);\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpmu4hmti5: /tmp/tmpmu4hmti5.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] > 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqihnpzo4: /tmp/tmpqihnpzo4.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    std::vector<long>\
    \ result;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n\
    \            if(x[i]%10%2==0){\n                flag=1;\n                break;\n\
    \            }\n            x[i]/=10;\n        }\n        if(flag==0){\n     \
    \       result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnui_oro3: /tmp/tmpnui_oro3.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num = num / 10;\n        }\n        if(flag == 0) {\n       \
    \     res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060396
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if ((i % 10) % 2 == 0) {\n                    flag = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (flag) {\n                result.push_back(i);\n \
    \           }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpwvae7vs6: /tmp/tmpwvae7vs6.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if ((i % 10) % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            i /= 10;\n        }\n        if (flag) {\n\
    \            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpyvpxao5_: /tmp/tmpyvpxao5_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool is_unique\
    \ = true;\n        while(num > 0) {\n            int digit = num % 10;\n     \
    \       if(digit % 2 == 0) {\n                is_unique = false;\n           \
    \     break;\n            }\n            num /= 10;\n        }\n        if(is_unique)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060395
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjmlzcoyn: /tmp/tmpjmlzcoyn.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdozop5wx: /tmp/tmpdozop5wx.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i = x.begin(); i != x.end(); i++) {\n        if (*i < 10) {\n        \
    \    result.push_back(*i);\n        } else {\n            long temp = *i;\n  \
    \          bool is_unique = true;\n            while (temp > 0) {\n          \
    \      if (temp % 2 == 0) {\n                    is_unique = false;\n        \
    \            break;\n                }\n                temp /= 10;\n        \
    \    }\n            if (is_unique) {\n                result.push_back(*i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 0;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060394
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoho2xyv_: /tmp/tmpoho2xyv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        bool flag = true;\n        long num = x[i];\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long temp = x[i];\n        bool flag\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            num /= 10;\n      \
    \  }\n        if(flag == 0)\n            res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i == 0) continue;\n        bool flag = true;\n        while(i)\
    \ {\n            if(i % 2 == 0) {\n                flag = false;\n           \
    \     break;\n            }\n            i /= 10;\n        }\n        if(flag)\
    \ res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfhpva4le: /tmp/tmpfhpva4le.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            int flag = 0;\n            while(i) {\n                if(i %\
    \ 2 == 0) {\n                    flag = 1;\n                    break;\n     \
    \           }\n                i /= 10;\n            }\n            if(flag ==\
    \ 0) {\n                res.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpthn_kmv8: /tmp/tmpthn_kmv8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgrva6d9z: /tmp/tmpgrva6d9z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i > 0) {\n             \
    \   if(i % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpheq7ocjd: /tmp/tmpheq7ocjd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i){\n                if(i%10%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i/=10;\n            }\n            if(flag==0){\n           \
    \     res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpkf5th_kt: /tmp/tmpkf5th_kt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i % 2 == 0) {\n            continue;\n        }\n\
    \        result.push_back(i);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpydaozrrg: /tmp/tmpydaozrrg.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060397
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] != 0)\
    \ {\n            if(x[i] % 2 == 0) {\n                flag = 1;\n            \
    \    break;\n            }\n            x[i] /= 10;\n        }\n        if(flag\
    \ == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprwy669g7: /tmp/tmprwy669g7.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060398
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj58c2q8n: /tmp/tmpj58c2q8n.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool is_unique = true;\n        while (i > 0) {\n  \
    \          if (i % 2 == 0) {\n                is_unique = false;\n           \
    \     break;\n            }\n            i /= 10;\n        }\n        if (is_unique)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4svjuad9: /tmp/tmp4svjuad9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        std::string s = std::to_string(i);\n        bool flag = true;\n\
    \        for(auto j : s) {\n            if((j - '0') % 2 == 0) {\n           \
    \     flag = false;\n                break;\n            }\n        }\n      \
    \  if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            long digit = num % 10;\n   \
    \         if (digit % 2 == 0) {\n                flag = false;\n             \
    \   break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i = x.begin(); i != x.end(); i++) {\n        long num = *i;\n        bool\
    \ flag = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     num /= 10;\n        }\n        if (flag) {\n            result.push_back(*i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        if (x[i] < 10) {\n            result.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while (x[i] > 0) {\n\
    \                if (x[i] % 2 == 0) {\n                    flag = 1;\n       \
    \             break;\n                }\n                x[i] /= 10;\n       \
    \     }\n            if (flag == 0) {\n                result.push_back(x[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc0bmymsx: /tmp/tmpc0bmymsx.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060393
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        bool is_unique = true;\n        long\
    \ num = x[i];\n        while (num > 0) {\n            if (num % 2 == 0) {\n  \
    \              is_unique = false;\n                break;\n            }\n   \
    \         num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        bool flag = true;\n        while (x[i]\
    \ > 0) {\n            if (x[i] % 2 == 0) {\n                flag = false;\n  \
    \              break;\n            }\n            x[i] /= 10;\n        }\n   \
    \     if (flag) {\n            result.push_back(x[i]);\n        }\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1msj5t3o: /tmp/tmp1msj5t3o.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag = true;\n\
    \        while(temp > 0) {\n            if(temp % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660060398
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i>0){\n                int\
    \ rem=i%10;\n                if(rem%2==0){\n                    flag=1;\n    \
    \                break;\n                }\n                i=i/10;\n        \
    \    }\n            if(flag==0){\n                res.push_back(i);\n        \
    \    }\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnanwtokw: /tmp/tmpnanwtokw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060398
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjbe2x02b: /tmp/tmpjbe2x02b.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060393
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n\
    // (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpjdrbum7_: /tmp/tmpjdrbum7_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660060392
