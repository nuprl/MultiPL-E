language: cpp
name: HumanEval_62_derivative
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tans.push_back(xs[i] * i);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ret;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ret.push_back(xs[i] * i);\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    int n = xs.size();\n    for (int i =\
    \ 1; i < n; i++) {\n        res.push_back(xs[i] * i);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063831
