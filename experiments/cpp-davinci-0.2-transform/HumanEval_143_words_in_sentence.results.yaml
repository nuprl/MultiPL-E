language: cpp
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx68q3211.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpx68q3211.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpx68q3211.cpp: In function 'int main()':\n/tmp/tmpx68q3211.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx68q3211.cpp:2:\n/tmp/tmpx68q3211.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        int count = 0;\n\
    \        for (int j = 1; j <= words[i].length(); j++) {\n            if (words[i].length()\
    \ % j == 0) {\n                count++;\n            }\n        }\n        if\
    \ (count == 2) {\n            result += words[i] + \" \";\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsij6hhfd.cpp: In function 'int main()':\n/tmp/tmpsij6hhfd.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsij6hhfd.cpp:2:\n/tmp/tmpsij6hhfd.cpp:40:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lai1m92.cpp: In function 'int main()':\n/tmp/tmp0lai1m92.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0lai1m92.cpp:2:\n/tmp/tmp0lai1m92.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbxel7mw.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpgbxel7mw.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpgbxel7mw.cpp: In function 'int main()':\n/tmp/tmpgbxel7mw.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgbxel7mw.cpp:2:\n/tmp/tmpgbxel7mw.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7t4ielkv.cpp: In function 'int main()':\n/tmp/tmp7t4ielkv.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7t4ielkv.cpp:2:\n/tmp/tmp7t4ielkv.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        int len = word.length();\n        bool prime = true;\n\
    \        for (int i = 2; i < len; i++) {\n            if (len % i == 0) {\n  \
    \              prime = false;\n                break;\n            }\n       \
    \ }\n        if (prime) {\n            result += word + \" \";\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9m4sn9bt.cpp: In function 'int main()':\n/tmp/tmp9m4sn9bt.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9m4sn9bt.cpp:2:\n/tmp/tmp9m4sn9bt.cpp:38:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt92v4v8y.cpp: In function 'int main()':\n/tmp/tmpt92v4v8y.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt92v4v8y.cpp:2:\n/tmp/tmpt92v4v8y.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        bool isPrime = true;\n\
    \        for (int j = 2; j < words[i].length(); j++) {\n            if (words[i].length()\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            result += words[i]\
    \ + \" \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1x92exps.cpp: In function 'int main()':\n/tmp/tmp1x92exps.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1x92exps.cpp:2:\n/tmp/tmp1x92exps.cpp:46:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        bool isPrime = true;\n        for (int i = 2; i < word.length();\
    \ i++) {\n            if (word.length() % i == 0) {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjmrl_im.cpp: In function 'int main()':\n/tmp/tmpkjmrl_im.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkjmrl_im.cpp:2:\n/tmp/tmpkjmrl_im.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbxel7mw.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpgbxel7mw.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpgbxel7mw.cpp: In function 'int main()':\n/tmp/tmpgbxel7mw.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgbxel7mw.cpp:2:\n/tmp/tmpgbxel7mw.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string res;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.size() == 1) {\n            res += word + \" \";\n\
    \            continue;\n        }\n        bool isPrime = true;\n        for (int\
    \ i = 2; i <= word.size() / 2; ++i) {\n            if (word.size() % i == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) {\n            res += word + \" \";\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo462mv14.cpp: In function 'int main()':\n/tmp/tmpo462mv14.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo462mv14.cpp:2:\n/tmp/tmpo462mv14.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    if (result.length() > 0) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx54sqa6d.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpx54sqa6d.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpx54sqa6d.cpp:27:16: error: 'std::string' has no member named 'pop_back'\n\
    \         result.pop_back();\n                ^\n/tmp/tmpx54sqa6d.cpp: In function\
    \ 'int main()':\n/tmp/tmpx54sqa6d.cpp:32:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_in_sentence;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx54sqa6d.cpp:2:\n/tmp/tmpx54sqa6d.cpp:33:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx68q3211.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpx68q3211.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpx68q3211.cpp: In function 'int main()':\n/tmp/tmpx68q3211.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx68q3211.cpp:2:\n/tmp/tmpx68q3211.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] +\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3358vgbl.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp3358vgbl.cpp:59:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmp3358vgbl.cpp:59:1: error: expected ';' before '}' token\n/tmp/tmp3358vgbl.cpp:60:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmp3358vgbl.cpp:69:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp3358vgbl.cpp:69:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lai1m92.cpp: In function 'int main()':\n/tmp/tmp0lai1m92.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0lai1m92.cpp:2:\n/tmp/tmp0lai1m92.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcy1h5bq2.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcy1h5bq2.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmpcy1h5bq2.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmpcy1h5bq2.cpp: In function 'int main()':\n/tmp/tmpcy1h5bq2.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcy1h5bq2.cpp:2:\n/tmp/tmpcy1h5bq2.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx68q3211.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpx68q3211.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpx68q3211.cpp: In function 'int main()':\n/tmp/tmpx68q3211.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx68q3211.cpp:2:\n/tmp/tmpx68q3211.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (auto c : sentence) {\n        if (c\
    \ == ' ') {\n            words.push_back(word);\n            word = \"\";\n  \
    \      } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); i++) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdo4s3aiu.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpdo4s3aiu.cpp:20:15: error: 'c' does not name a type\n     for (auto c\
    \ : sentence) {\n               ^\n/tmp/tmpdo4s3aiu.cpp:28:5: error: expected\
    \ ';' before 'words'\n     words.push_back(word);\n     ^\n/tmp/tmpdo4s3aiu.cpp:28:25:\
    \ error: could not convert 'words.std::vector<_Tp, _Alloc>::push_back<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >((*(const value_type*)(& word)))'\
    \ from 'void' to 'bool'\n     words.push_back(word);\n                       \
    \  ^\n/tmp/tmpdo4s3aiu.cpp:29:17: error: expected primary-expression before 'result'\n\
    \     std::string result;\n                 ^\n/tmp/tmpdo4s3aiu.cpp:29:17: error:\
    \ expected ')' before 'result'\n/tmp/tmpdo4s3aiu.cpp:29:17: error: 'result' was\
    \ not declared in this scope\n/tmp/tmpdo4s3aiu.cpp:30:15: error: 'word' does not\
    \ name a type\n     for (auto word : words) {\n               ^\n/tmp/tmpdo4s3aiu.cpp:46:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpdo4s3aiu.cpp:46:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdo4s3aiu.cpp:46:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdo4s3aiu.cpp:46:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdo4s3aiu.cpp:46:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdo4s3aiu.cpp:46:12: error: 'result' was not declared\
    \ in this scope\n     return result;\n            ^\n/tmp/tmpdo4s3aiu.cpp: In\
    \ function 'int main()':\n/tmp/tmpdo4s3aiu.cpp:49:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdo4s3aiu.cpp:2:\n/tmp/tmpdo4s3aiu.cpp:50:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    if (result.length() > 0) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmhv09af.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmphmhv09af.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmphmhv09af.cpp:27:16: error: 'std::string' has no member named 'pop_back'\n\
    \         result.pop_back();\n                ^\n/tmp/tmphmhv09af.cpp: In function\
    \ 'int main()':\n/tmp/tmphmhv09af.cpp:32:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_in_sentence;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphmhv09af.cpp:2:\n/tmp/tmphmhv09af.cpp:33:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lai1m92.cpp: In function 'int main()':\n/tmp/tmp0lai1m92.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0lai1m92.cpp:2:\n/tmp/tmp0lai1m92.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
