language: cpp
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::string word;\n    std::stringstream\
    \ ss(txt);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\
    \    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream ss2(txt);\n    while (std::getline(ss2, word, ','))\
    \ {\n        words.push_back(word);\n    }\n    if (words.size() > 0) {\n    \
    \    return Union_std_vector_std_string__long(words);\n    }\n    long count =\
    \ 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] >= 'a' &&\
    \ txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n    }\n   \
    \ return Union_std_vector_std_string__long(count);\n}\nint main() {\n    auto\
    \ candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\"))\
    \ == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world\
    \ !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"\
    !\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\"\
    )) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\"\
    )) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpufig3g0s.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpufig3g0s.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpufig3g0s.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpufig3g0s.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpufig3g0s.cpp:\
    \ In function 'int main()':\n/tmp/tmpufig3g0s.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpufig3g0s.cpp:2:\n/tmp/tmpufig3g0s.cpp:51:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpufig3g0s.cpp:51:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpufig3g0s.cpp:51:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpufig3g0s.cpp:51:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> words;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        int count = 0;\n        for (int i = 0; i < txt.size();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n  \
    \              count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeoa4tmt7.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpeoa4tmt7.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpeoa4tmt7.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpeoa4tmt7.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpeoa4tmt7.cpp:\
    \ In function 'int main()':\n/tmp/tmpeoa4tmt7.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeoa4tmt7.cpp:2:\n/tmp/tmpeoa4tmt7.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpeoa4tmt7.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpeoa4tmt7.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpeoa4tmt7.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ v;\n        std::stringstream ss(txt);\n        std::string word;\n        while\
    \ (std::getline(ss, word, ' ')) {\n            v.push_back(word);\n        }\n\
    \        return Union_std_vector_std_string__long(v);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> v;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            v.push_back(word);\n        }\n        return Union_std_vector_std_string__long(v);\n\
    \    } else {\n        int count = 0;\n        for (int i = 0; i < txt.length();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n  \
    \              count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtmvb1hd.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmphtmvb1hd.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphtmvb1hd.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmphtmvb1hd.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmphtmvb1hd.cpp:\
    \ In function 'int main()':\n/tmp/tmphtmvb1hd.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphtmvb1hd.cpp:2:\n/tmp/tmphtmvb1hd.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmphtmvb1hd.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmphtmvb1hd.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmphtmvb1hd.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::string word;\n    for\
    \ (char c : txt) {\n        if (c == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else if (c == ',') {\n            words.push_back(word);\n\
    \            word = \"\";\n            break;\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if (word != \"\") {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    int count = 0;\n    for (char c : txt) {\n        if (c - 'a' < 26\
    \ && c - 'a' >= 0 && (c - 'a') % 2 == 1) {\n            count++;\n        }\n\
    \    }\n    return Union_std_vector_std_string__long(count);\n}\nint main() {\n\
    \    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ewq2va.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp69ewq2va.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp69ewq2va.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp69ewq2va.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp69ewq2va.cpp:\
    \ In function 'Union_std_vector_std_string__long split_words(std::string)':\n\
    /tmp/tmp69ewq2va.cpp:27:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : txt) {\n                   ^\n/tmp/tmp69ewq2va.cpp:46:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : txt) {\n                   ^\n/tmp/tmp69ewq2va.cpp: In function 'int main()':\n\
    /tmp/tmp69ewq2va.cpp:54:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = split_words;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ewq2va.cpp:2:\n/tmp/tmp69ewq2va.cpp:55:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp69ewq2va.cpp:55:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp69ewq2va.cpp:55:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ def"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> words;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        long count = 0;\n        for (int i = 0; i < txt.size();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n  \
    \              count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5eugagst.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp5eugagst.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp5eugagst.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp5eugagst.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp5eugagst.cpp:\
    \ In function 'int main()':\n/tmp/tmp5eugagst.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5eugagst.cpp:2:\n/tmp/tmp5eugagst.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp5eugagst.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp5eugagst.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmp5eugagst.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> words;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        long count = 0;\n        for (int i = 0; i < txt.size();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n  \
    \              count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5eugagst.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp5eugagst.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp5eugagst.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp5eugagst.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp5eugagst.cpp:\
    \ In function 'int main()':\n/tmp/tmp5eugagst.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5eugagst.cpp:2:\n/tmp/tmp5eugagst.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp5eugagst.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp5eugagst.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmp5eugagst.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> words;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        long count = 0;\n        for (long i = 0; i < txt.size();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n  \
    \              count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6_ishdy.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpe6_ishdy.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpe6_ishdy.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpe6_ishdy.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpe6_ishdy.cpp:\
    \ In function 'int main()':\n/tmp/tmpe6_ishdy.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe6_ishdy.cpp:2:\n/tmp/tmpe6_ishdy.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpe6_ishdy.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpe6_ishdy.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpe6_ishdy.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::string word;\n    std::stringstream\
    \ stream(txt);\n    while (stream >> word) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream stream2(txt);\n    while (std::getline(stream2,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    if (words.size() >\
    \ 0) {\n        return Union_std_vector_std_string__long(words);\n    }\n    int\
    \ count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] >=\
    \ 'a' && txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n   \
    \ }\n    return Union_std_vector_std_string__long(count);\n}\nint main() {\n \
    \   auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6m_ke9to.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp6m_ke9to.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp6m_ke9to.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp6m_ke9to.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp6m_ke9to.cpp:\
    \ In function 'int main()':\n/tmp/tmp6m_ke9to.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6m_ke9to.cpp:2:\n/tmp/tmp6m_ke9to.cpp:51:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp6m_ke9to.cpp:51:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp6m_ke9to.cpp:51:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmp6m_ke9to.cpp:51:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(\" \") != std::string::npos) {\n        return std::vector<std::string>(std::istream_iterator<std::string>(std::istringstream(txt)\
    \ >> std::ws), std::istream_iterator<std::string>());\n    } else if (txt.find(\"\
    ,\") != std::string::npos) {\n        return std::vector<std::string>(std::istream_iterator<std::string>(std::istringstream(txt)\
    \ >> std::ws), std::istream_iterator<std::string>());\n    } else {\n        long\
    \ count = 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i]\
    \ - 'a' % 2 == 1) {\n                count++;\n            }\n        }\n    \
    \    return count;\n    }\n}\nint main() {\n    auto candidate = split_words;\n\
    \    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\"))\
    \ == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world\
    \ !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"\
    !\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\"\
    )) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\"\
    )) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_86nes1r.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp_86nes1r.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp_86nes1r.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp_86nes1r.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp_86nes1r.cpp:\
    \ In function 'int main()':\n/tmp/tmp_86nes1r.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_86nes1r.cpp:2:\n/tmp/tmp_86nes1r.cpp:41:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp_86nes1r.cpp:41:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp_86nes1r.cpp:41:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmp_86nes1r.cpp:41:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string>\
    \ words = std::vector<std::string>();\n        std::stringstream ss(txt);\n  \
    \      std::string word;\n        while (ss >> word) {\n            words.push_back(word);\n\
    \        }\n        return Union_std_vector_std_string__long(words);\n    } else\
    \ if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string>\
    \ words = std::vector<std::string>();\n        std::stringstream ss(txt);\n  \
    \      std::string word;\n        while (std::getline(ss, word, ',')) {\n    \
    \        words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        int count = 0;\n        for (int i = 0; i < txt.length();\
    \ i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && (i % 2 == 1)) {\n\
    \                count++;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpim_o8_xw.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpim_o8_xw.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpim_o8_xw.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpim_o8_xw.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpim_o8_xw.cpp:\
    \ In function 'int main()':\n/tmp/tmpim_o8_xw.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpim_o8_xw.cpp:2:\n/tmp/tmpim_o8_xw.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpim_o8_xw.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpim_o8_xw.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpim_o8_xw.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::string word;\n    int\
    \ count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] ==\
    \ ' ') {\n            words.push_back(word);\n            word = \"\";\n     \
    \   } else if (txt[i] == ',') {\n            words.push_back(word);\n        \
    \    word = \"\";\n        } else {\n            word += txt[i];\n        }\n\
    \    }\n    if (word != \"\") {\n        words.push_back(word);\n    }\n    if\
    \ (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] - 'a' %\
    \ 2 == 1) {\n            count++;\n        }\n    }\n    return Union_std_vector_std_string__long(count);\n\
    }\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello\
    \ world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlm30t.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpmdvlm30t.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpmdvlm30t.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpmdvlm30t.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpmdvlm30t.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlm30t.cpp:53:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmdvlm30t.cpp:2:\n/tmp/tmpmdvlm30t.cpp:54:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpmdvlm30t.cpp:54:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpmdvlm30t.cpp:54:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpmdvlm30t.cpp:54:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream ss2(txt);\n    std::string word2;\n    while (std::getline(ss2,\
    \ word2, ',')) {\n        words.push_back(word2);\n    }\n    if (words.size()\
    \ > 0) {\n        return Union_std_vector_std_string__long(words);\n    }\n  \
    \  long count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i]\
    \ >= 'a' && txt[i] <= 'z' && (txt[i] - 'a') % 2 == 1) {\n            count++;\n\
    \        }\n    }\n    return Union_std_vector_std_string__long(count);\n}\nint\
    \ main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmr3jty_.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpjmr3jty_.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpjmr3jty_.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpjmr3jty_.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpjmr3jty_.cpp:\
    \ In function 'int main()':\n/tmp/tmpjmr3jty_.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjmr3jty_.cpp:2:\n/tmp/tmpjmr3jty_.cpp:52:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpjmr3jty_.cpp:52:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpjmr3jty_.cpp:52:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpjmr3jty_.cpp:52:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(',')\
    \ != std::string::npos) {\n        std::vector<std::string> words;\n        std::stringstream\
    \ ss(txt);\n        std::string word;\n        while (std::getline(ss, word, ','))\
    \ {\n            words.push_back(word);\n        }\n        return Union_std_vector_std_string__long(words);\n\
    \    } else {\n        int count = 0;\n        for (int i = 0; i < txt.size();\
    \ i++) {\n            if (txt[i] - 'a' % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1yffle_.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpk1yffle_.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpk1yffle_.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpk1yffle_.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpk1yffle_.cpp:\
    \ In function 'int main()':\n/tmp/tmpk1yffle_.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk1yffle_.cpp:2:\n/tmp/tmpk1yffle_.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpk1yffle_.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpk1yffle_.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpk1yffle_.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n\
    \    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream ss2(txt);\n    std::string word2;\n    while (std::getline(ss2,\
    \ word2, ',')) {\n        words.push_back(word2);\n    }\n    if (words.size()\
    \ > 0) {\n        return Union_std_vector_std_string__long(words);\n    }\n  \
    \  long count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i]\
    \ >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n\
    \    }\n    return Union_std_vector_std_string__long(count);\n}\nint main() {\n\
    \    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1dw_mih.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmps1dw_mih.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmps1dw_mih.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmps1dw_mih.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmps1dw_mih.cpp:\
    \ In function 'int main()':\n/tmp/tmps1dw_mih.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps1dw_mih.cpp:2:\n/tmp/tmps1dw_mih.cpp:52:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmps1dw_mih.cpp:52:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmps1dw_mih.cpp:52:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmps1dw_mih.cpp:52:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream ss2(txt);\n    std::string word2;\n    while (std::getline(ss2,\
    \ word2, ',')) {\n        words.push_back(word2);\n    }\n    if (words.size()\
    \ > 0) {\n        return Union_std_vector_std_string__long(words);\n    }\n  \
    \  int count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i]\
    \ >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n\
    \    }\n    return Union_std_vector_std_string__long(count);\n}\nint main() {\n\
    \    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1gl9zec.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpv1gl9zec.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpv1gl9zec.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpv1gl9zec.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpv1gl9zec.cpp:\
    \ In function 'int main()':\n/tmp/tmpv1gl9zec.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1gl9zec.cpp:2:\n/tmp/tmpv1gl9zec.cpp:52:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpv1gl9zec.cpp:52:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpv1gl9zec.cpp:52:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpv1gl9zec.cpp:52:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(\"\
    ,\") != std::string::npos) {\n        std::vector<std::string> words;\n      \
    \  std::stringstream ss(txt);\n        std::string word;\n        while (std::getline(ss,\
    \ word, ',')) {\n            words.push_back(word);\n        }\n        return\
    \ Union_std_vector_std_string__long(words);\n    } else {\n        int count =\
    \ 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i] >=\
    \ 'a' && txt[i] <= 'z' && i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return Union_std_vector_std_string__long(count);\n  \
    \  }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn6yu7c3.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpbn6yu7c3.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpbn6yu7c3.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpbn6yu7c3.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpbn6yu7c3.cpp:\
    \ In function 'int main()':\n/tmp/tmpbn6yu7c3.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbn6yu7c3.cpp:2:\n/tmp/tmpbn6yu7c3.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpbn6yu7c3.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpbn6yu7c3.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpbn6yu7c3.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n\
    \    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return words;\n    }\n    std::stringstream\
    \ ss2(txt);\n    while (std::getline(ss2, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return words;\n    }\n    int count\
    \ = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] >= 'a'\
    \ && txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxkiq9kpc.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpxkiq9kpc.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpxkiq9kpc.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpxkiq9kpc.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpxkiq9kpc.cpp:\
    \ In function 'int main()':\n/tmp/tmpxkiq9kpc.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxkiq9kpc.cpp:2:\n/tmp/tmpxkiq9kpc.cpp:51:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpxkiq9kpc.cpp:51:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpxkiq9kpc.cpp:51:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpxkiq9kpc.cpp:51:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> words;\n    std::stringstream ss(txt);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    if (words.size() > 0) {\n        return Union_std_vector_std_string__long(words);\n\
    \    }\n    std::stringstream ss2(txt);\n    std::string word2;\n    while (std::getline(ss2,\
    \ word2, ',')) {\n        words.push_back(word2);\n    }\n    if (words.size()\
    \ > 0) {\n        return Union_std_vector_std_string__long(words);\n    }\n  \
    \  long count = 0;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i]\
    \ >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n            count++;\n        }\n\
    \    }\n    return Union_std_vector_std_string__long(count);\n}\nint main() {\n\
    \    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgc7aahop.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmpgc7aahop.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpgc7aahop.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmpgc7aahop.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmpgc7aahop.cpp:\
    \ In function 'int main()':\n/tmp/tmpgc7aahop.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgc7aahop.cpp:2:\n/tmp/tmpgc7aahop.cpp:52:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmpgc7aahop.cpp:52:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmpgc7aahop.cpp:52:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmpgc7aahop.cpp:52:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string>\
    \ words;\n        std::stringstream ss(txt);\n        std::string word;\n    \
    \    while (ss >> word) {\n            words.push_back(word);\n        }\n   \
    \     return Union_std_vector_std_string__long(words);\n    } else if (txt.find(\"\
    ,\") != std::string::npos) {\n        std::vector<std::string> words;\n      \
    \  std::stringstream ss(txt);\n        std::string word;\n        while (std::getline(ss,\
    \ word, ',')) {\n            words.push_back(word);\n        }\n        return\
    \ Union_std_vector_std_string__long(words);\n    } else {\n        long count\
    \ = 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i]\
    \ >= 'a' && txt[i] <= 'z' && i % 2 == 0) {\n                count++;\n       \
    \     }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
    Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"\
    world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vc2z3xl.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmp4vc2z3xl.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp4vc2z3xl.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmp4vc2z3xl.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmp4vc2z3xl.cpp:\
    \ In function 'int main()':\n/tmp/tmp4vc2z3xl.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4vc2z3xl.cpp:2:\n/tmp/tmp4vc2z3xl.cpp:53:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmp4vc2z3xl.cpp:53:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmp4vc2z3xl.cpp:53:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmp4vc2z3xl.cpp:53:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
    \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
    \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1)\
    \ {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string>\
    \ f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n       \
    \ return f1 == f ;\n    }\n};\n// Given a string of words, return a list of words\
    \ split on whitespace, if no whitespaces exists in the text you\n// should split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ...\
    \ ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n//\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n\
    // >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string\
    \ txt) {\n    std::vector<std::string> v;\n    std::stringstream ss(txt);\n  \
    \  std::string word;\n    while (ss >> word) {\n        v.push_back(word);\n \
    \   }\n    if (v.size() == 0) {\n        int count = 0;\n        for (int i =\
    \ 0; i < txt.size(); i++) {\n            if (txt[i] - 'a' < 26 && txt[i] - 'a'\
    \ >= 0) {\n                if (i % 2 == 0) {\n                    count++;\n \
    \               }\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n\
    \    }\n    return Union_std_vector_std_string__long(v);\n}\nint main() {\n  \
    \  auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) ==\
    \ std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n\
    \    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"\
    }));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"\
    Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\"\
    )) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"\
    aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplkewjfee.cpp:4:30: error: member 'std::vector<std::basic_string<char>\
    \ > Union_std_vector_std_string__long::f0' with constructor not allowed in union\n\
    \     std::vector<std::string> f0;\n                              ^\n/tmp/tmplkewjfee.cpp:4:30:\
    \ error: member 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with destructor not allowed in union\n/tmp/tmplkewjfee.cpp:4:30: error: member\
    \ 'std::vector<std::basic_string<char> > Union_std_vector_std_string__long::f0'\
    \ with copy assignment operator not allowed in union\n/tmp/tmplkewjfee.cpp:4:30:\
    \ note: unrestricted unions only available with -std=c++11 or -std=gnu++11\n/tmp/tmplkewjfee.cpp:\
    \ In function 'int main()':\n/tmp/tmplkewjfee.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = split_words;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplkewjfee.cpp:2:\n/tmp/tmplkewjfee.cpp:46:38: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hello world!\"\
    )) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"\
    }));\n                                      ^\n/tmp/tmplkewjfee.cpp:46:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                            ^\n/tmp/tmplkewjfee.cpp:46:113: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"\
    Hello\", (std::string)\"world!\"}));\n                                       \
    \                                                                          ^\n\
    /tmp/tmplkewjfee.cpp:46:113: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by defaul"
  stdout: ''
