name: HumanEval_105_by_length
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
  \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
  \ array, and then replace each digit by its corresponding name from\n// \"One\"\
  , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
  .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
  \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If\
  \ the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
  // (std::vector<std::string>())\n// If the array has any strange number ignore it:\n\
  // >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"\
  One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n \
  \   assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
  One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
  \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
  Eight\", (std::string)\"Four\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    std::vector<long> temp;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        switch (temp[i]) {\n            case 1:\n\
    \                result.push_back(\"One\");\n                break;\n        \
    \    case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> result;\n    std::map<long, std::string> map;\n   \
    \ map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4]\
    \ = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"\
    Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "  std::vector<std::string> result;\n  std::vector<long> sorted;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      sorted.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  for (int i = sorted.size()\
    \ - 1; i >= 0; i--) {\n    switch (sorted[i]) {\n      case 1:\n        result.push_back(\"\
    One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n \
    \       break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n\
    \      case 4:\n        result.push_back(\"Four\");\n        break;\n      case\
    \ 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n   \
    \     result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"\
    Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n\
    \        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    std::vector<long>\
    \ temp;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        switch (temp[i]) {\n            case 1:\n\
    \                result.push_back(\"One\");\n                break;\n        \
    \    case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> result;\n    std::vector<std::string> numbers = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i]\
    \ - 1]);\n        }\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<std::string> result;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            result.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n    \
    \        result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n     \
    \       result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n      \
    \      result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n     \
    \       result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n     \
    \       result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n     \
    \       result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n      \
    \      result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n     \
    \       result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n    \
    \        result.push_back(\"Nine\");\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"\
    Two\";\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\"\
    ;\n    map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n \
    \   map[9] = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto\
    \ i = arr.rbegin(); i != arr.rend(); i++) {\n        if (*i < 1 || *i > 9) {\n\
    \            continue;\n        }\n        result.push_back(map[*i]);\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            result.push_back(map[arr[i]]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<std::string> res;\n    std::map<long, std::string>\
    \ map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n\
    \    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7]\
    \ = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto\
    \ i : arr) {\n        if (i > 0 && i < 10) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> result;\n    std::vector<long>\
    \ sorted_arr;\n    std::map<long, std::string> map_of_numbers;\n    map_of_numbers[1]\
    \ = \"One\";\n    map_of_numbers[2] = \"Two\";\n    map_of_numbers[3] = \"Three\"\
    ;\n    map_of_numbers[4] = \"Four\";\n    map_of_numbers[5] = \"Five\";\n    map_of_numbers[6]\
    \ = \"Six\";\n    map_of_numbers[7] = \"Seven\";\n    map_of_numbers[8] = \"Eight\"\
    ;\n    map_of_numbers[9] = \"Nine\";\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            sorted_arr.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    for\
    \ (int i = sorted_arr.size() - 1; i >= 0; i--) {\n        result.push_back(map_of_numbers[sorted_arr[i]]);\n\
    \    }\n    return result;", "    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "  std::vector<std::string> res;\n  std::map<long,\
    \ std::string> m = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"\
    },\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"\
    },\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n    if (*it >= 1 &&\
    \ *it <= 9) {\n      res.push_back(m[*it]);\n    }\n  }\n  return res;", "   \
    \ std::vector<std::string> result;\n    std::vector<std::string> numbers = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(numbers[arr[i]\
    \ - 1]);\n        }\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;", "    std::vector<std::string> result;\n    std::vector<long>\
    \ temp;\n    std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2]\
    \ = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"\
    Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\"\
    ;\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i = temp.size()\
    \ - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::vector<std::string>\
    \ numbers = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           result.push_back(numbers[arr[i] - 1]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    std::vector<std::string> numbers = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            result.push_back(numbers[arr[i] - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::vector<long> temp;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (int i =\
    \ 0; i < temp.size(); i++) {\n        switch (temp[i]) {\n            case 1:\n\
    \                result.push_back(\"One\");\n                break;\n        \
    \    case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> res;\n    std::vector<std::string> nums = {\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    };\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            res.push_back(nums[arr[i]\
    \ - 1]);\n        }\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;", "    std::vector<std::string> result;\n    std::vector<std::string> numbers\
    \ = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it > 0 && *it < 10) {\n            result.push_back(numbers[*it\
    \ - 1]);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
