language: cpp
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(auto i : lst){\n        if(i > 0 && (int)i\
    \ == i && i%2 != 0){\n            sum += i*i;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzphjln9l.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpzphjln9l.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst){\n              ^\n/tmp/tmpzphjln9l.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmpzphjln9l.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpzphjln9l.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpzphjln9l.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpzphjln9l.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmpzphjln9l.cpp: In function 'int main()':\n/tmp/tmpzphjln9l.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzphjln9l.cpp:2:\n/tmp/tmpzphjln9l.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpzphjln9l.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpzphjln9l.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpzphjln9l.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpzphjln9l.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpzphjln9l.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kr4bzmm.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1kr4bzmm.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmp1kr4bzmm.cpp: In function 'int main()':\n/tmp/tmp1kr4bzmm.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kr4bzmm.cpp:2:\n/tmp/tmp1kr4bzmm.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1kr4bzmm.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1kr4bzmm.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1kr4bzmm.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1kr4bzmm.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1kr4bzmm.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && (int)lst[i] == lst[i]){\n            if(lst[i] % 2 != 0){\n\
    \                sum += lst[i] * lst[i];\n            }\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jzs0j6f.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1jzs0j6f.cpp:18:25: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n             if(lst[i] % 2 != 0){\n                 \
    \        ^\n/tmp/tmp1jzs0j6f.cpp: In function 'int main()':\n/tmp/tmp1jzs0j6f.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jzs0j6f.cpp:2:\n/tmp/tmp1jzs0j6f.cpp:27:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1jzs0j6f.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1jzs0j6f.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1jzs0j6f.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1jzs0j6f.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1jzs0j6f.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp1jzs0j6f.cpp:2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(auto i : lst){\n        if(i > 0 && i ==\
    \ (int)i && i%2 != 0){\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e_3x66v.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1e_3x66v.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst){\n              ^\n/tmp/tmp1e_3x66v.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmp1e_3x66v.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp1e_3x66v.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp1e_3x66v.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp1e_3x66v.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmp1e_3x66v.cpp: In function 'int main()':\n/tmp/tmp1e_3x66v.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1e_3x66v.cpp:2:\n/tmp/tmp1e_3x66v.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1e_3x66v.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1e_3x66v.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1e_3x66v.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1e_3x66v.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1e_3x66v.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kr4bzmm.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1kr4bzmm.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmp1kr4bzmm.cpp: In function 'int main()':\n/tmp/tmp1kr4bzmm.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kr4bzmm.cpp:2:\n/tmp/tmp1kr4bzmm.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1kr4bzmm.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1kr4bzmm.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1kr4bzmm.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1kr4bzmm.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1kr4bzmm.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 == 1){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1y9sqw9s.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1y9sqw9s.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 == 1){\n                                                            ^\n\
    /tmp/tmp1y9sqw9s.cpp: In function 'int main()':\n/tmp/tmp1y9sqw9s.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1y9sqw9s.cpp:2:\n/tmp/tmp1y9sqw9s.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1y9sqw9s.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1y9sqw9s.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1y9sqw9s.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1y9sqw9s.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1y9sqw9s.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && (int)lst[i] == lst[i]){\n            if(lst[i] % 2 != 0){\n\
    \                sum += lst[i] * lst[i];\n            }\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jzs0j6f.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1jzs0j6f.cpp:18:25: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n             if(lst[i] % 2 != 0){\n                 \
    \        ^\n/tmp/tmp1jzs0j6f.cpp: In function 'int main()':\n/tmp/tmp1jzs0j6f.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jzs0j6f.cpp:2:\n/tmp/tmp1jzs0j6f.cpp:27:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1jzs0j6f.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1jzs0j6f.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1jzs0j6f.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1jzs0j6f.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1jzs0j6f.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp1jzs0j6f.cpp:2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(auto i: lst){\n        if(i > 0 && i == (int)i\
    \ && i%2 != 0){\n            sum += i*i;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgczv9pl.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpwgczv9pl.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst){\n              ^\n/tmp/tmpwgczv9pl.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmpwgczv9pl.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwgczv9pl.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpwgczv9pl.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpwgczv9pl.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmpwgczv9pl.cpp: In function 'int main()':\n/tmp/tmpwgczv9pl.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwgczv9pl.cpp:2:\n/tmp/tmpwgczv9pl.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpwgczv9pl.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpwgczv9pl.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpwgczv9pl.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwgczv9pl.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpwgczv9pl.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 == 1){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1y9sqw9s.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp1y9sqw9s.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 == 1){\n                                                            ^\n\
    /tmp/tmp1y9sqw9s.cpp: In function 'int main()':\n/tmp/tmp1y9sqw9s.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1y9sqw9s.cpp:2:\n/tmp/tmp1y9sqw9s.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp1y9sqw9s.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp1y9sqw9s.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp1y9sqw9s.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1y9sqw9s.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp1y9sqw9s.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && (int)lst[i] == lst[i]){\n            if(lst[i] % 2 == 1){\n\
    \                sum += lst[i] * lst[i];\n            }\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9qop9o.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp2j9qop9o.cpp:18:25: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n             if(lst[i] % 2 == 1){\n                 \
    \        ^\n/tmp/tmp2j9qop9o.cpp: In function 'int main()':\n/tmp/tmp2j9qop9o.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9qop9o.cpp:2:\n/tmp/tmp2j9qop9o.cpp:27:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp2j9qop9o.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp2j9qop9o.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp2j9qop9o.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2j9qop9o.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp2j9qop9o.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp2j9qop9o.cpp:2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i] % 2 != 0){\n            sum\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphrtatqyx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmphrtatqyx.cpp:17:60: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if(lst[i] > 0 && lst[i] == (int)lst[i] && lst[i]\
    \ % 2 != 0){\n                                                            ^\n\
    /tmp/tmphrtatqyx.cpp: In function 'int main()':\n/tmp/tmphrtatqyx.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphrtatqyx.cpp:2:\n/tmp/tmphrtatqyx.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmphrtatqyx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmphrtatqyx.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmphrtatqyx.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmphrtatqyx.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmphrtatqyx.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                "
  stdout: ''
