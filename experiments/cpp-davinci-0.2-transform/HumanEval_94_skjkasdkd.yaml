name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // You need to find the largest prime value and return the sum of its digits.\n\
  // Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
  \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
  \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n\
  // (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8,\
  \ (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1,\
  \ (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1,\
  \ (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163,\
  \ (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n\
  // >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99,\
  \ (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n\
  // (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3,\
  \ (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8,\
  \ (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
  \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
  \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
  \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
  \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
  \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
  \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
  \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
  \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
  \ (long)97, (long)8192}))) == (10));\n}\n"
completions: ["    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        long num = lst[i];\n        if (num == 1) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j <= std::sqrt(num);\
    \ j++) {\n            if (num % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           largest_prime = std::max(largest_prime, num);\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num < 2) {\n            continue;\n        }\n        bool is_prime\
    \ = true;\n        for (long j = 2; j < num; j++) {\n            if (num % j ==\
    \ 0) {\n                is_prime = false;\n                break;\n          \
    \  }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n  \
    \      sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ num = lst[i];\n        if (num < 2) {\n            continue;\n        }\n  \
    \      bool is_prime = true;\n        for (long j = 2; j < num; j++) {\n     \
    \       if (num % j == 0) {\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if (is_prime) {\n            max_prime\
    \ = std::max(max_prime, num);\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n\
    \        if (i > max_prime && is_prime(i)) {\n            max_prime = i;\n   \
    \     }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum +=\
    \ max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long\
    \ max_prime = 0;\n    for (auto x : lst) {\n        bool is_prime = true;\n  \
    \      if (x < 2) {\n            is_prime = false;\n        }\n        for (long\
    \ i = 2; i <= std::sqrt(x); i++) {\n            if (x % i == 0) {\n          \
    \      is_prime = false;\n                break;\n            }\n        }\n \
    \       if (is_prime && x > max_prime) {\n            max_prime = x;\n       \
    \ }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long largest\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest)\
    \ {\n            largest = lst[i];\n        }\n    }\n    long sum = 0;\n    while\
    \ (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\
    \    return sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n     \
    \       bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n\
    \                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       max_prime = std::max(max_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largestPrime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime) {\n      \
    \      bool isPrime = true;\n            for (long j = 2; j < lst[i]; j++) {\n\
    \                if (lst[i] % j == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrime = lst[i];\n            }\n       \
    \ }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;", " \
    \   long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] > largestPrime) {\n            bool isPrime = true;\n         \
    \   for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                largest_prime = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largest = 0;\n    for (auto i : lst) {\n        if (i\
    \ > largest) {\n            largest = i;\n        }\n    }\n    long largest_prime\
    \ = 0;\n    for (long i = largest; i > 1; i--) {\n        bool is_prime = true;\n\
    \        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n     \
    \           is_prime = false;\n                break;\n            }\n       \
    \ }\n        if (is_prime) {\n            largest_prime = i;\n            break;\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool prime = true;\n                for (long j = 3; j < lst[i];\
    \ j += 2) {\n                    if (lst[i] % j == 0) {\n                    \
    \    prime = false;\n                        break;\n                    }\n \
    \               }\n                if (prime) {\n                    largest_prime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    long largestPrime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime)\
    \ {\n            bool isPrime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                largestPrime = lst[i];\n           \
    \ }\n        }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n   \
    \     sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime\
    \ && i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            max_prime\
    \ = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n   \
    \     sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0 && lst[i]\
    \ % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0 && lst[i] % 11 != 0 && lst[i]\
    \ % 13 != 0 && lst[i] % 17 != 0 && lst[i] % 19 != 0 && lst[i] % 23 != 0 && lst[i]\
    \ % 29 != 0 && lst[i] % 31 != 0 && lst[i] % 37 != 0 && lst[i] % 41 != 0 && lst[i]\
    \ % 43 != 0 && lst[i] % 47 != 0 && lst[i] % 53 != 0 && lst[i] % 59 != 0 && lst[i]\
    \ % 61 != 0 && lst[i] % 67 != 0 && lst[i] % 71 != 0 && lst[i] % 73 != 0 && lst[i]\
    \ % 79 != 0 && lst[i] % 83 != 0 && lst[i] % 89 != 0 && lst[i] % 97 != 0) {\n \
    \               largest_prime = lst[i];\n            }\n        }\n    }\n   \
    \ long sum = 0;\n    while (largest_prime != 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max\
    \ = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    std::vector<long> primes;\n    for (long i = 2; i <= max;\
    \ i++) {\n        bool isPrime = true;\n        for (long j = 2; j <= i / 2; j++)\
    \ {\n            if (i % j == 0) {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if (isPrime) {\n         \
    \   primes.push_back(i);\n        }\n    }\n    long maxPrime = 0;\n    for (auto\
    \ i : primes) {\n        if (i > maxPrime) {\n            maxPrime = i;\n    \
    \    }\n    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;"]
stop_tokens:
- "\n}"
