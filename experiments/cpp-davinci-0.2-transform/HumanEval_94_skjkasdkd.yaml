name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // You need to find the largest prime value and return the sum of its digits.\n\
  // Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
  \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
  \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n\
  // (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8,\
  \ (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1,\
  \ (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1,\
  \ (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163,\
  \ (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n\
  // >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99,\
  \ (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n\
  // (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3,\
  \ (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8,\
  \ (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
  \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
  \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
  \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
  \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
  \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
  \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
  \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
  \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
  \ (long)97, (long)8192}))) == (10));\n}\n"
completions: ["    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        long num = lst[i];\n        if (num == 1) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j <= std::sqrt(num);\
    \ j++) {\n            if (num % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           largest_prime = std::max(largest_prime, num);\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num < 2) {\n            continue;\n        }\n        bool is_prime\
    \ = true;\n        for (long j = 2; j < num; j++) {\n            if (num % j ==\
    \ 0) {\n                is_prime = false;\n                break;\n          \
    \  }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n  \
    \      sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ num = lst[i];\n        if (num < 2) {\n            continue;\n        }\n  \
    \      bool is_prime = true;\n        for (long j = 2; j < num; j++) {\n     \
    \       if (num % j == 0) {\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if (is_prime) {\n            max_prime\
    \ = std::max(max_prime, num);\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n\
    \        if (i > max_prime && is_prime(i)) {\n            max_prime = i;\n   \
    \     }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum +=\
    \ max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long\
    \ max_prime = 0;\n    for (auto x : lst) {\n        bool is_prime = true;\n  \
    \      if (x < 2) {\n            is_prime = false;\n        }\n        for (long\
    \ i = 2; i <= std::sqrt(x); i++) {\n            if (x % i == 0) {\n          \
    \      is_prime = false;\n                break;\n            }\n        }\n \
    \       if (is_prime && x > max_prime) {\n            max_prime = x;\n       \
    \ }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long largest\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest)\
    \ {\n            largest = lst[i];\n        }\n    }\n    long sum = 0;\n    while\
    \ (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n\
    \    return sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n     \
    \       bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n\
    \                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       max_prime = std::max(max_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largestPrime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime) {\n      \
    \      bool isPrime = true;\n            for (long j = 2; j < lst[i]; j++) {\n\
    \                if (lst[i] % j == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                largestPrime = lst[i];\n            }\n       \
    \ }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;", " \
    \   long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] > largestPrime) {\n            bool isPrime = true;\n         \
    \   for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                largest_prime = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largest = 0;\n    for (auto i : lst) {\n        if (i\
    \ > largest) {\n            largest = i;\n        }\n    }\n    long largest_prime\
    \ = 0;\n    for (long i = largest; i > 1; i--) {\n        bool is_prime = true;\n\
    \        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n     \
    \           is_prime = false;\n                break;\n            }\n       \
    \ }\n        if (is_prime) {\n            largest_prime = i;\n            break;\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool prime = true;\n                for (long j = 3; j < lst[i];\
    \ j += 2) {\n                    if (lst[i] % j == 0) {\n                    \
    \    prime = false;\n                        break;\n                    }\n \
    \               }\n                if (prime) {\n                    largest_prime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    long largestPrime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime)\
    \ {\n            bool isPrime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                largestPrime = lst[i];\n           \
    \ }\n        }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n   \
    \     sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime\
    \ && i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            max_prime\
    \ = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n   \
    \     sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0 && lst[i]\
    \ % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0 && lst[i] % 11 != 0 && lst[i]\
    \ % 13 != 0 && lst[i] % 17 != 0 && lst[i] % 19 != 0 && lst[i] % 23 != 0 && lst[i]\
    \ % 29 != 0 && lst[i] % 31 != 0 && lst[i] % 37 != 0 && lst[i] % 41 != 0 && lst[i]\
    \ % 43 != 0 && lst[i] % 47 != 0 && lst[i] % 53 != 0 && lst[i] % 59 != 0 && lst[i]\
    \ % 61 != 0 && lst[i] % 67 != 0 && lst[i] % 71 != 0 && lst[i] % 73 != 0 && lst[i]\
    \ % 79 != 0 && lst[i] % 83 != 0 && lst[i] % 89 != 0 && lst[i] % 97 != 0) {\n \
    \               largest_prime = lst[i];\n            }\n        }\n    }\n   \
    \ long sum = 0;\n    while (largest_prime != 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max\
    \ = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    std::vector<long> primes;\n    for (long i = 2; i <= max;\
    \ i++) {\n        bool isPrime = true;\n        for (long j = 2; j <= i / 2; j++)\
    \ {\n            if (i % j == 0) {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if (isPrime) {\n         \
    \   primes.push_back(i);\n        }\n    }\n    long maxPrime = 0;\n    for (auto\
    \ i : primes) {\n        if (i > maxPrime) {\n            maxPrime = i;\n    \
    \    }\n    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   largest_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n       \
    \ largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0 &&\
    \ lst[i] % 7 != 0) {\n                largest_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime) {\n            bool is_prime = true;\n      \
    \      for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j ==\
    \ 0) {\n                    is_prime = false;\n                    break;\n  \
    \              }\n            }\n            if (is_prime) {\n               \
    \ max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n  \
    \  while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largest = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            largest\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest > 0) {\n\
    \        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;",
  "  long max_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max_prime) {\n      bool is_prime = true;\n      for (long j = 2; j < lst[i];\
    \ j++) {\n        if (lst[i] % j == 0) {\n          is_prime = false;\n      \
    \    break;\n        }\n      }\n      if (is_prime) {\n        max_prime = lst[i];\n\
    \      }\n    }\n  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime\
    \ % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n   \
    \     if (num <= 1) continue;\n        bool is_prime = true;\n        for (long\
    \ j = 2; j <= std::sqrt(num); j++) {\n            if (num % j == 0) {\n      \
    \          is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            max_prime = std::max(max_prime, num);\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   largest_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n       \
    \ largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n   \
    \     if (num <= 1) {\n            continue;\n        }\n        bool is_prime\
    \ = true;\n        for (long j = 2; j < num; j++) {\n            if (num % j ==\
    \ 0) {\n                is_prime = false;\n                break;\n          \
    \  }\n        }\n        if (is_prime) {\n            largest_prime = std::max(largest_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n \
    \           lst.erase(lst.begin() + i);\n            i--;\n        }\n    }\n\
    \    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n      \
    \  if (lst[i] > max_prime) {\n            max_prime = lst[i];\n        }\n   \
    \ }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == max_prime)\
    \ {\n            lst.erase(lst.begin() + i);\n            i--;\n        }\n  \
    \  }\n    long max_prime_2 = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime_2) {\n            max_prime_2 = lst[i];\n    \
    \    }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ == max_prime_2) {\n            lst.erase(lst.begin() + i);\n            i--;\n\
    \        }\n    }\n    long max_prime_3 = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime_3) {\n            max_prime_3 = lst[i];\n\
    \        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ == max_prime_3) {\n            lst.erase(lst.begin() + i);\n            i--;\n\
    \        }\n    }\n    long max_prime_4 = 0;\n    for (long i = 0;", "    long\
    \ largest = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > largest) {\n            largest = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest\
    \ /= 10;\n    }\n    return sum;", "  long max_prime = 0;\n  for (long i = 0;\
    \ i < lst.size(); i++) {\n    long num = lst[i];\n    if (num < 2) {\n      continue;\n\
    \    }\n    bool is_prime = true;\n    for (long j = 2; j < num; j++) {\n    \
    \  if (num % j == 0) {\n        is_prime = false;\n        break;\n      }\n \
    \   }\n    if (is_prime) {\n      max_prime = std::max(max_prime, num);\n    }\n\
    \  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime % 10;\n\
    \    max_prime /= 10;\n  }\n  return sum;", "  // Your code here\n  long max =\
    \ 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n      max\
    \ = lst[i];\n    }\n  }\n  long sum = 0;\n  while(max > 0){\n    sum += max %\
    \ 10;\n    max /= 10;\n  }\n  return sum;", "    long max = 0;\n    for (auto\
    \ i : lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n\
    \    bool isPrime[max + 1];\n    memset(isPrime, true, sizeof(isPrime));\n   \
    \ for (long p = 2; p * p <= max; p++) {\n        if (isPrime[p] == true) {\n \
    \           for (long i = p * 2; i <= max; i += p)\n                isPrime[i]\
    \ = false;\n        }\n    }\n    long maxPrime = 0;\n    for (long p = 2; p <=\
    \ max; p++) {\n        if (isPrime[p]) {\n            maxPrime = p;\n        }\n\
    \    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;", "  long max = 0;\n\
    \  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max\
    \ = lst[i];\n    }\n  }\n  long sum = 0;\n  while (max > 0) {\n    sum += max\
    \ % 10;\n    max /= 10;\n  }\n  return sum;", "    long largestPrime = 0;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    long max = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max != 0) {\n        sum += max\
    \ % 10;\n        max /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n   \
    \     if (num > max_prime) {\n            bool is_prime = true;\n            for\
    \ (long j = 2; j < num; j++) {\n                if (num % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = num;\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "  std::vector<long> primes;\n  for (auto i\
    \ : lst) {\n    bool isPrime = true;\n    for (auto j : primes) {\n      if (i\
    \ % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if\
    \ (isPrime) {\n      primes.push_back(i);\n    }\n  }\n  long maxPrime = 0;\n\
    \  for (auto i : primes) {\n    if (i > maxPrime) {\n      maxPrime = i;\n   \
    \ }\n  }\n  long sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n\
    \    maxPrime /= 10;\n  }\n  return sum;", "  long max = 0;\n  for (auto i : lst)\
    \ {\n    if (i > max) {\n      max = i;\n    }\n  }\n  std::vector<long> primes;\n\
    \  for (long i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (long\
    \ j = 2; j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (auto i : primes) {\n    if (i > maxPrime)\
    \ {\n      maxPrime = i;\n    }\n  }\n  long sum = 0;\n  while (maxPrime > 0)\
    \ {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return sum;", "  \
    \  long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] > largestPrime) {\n            bool isPrime = true;\n         \
    \   for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num > max_prime) {\n       \
    \     bool is_prime = true;\n            for (long j = 2; j < num; j++) {\n  \
    \              if (num % j == 0) {\n                    is_prime = false;\n  \
    \                  break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = num;\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n\
    \            bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++)\
    \ {\n                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = lst[i];\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0 &&\
    \ lst[i] % 7 != 0) {\n                largest_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool is_prime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ is_prime = false;\n                        break;\n                    }\n \
    \               }\n                if (is_prime) {\n                    largest_prime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    std::vector<long>\
    \ primes;\n    for (auto i : lst) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        if (i == 1) {\n            continue;\n        }\n        if\
    \ (i == 2) {\n            primes.push_back(i);\n            continue;\n      \
    \  }\n        bool is_prime = true;\n        for (auto j : primes) {\n       \
    \     if (i % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long max_prime = 0;\n    for (auto i : primes) {\n    \
    \    if (i > max_prime) {\n            max_prime = i;\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n      \
    \  if (num == 0) {\n            continue;\n        }\n        bool is_prime =\
    \ true;\n        for (long j = 2; j <= std::sqrt(num); j++) {\n            if\
    \ (num % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n  \
    \      sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime\
    \ && i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            max_prime\
    \ = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n   \
    \     sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            long j = 2;\n            while (j <= lst[i]\
    \ / 2) {\n                if (lst[i] % j == 0) {\n                    break;\n\
    \                }\n                j++;\n            }\n            if (j > lst[i]\
    \ / 2) {\n                max_prime = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long largest_prime =\
    \ 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 !=\
    \ 0) {\n                bool isPrime = true;\n                for (long j = 3;\
    \ j <= sqrt(lst[i]); j += 2) {\n                    if (lst[i] % j == 0) {\n \
    \                       isPrime = false;\n                        break;\n   \
    \                 }\n                }\n                if (isPrime) {\n     \
    \               largestPrime = lst[i];\n                }\n            }\n   \
    \     }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum\
    \ += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n     \
    \   long num = lst[i];\n        if (num == 1) {\n            continue;\n     \
    \   }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++) {\n\
    \            if (num % j == 0) {\n                is_prime = false;\n        \
    \        break;\n            }\n        }\n        if (is_prime) {\n         \
    \   largest_prime = std::max(largest_prime, num);\n        }\n    }\n    long\
    \ sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "  long max_prime = 0;\n\
    \  for (auto i : lst) {\n    if (i > max_prime) {\n      bool is_prime = true;\n\
    \      for (long j = 2; j < i; j++) {\n        if (i % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    max_prime = i;\n      }\n    }\n  }\n  long sum = 0;\n  while (max_prime\
    \ > 0) {\n    sum += max_prime % 10;\n    max_prime /= 10;\n  }\n  return sum;",
  "    // your code here\n    long largest = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > largest){\n            largest = lst[i];\n      \
    \  }\n    }\n    long sum = 0;\n    while(largest != 0){\n        sum += largest\
    \ % 10;\n        largest /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (auto i : lst) {\n        if (i < 2) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < i; j++)\
    \ {\n            if (i % j == 0) {\n                is_prime = false;\n      \
    \          break;\n            }\n        }\n        if (is_prime) {\n       \
    \     largest_prime = i;\n        }\n    }\n    long sum = 0;\n    while (largest_prime\
    \ > 0) {\n        sum += largest_prime % 10;\n        largest_prime /= 10;\n \
    \   }\n    return sum;", "  long max = 0;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  long sum\
    \ = 0;\n  while (max > 0) {\n    sum += max % 10;\n    max /= 10;\n  }\n  return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i < 2)\
    \ continue;\n        bool is_prime = true;\n        for (long j = 2; j * j <=\
    \ i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           max_prime = std::max(max_prime, i);\n        }\n    }\n    long ans\
    \ = 0;\n    while (max_prime) {\n        ans += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return ans;", "    long max = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max\
    \ % 10;\n        max /= 10;\n    }\n    return sum;", "    long max = 0;\n   \
    \ for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n      \
    \      max = lst[i];\n        }\n    }\n    for (int i = max; i > 0; i--) {\n\
    \        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n       \
    \     if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            int sum = 0;\n\
    \            while (i > 0) {\n                sum += i % 10;\n               \
    \ i /= 10;\n            }\n            return sum;\n        }\n    }\n    return\
    \ 0;", "  long largest_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n\
    \    if (lst[i] > largest_prime) {\n      bool is_prime = true;\n      for (long\
    \ j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    largest_prime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while (largest_prime\
    \ > 0) {\n    sum += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return\
    \ sum;", "  long largest_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n\
    \    long num = lst[i];\n    if (num == 0) {\n      continue;\n    }\n    bool\
    \ is_prime = true;\n    for (long j = 2; j < num; j++) {\n      if (num % j ==\
    \ 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime)\
    \ {\n      largest_prime = std::max(largest_prime, num);\n    }\n  }\n  long sum\
    \ = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n    largest_prime\
    \ /= 10;\n  }\n  return sum;", "    long largest_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n         \
    \   bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n \
    \               if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long maxPrime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > maxPrime) {\n            bool isPrime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                maxPrime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (maxPrime > 0)\
    \ {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < i; j++)\
    \ {\n                if (i % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = i;\n            }\n        }\n   \
    \ }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long max_prime = 0;\n    for (auto x : lst) {\n        if\
    \ (x > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ i = 2; i < x; i++) {\n                if (x % i == 0) {\n                  \
    \  is_prime = false;\n                    break;\n                }\n        \
    \    }\n            if (is_prime) {\n                max_prime = x;\n        \
    \    }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n   \
    \     sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "  // Your code here\n  long largest = 0;\n  for(int i = 0; i < lst.size(); i++){\n\
    \    if(lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  int sum = 0;\n\
    \  while(largest > 0){\n    sum += largest % 10;\n    largest /= 10;\n  }\n  return\
    \ sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime) {\n            max_prime = lst[i];\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "  long largest =\
    \ 0;\n  for (auto i : lst) {\n    if (i > largest) {\n      largest = i;\n   \
    \ }\n  }\n  long sum = 0;\n  while (largest > 0) {\n    sum += largest % 10;\n\
    \    largest /= 10;\n  }\n  return sum;", "    long largest_prime = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n\
    \            bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++)\
    \ {\n                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    std::vector<long> primes;\n    for(int i = 2; i <= max; i++){\n     \
    \   bool prime = true;\n        for(int j = 2; j < i; j++){\n            if(i\
    \ % j == 0){\n                prime = false;\n                break;\n       \
    \     }\n        }\n        if(prime){\n            primes.push_back(i);\n   \
    \     }\n    }\n    long largest = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        if(primes[i] > largest){\n            largest = primes[i];\n        }\n\
    \    }\n    long sum = 0;\n    while(largest > 0){\n        sum += largest % 10;\n\
    \        largest /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n\
    \    for (auto i : lst) {\n        if (i > largest_prime && i % 2 != 0 && i %\
    \ 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            largest_prime = i;\n    \
    \    }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "  long maxPrime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    long num =\
    \ lst[i];\n    if (num <= 1) {\n      continue;\n    }\n    bool isPrime = true;\n\
    \    for (long j = 2; j <= num / 2; j++) {\n      if (num % j == 0) {\n      \
    \  isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
    \  maxPrime = std::max(maxPrime, num);\n    }\n  }\n  long sum = 0;\n  while (maxPrime\
    \ > 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "  long max_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n \
    \   if (lst[i] > max_prime) {\n      bool is_prime = true;\n      for (long j\
    \ = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    max_prime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while (max_prime\
    \ > 0) {\n    sum += max_prime % 10;\n    max_prime /= 10;\n  }\n  return sum;",
  "  long max_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max_prime) {\n      bool is_prime = true;\n      for (long j = 2; j < lst[i];\
    \ j++) {\n        if (lst[i] % j == 0) {\n          is_prime = false;\n      \
    \    break;\n        }\n      }\n      if (is_prime) {\n        max_prime = lst[i];\n\
    \      }\n    }\n  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime\
    \ % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        bool is_prime = true;\n\
    \        for (long j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0)\
    \ {\n                is_prime = false;\n                break;\n            }\n\
    \        }\n        if (is_prime && lst[i] > max_prime) {\n            max_prime\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n\
    \        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ num = lst[i];\n        if (num < 2) {\n            continue;\n        }\n  \
    \      bool is_prime = true;\n        for (long j = 2; j < num; j++) {\n     \
    \       if (num % j == 0) {\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if (is_prime) {\n            max_prime\
    \ = std::max(max_prime, num);\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime && lst[i] > 1) {\n            bool is_prime\
    \ = true;\n            for (long j = 2; j < lst[i]; j++) {\n                if\
    \ (lst[i] % j == 0) {\n                    is_prime = false;\n               \
    \     break;\n                }\n            }\n            if (is_prime) {\n\
    \                max_prime = lst[i];\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n      \
    \  if (num > max_prime) {\n            bool is_prime = true;\n            for\
    \ (long j = 2; j < num; j++) {\n                if (num % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = num;\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime) {\n            bool is_prime = true;\n      \
    \      for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j ==\
    \ 0) {\n                    is_prime = false;\n                    break;\n  \
    \              }\n            }\n            if (is_prime) {\n               \
    \ max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n  \
    \  while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "  long largest_prime = 0;\n  for (long i =\
    \ 0; i < lst.size(); i++) {\n    if (lst[i] > largest_prime) {\n      bool is_prime\
    \ = true;\n      for (long j = 2; j < lst[i]; j++) {\n        if (lst[i] % j ==\
    \ 0) {\n          is_prime = false;\n          break;\n        }\n      }\n  \
    \    if (is_prime) {\n        largest_prime = lst[i];\n      }\n    }\n  }\n \
    \ long sum = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n\
    \    largest_prime /= 10;\n  }\n  return sum;", "    long largest_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] == 1) {\n                continue;\n            }\n\
    \            bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++)\
    \ {\n                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < i; j++)\
    \ {\n                if (i % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = i;\n            }\n        }\n   \
    \ }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                max_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ // your code here\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime && num > max_prime)\
    \ {\n            max_prime = num;\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       max_prime = std::max(max_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largest = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            largest\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest > 0) {\n\
    \        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   largest_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n       \
    \ largest_prime /= 10;\n    }\n    return sum;", "  long max = 0;\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  long sum = 0;\n  while (max > 0) {\n    sum += max % 10;\n    max\
    \ /= 10;\n  }\n  return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    long sum = 0;\n    for (long i = max; i > 0; i--) {\n        bool\
    \ isPrime = true;\n        for (long j = 2; j < i; j++) {\n            if (i %\
    \ j == 0) {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime) {\n            while (i > 0) {\n   \
    \             sum += i % 10;\n                i /= 10;\n            }\n      \
    \      break;\n        }\n    }\n    return sum;", "    long max = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    long sum = 0;\n    for (long i = 2; i\
    \ <= max; i++) {\n        bool isPrime = true;\n        for (long j = 2; j < i;\
    \ j++) {\n            if (i % j == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        if (isPrime) {\n    \
    \        long n = i;\n            while (n > 0) {\n                sum += n %\
    \ 10;\n                n /= 10;\n            }\n        }\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime) {\n            bool is_prime = true;\n      \
    \      for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j ==\
    \ 0) {\n                    is_prime = false;\n                    break;\n  \
    \              }\n            }\n            if (is_prime) {\n               \
    \ max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n  \
    \  while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long largest_prime =\
    \ 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] % 2 != 0) {\n                bool is_prime = true;\n\
    \                for (long j = 3; j < lst[i]; j++) {\n                    if (lst[i]\
    \ % j == 0) {\n                        is_prime = false;\n                   \
    \     break;\n                    }\n                }\n                if (is_prime)\
    \ {\n                    largest_prime = lst[i];\n                }\n        \
    \    }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "  // your code here\n  long max = 0;\n  for(int i = 0; i < lst.size();\
    \ i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for(int i =\
    \ 2; i < max; i++){\n    for(int j = 0; j < lst.size(); j++){\n      if(lst[j]\
    \ % i == 0){\n        lst[j] = lst[j] / i;\n      }\n    }\n  }\n  long sum =\
    \ 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n      max\
    \ = lst[i];\n    }\n  }\n  while(max > 0){\n    sum += max % 10;\n    max /= 10;\n\
    \  }\n  return sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest_prime) {\n            if (lst[i] == 2)\
    \ {\n                largest_prime = lst[i];\n            } else if (lst[i] %\
    \ 2 != 0) {\n                bool is_prime = true;\n                for (long\
    \ j = 3; j < lst[i]; j++) {\n                    if (lst[i] % j == 0) {\n    \
    \                    is_prime = false;\n                        break;\n     \
    \               }\n                }\n                if (is_prime) {\n      \
    \              largest_prime = lst[i];\n                }\n            }\n   \
    \     }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "  std::vector<long> primes;\n  for (int i = 0; i < lst.size(); i++)\
    \ {\n    bool isPrime = true;\n    for (int j = 2; j < lst[i]; j++) {\n      if\
    \ (lst[i] % j == 0) {\n        isPrime = false;\n        break;\n      }\n   \
    \ }\n    if (isPrime) {\n      primes.push_back(lst[i]);\n    }\n  }\n  long largestPrime\
    \ = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i] > largestPrime)\
    \ {\n      largestPrime = primes[i];\n    }\n  }\n  long sum = 0;\n  while (largestPrime\
    \ > 0) {\n    sum += largestPrime % 10;\n    largestPrime /= 10;\n  }\n  return\
    \ sum;", "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n \
    \       max /= 10;\n    }\n    return sum;", "    long max = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n    \
    \    sum += max % 10;\n        max /= 10;\n    }\n    return sum;", "    long\
    \ max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    std::vector<long> primes;\n    for (long i = 2;\
    \ i <= max; i++) {\n        bool isPrime = true;\n        for (long j = 2; j <\
    \ i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          primes.push_back(i);\n        }\n    }\n    long maxPrime = 0;\n  \
    \  for (auto i : lst) {\n        if (std::find(primes.begin(), primes.end(), i)\
    \ != primes.end()) {\n            if (i > maxPrime) {\n                maxPrime\
    \ = i;\n            }\n        }\n    }\n    long sum = 0;\n    while (maxPrime\
    \ > 0) {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;", "    long largest = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > largest) {\n            largest = lst[i];\n        }\n \
    \   }\n    long sum = 0;\n    while (largest > 0) {\n        sum += largest %\
    \ 10;\n        largest /= 10;\n    }\n    return sum;", "    long max = 0;\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max >\
    \ 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime &&\
    \ is_prime(i)) {\n            max_prime = i;\n        }\n    }\n    long sum =\
    \ 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max\
    \ % 10;\n        max /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                max_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    // Your code here\n    long max=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        if(lst[i]>max)\n        {\n            max=lst[i];\n        }\n\
    \    }\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]==max)\n  \
    \      {\n            lst.erase(lst.begin()+i);\n        }\n    }\n    long max1=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]>max1)\n        {\n\
    \            max1=lst[i];\n        }\n    }\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        if(lst[i]==max1)\n        {\n            lst.erase(lst.begin()+i);\n\
    \        }\n    }\n    long max2=0;\n    for(int i=0;i<lst.size();i++)\n    {\n\
    \        if(lst[i]>max2)\n        {\n            max2=lst[i];\n        }\n   \
    \ }\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]==max2)\n    \
    \    {\n            lst.erase(lst.begin()+i);\n        }\n    }\n    long max3=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]>max3)\n        {\n\
    \            max3=lst[i];\n        }\n    }\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        if(lst[i]==max3)\n        {\n            lst.erase(lst.begin()+i);\n\
    \        }\n    }\n    long max4=0;\n    for(int i=0;i<lst.size();i++)\n    {\n",
  "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 2; i\
    \ < max; i++) {\n        for (int j = 0; j < lst.size(); j++) {\n            if\
    \ (lst[j] % i == 0) {\n                lst[j] = lst[j] / i;\n            }\n \
    \       }\n    }\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n     \
    \   if (lst[i] > 1) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long largestPrime = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] > largestPrime) {\n            if (lst[i]\
    \ % 2 != 0) {\n                bool isPrime = true;\n                for (int\
    \ j = 3; j < lst[i]; j += 2) {\n                    if (lst[i] % j == 0) {\n \
    \                       isPrime = false;\n                        break;\n   \
    \                 }\n                }\n                if (isPrime) {\n     \
    \               largestPrime = lst[i];\n                }\n            }\n   \
    \     }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum\
    \ += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;",
  "  long max_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max_prime) {\n      bool prime = true;\n      for (long j = 2; j < lst[i];\
    \ j++) {\n        if (lst[i] % j == 0) {\n          prime = false;\n         \
    \ break;\n        }\n      }\n      if (prime) {\n        max_prime = lst[i];\n\
    \      }\n    }\n  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime\
    \ % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long largest_prime =\
    \ 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largestPrime = 0;\n    for (auto i : lst) {\n      \
    \  if (i > largestPrime && isPrime(i)) {\n            largestPrime = i;\n    \
    \    }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum\
    \ += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;",
  "    // Your code here\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            if\
    \ (lst[i] % 2 != 0) {\n                bool is_prime = true;\n               \
    \ for (long j = 3; j < lst[i]; j += 2) {\n                    if (lst[i] % j ==\
    \ 0) {\n                        is_prime = false;\n                        break;\n\
    \                    }\n                }\n                if (is_prime) {\n \
    \                   largest_prime = lst[i];\n                }\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    std::vector<long> primes;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        bool is_prime = true;\n        for (long\
    \ j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n            \
    \    is_prime = false;\n                break;\n            }\n        }\n   \
    \     if (is_prime) {\n            primes.push_back(lst[i]);\n        }\n    }\n\
    \    long max_prime = 0;\n    for (long i = 0; i < primes.size(); i++) {\n   \
    \     if (primes[i] > max_prime) {\n            max_prime = primes[i];\n     \
    \   }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num == 0 || num == 1) {\n            continue;\n        }\n     \
    \   bool is_prime = true;\n        for (long j = 2; j <= sqrt(num); j++) {\n \
    \           if (num % j == 0) {\n                is_prime = false;\n         \
    \       break;\n            }\n        }\n        if (is_prime) {\n          \
    \  largest_prime = std::max(largest_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num > max_prime) {\n       \
    \     bool is_prime = true;\n            for (long j = 2; j < num; j++) {\n  \
    \              if (num % j == 0) {\n                    is_prime = false;\n  \
    \                  break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = num;\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n   \
    \ for (auto i : lst) {\n        if (i > max_prime) {\n            bool is_prime\
    \ = true;\n            for (long j = 2; j < i; j++) {\n                if (i %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = i;\n            }\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "  // your code here\n  long max = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n      max = lst[i];\n \
    \   }\n  }\n  long sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max\
    \ /= 10;\n  }\n  return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    long sum = 0;\n    for (long i = 2; i <= max; i++) {\n        bool\
    \ isPrime = true;\n        for (long j = 2; j < i; j++) {\n            if (i %\
    \ j == 0) {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime) {\n            for (long j = 0; j <\
    \ lst.size(); j++) {\n                if (lst[j] == i) {\n                   \
    \ while (i > 0) {\n                        sum += i % 10;\n                  \
    \      i /= 10;\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        long num = lst[i];\n        if (num <= 1)\
    \ {\n            continue;\n        }\n        bool is_prime = true;\n       \
    \ for (long j = 2; j <= std::sqrt(num); j++) {\n            if (num % j == 0)\
    \ {\n                is_prime = false;\n                break;\n            }\n\
    \        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (max_prime) {\n      \
    \  sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] > largestPrime) {\n            bool isPrime = true;\n         \
    \   for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0 || num == 1) {\n  \
    \          continue;\n        }\n        bool is_prime = true;\n        for (long\
    \ j = 2; j < num; j++) {\n            if (num % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            max_prime = std::max(max_prime, num);\n        }\n    }\n   \
    \ long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    std::vector<long> primes;\n\
    \    for (auto i : lst) {\n        if (i == 1) {\n            continue;\n    \
    \    }\n        bool is_prime = true;\n        for (auto j : primes) {\n     \
    \       if (i % j == 0) {\n                is_prime = false;\n               \
    \ break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long largest_prime = 0;\n    for (auto i : primes) {\n\
    \        if (i > largest_prime) {\n            largest_prime = i;\n        }\n\
    \    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num == 1) {\n            continue;\n        }\n        bool is_prime\
    \ = true;\n        for (long j = 2; j < num; j++) {\n            if (num % j ==\
    \ 0) {\n                is_prime = false;\n                break;\n          \
    \  }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n  \
    \      sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    long largest = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            largest\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest > 0) {\n\
    \        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long largestPrime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] == 0) {\n            continue;\n        }\n     \
    \   if (lst[i] == 1) {\n            continue;\n        }\n        if (lst[i] ==\
    \ 2) {\n            largestPrime = 2;\n            continue;\n        }\n    \
    \    if (lst[i] == 3) {\n            largestPrime = 3;\n            continue;\n\
    \        }\n        if (lst[i] == 5) {\n            largestPrime = 5;\n      \
    \      continue;\n        }\n        if (lst[i] == 7) {\n            largestPrime\
    \ = 7;\n            continue;\n        }\n        if (lst[i] % 2 == 0) {\n   \
    \         continue;\n        }\n        if (lst[i] % 3 == 0) {\n            continue;\n\
    \        }\n        if (lst[i] % 5 == 0) {\n            continue;\n        }\n\
    \        if (lst[i] % 7 == 0) {\n            continue;\n        }\n        bool\
    \ isPrime = true;\n        for (long j = 2; j < lst[i]; j++) {\n            if\
    \ (lst[i] % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            largestPrime =\
    \ lst[i];\n        }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n\
    \        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool is_prime = true;\n                for (long j = 3; j < lst[i];\
    \ j += 2) {\n                    if (lst[i] % j == 0) {\n                    \
    \    is_prime = false;\n                        break;\n                    }\n\
    \                }\n                if (is_prime) {\n                    largest_prime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    long largestPrime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largestPrime)\
    \ {\n            bool isPrime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                largestPrime = lst[i];\n           \
    \ }\n        }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n   \
    \     sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return\
    \ sum;", "    // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    long sum = 0;\n    while(max > 0){\n        sum += max % 10;\n      \
    \  max /= 10;\n    }\n    return sum;", "  // Your code here\n  long max = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n      max = lst[i];\n\
    \    }\n  }\n  long sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max\
    \ /= 10;\n  }\n  return sum;", "    // your code here\n    long sum = 0;\n   \
    \ long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] >\
    \ max){\n            max = lst[i];\n        }\n    }\n    for(int i = max; i >\
    \ 0; i--){\n        if(isPrime(i)){\n            sum = sum + i;\n        }\n \
    \   }\n    return sum;", "    long largest = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest) {\n            largest = lst[i];\n   \
    \     }\n    }\n    long sum = 0;\n    while (largest > 0) {\n        sum += largest\
    \ % 10;\n        largest /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num > max_prime) {\n            bool is_prime = true;\n         \
    \   for (long j = 2; j < num; j++) {\n                if (num % j == 0) {\n  \
    \                  is_prime = false;\n                    break;\n           \
    \     }\n            }\n            if (is_prime) {\n                max_prime\
    \ = num;\n            }\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    std::vector<long> primes;\n    for (auto i : lst) {\n  \
    \      bool isPrime = true;\n        for (auto j : primes) {\n            if (i\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long largestPrime = 0;\n    for (auto i : primes) {\n \
    \       if (i > largestPrime) {\n            largestPrime = i;\n        }\n  \
    \  }\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                max_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "  long\
    \ largest_prime = 0;\n  for (auto i : lst) {\n    if (i > largest_prime) {\n \
    \     if (i % 2 == 0) {\n        continue;\n      }\n      bool is_prime = true;\n\
    \      for (long j = 3; j <= std::sqrt(i); j += 2) {\n        if (i % j == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        largest_prime = i;\n      }\n    }\n  }\n  long sum\
    \ = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n    largest_prime\
    \ /= 10;\n  }\n  return sum;", "  long largest_prime = 0;\n  for (long i = 0;\
    \ i < lst.size(); i++) {\n    if (lst[i] > largest_prime) {\n      bool is_prime\
    \ = true;\n      for (long j = 2; j < lst[i]; j++) {\n        if (lst[i] % j ==\
    \ 0) {\n          is_prime = false;\n          break;\n        }\n      }\n  \
    \    if (is_prime) {\n        largest_prime = lst[i];\n      }\n    }\n  }\n \
    \ long sum = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n\
    \    largest_prime /= 10;\n  }\n  return sum;", "  long largest_prime = 0;\n \
    \ for (auto i : lst) {\n    if (i > largest_prime) {\n      if (i % 2 == 0) {\n\
    \        continue;\n      }\n      bool is_prime = true;\n      for (long j =\
    \ 3; j <= i / 2; j += 2) {\n        if (i % j == 0) {\n          is_prime = false;\n\
    \          break;\n        }\n      }\n      if (is_prime) {\n        largest_prime\
    \ = i;\n      }\n    }\n  }\n  long sum = 0;\n  while (largest_prime > 0) {\n\
    \    sum += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ n = lst[i];\n        if (n == 0) {\n            continue;\n        }\n     \
    \   bool is_prime = true;\n        for (long j = 2; j < n; j++) {\n          \
    \  if (n % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ n);\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n    \
    \    sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "  long largest_prime = 0;\n  for (auto i : lst) {\n    if (i\
    \ > largest_prime) {\n      if (i % 2 != 0) {\n        bool prime = true;\n  \
    \      for (long j = 3; j < i; j+=2) {\n          if (i % j == 0) {\n        \
    \    prime = false;\n            break;\n          }\n        }\n        if (prime)\
    \ {\n          largest_prime = i;\n        }\n      }\n    }\n  }\n  long sum\
    \ = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n    largest_prime\
    \ /= 10;\n  }\n  return sum;", "    long largest = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest) {\n            largest =\
    \ lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest > 0) {\n  \
    \      sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;",
  "    long largest_prime = 0;\n    for (auto i : lst) {\n        if (i > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < i; j++)\
    \ {\n                if (i % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = i;\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "  long largest_prime\
    \ = 0;\n  for (auto i : lst) {\n    if (i > largest_prime && is_prime(i)) {\n\
    \      largest_prime = i;\n    }\n  }\n  long sum = 0;\n  while (largest_prime\
    \ > 0) {\n    sum += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return\
    \ sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n\
    \        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num\
    \ = lst[i];\n        if (num > max) {\n            bool isPrime = true;\n    \
    \        for (long j = 2; j < num; j++) {\n                if (num % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                max = num;\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n \
    \       sum += max % 10;\n        max /= 10;\n    }\n    return sum;", '  std::vector<long>
    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
    67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,
    151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
    239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,
    337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,
    433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,
    541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,
    641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,
    743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,
    857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,
    971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051,
    1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
    1153, 1163, 1171, 1181, 1187, 1193, 12', "    long max = 0;\n    for (auto i :\
    \ lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n   \
    \ bool prime[max + 1];\n    memset(prime, true, sizeof(prime));\n    for (long\
    \ p = 2; p * p <= max; p++) {\n        if (prime[p] == true) {\n            for\
    \ (long i = p * 2; i <= max; i += p)\n                prime[i] = false;\n    \
    \    }\n    }\n    long sum = 0;\n    for (auto i : lst) {\n        if (prime[i])\
    \ {\n            sum += i;\n        }\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] % 2 != 0) {\n                bool is_prime = true;\n\
    \                for (long j = 3; j < lst[i]; j += 2) {\n                    if\
    \ (lst[i] % j == 0) {\n                        is_prime = false;\n           \
    \             break;\n                    }\n                }\n             \
    \   if (is_prime) {\n                    largest_prime = lst[i];\n           \
    \     }\n            }\n        }\n    }\n    long sum = 0;\n    while (largest_prime\
    \ > 0) {\n        sum += largest_prime % 10;\n        largest_prime /= 10;\n \
    \   }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        long n = lst[i];\n        if (n < 2) {\n     \
    \       continue;\n        }\n        bool is_prime = true;\n        for (long\
    \ j = 2; j < n; j++) {\n            if (n % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            largest_prime = std::max(largest_prime, n);\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "  long largest_prime\
    \ = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i] > largest_prime)\
    \ {\n      bool is_prime = true;\n      for (long j = 2; j < lst[i]; j++) {\n\
    \        if (lst[i] % j == 0) {\n          is_prime = false;\n          break;\n\
    \        }\n      }\n      if (is_prime) {\n        largest_prime = lst[i];\n\
    \      }\n    }\n  }\n  long sum = 0;\n  while (largest_prime > 0) {\n    sum\
    \ += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return sum;", "   \
    \ long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] > largest_prime) {\n            if (lst[i] % 2 != 0 && lst[i] %\
    \ 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0) {\n                largest_prime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (largest_prime\
    \ > 0) {\n        sum += largest_prime % 10;\n        largest_prime /= 10;\n \
    \   }\n    return sum;", "    // Write your code here\n    long max = 0;\n   \
    \ for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n          \
    \  max = lst[i];\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] == max){\n            lst.erase(lst.begin() + i);\n       \
    \ }\n    }\n    long sum = 0;\n    while(max > 0){\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n        if\
    \ (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n\
    \        for (long j = 2; j <= num / 2; j++) {\n            if (num % j == 0)\
    \ {\n                is_prime = false;\n                break;\n            }\n\
    \        }\n        if (is_prime && num > max_prime) {\n            max_prime\
    \ = num;\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n \
    \       sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime && lst[i] % 2 != 0) {\n            bool is_prime = true;\n\
    \            for (long j = 3; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n     \
    \       if (lst[i] == 1) {\n                continue;\n            }\n       \
    \     bool is_prime = true;\n            for (long j = 2; j <= std::sqrt(lst[i]);\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j <= lst[i] / 2; j++) {\n                if (lst[i]\
    \ % j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long mx = 0;\n    for (auto i : lst) {\n\
    \        if (i > mx) {\n            mx = i;\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for (long i = 2; i <= mx; i++) {\n        bool isPrime = true;\n\
    \        for (long j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    long ans = 0;\n    for (auto i : primes) {\n        ans += i % 10;\n\
    \        ans += i / 10;\n    }\n    return ans;", "    long max = 0;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n          \
    \  max = lst[i];\n        }\n    }\n    for (int i = 2; i < max; i++) {\n    \
    \    for (int j = 0; j < lst.size(); j++) {\n            if (lst[j] % i == 0)\
    \ {\n                lst[j] = lst[j] / i;\n            }\n        }\n    }\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n        if (lst[i] != 1) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                largest_prime = lst[i];\n         \
    \   }\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num > max_prime) {\n       \
    \     bool is_prime = true;\n            for (long j = 2; j < num; j++) {\n  \
    \              if (num % j == 0) {\n                    is_prime = false;\n  \
    \                  break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = num;\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n   \
    \     if (num < 2) {\n            continue;\n        }\n        bool is_prime\
    \ = true;\n        for (long j = 2; j < num; j++) {\n            if (num % j ==\
    \ 0) {\n                is_prime = false;\n                break;\n          \
    \  }\n        }\n        if (is_prime) {\n            largest_prime = std::max(largest_prime,\
    \ num);\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    long largest_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       largest_prime = std::max(largest_prime, num);\n        }\n    }\n    long\
    \ sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n\
    \        largest_prime /= 10;\n    }\n    return sum;", "    long max = 0;\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n   \
    \         max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max >\
    \ 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime) {\n\
    \            bool is_prime = true;\n            for (long j = 2; j < i; j++) {\n\
    \                if (i % j == 0) {\n                    is_prime = false;\n  \
    \                  break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = i;\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long largestPrime = 0;\n\
    \    for (auto i : lst) {\n        if (i > largestPrime) {\n            largestPrime\
    \ = i;\n        }\n    }\n    long sum = 0;\n    while (largestPrime > 0) {\n\
    \        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return\
    \ sum;", "  long largest_prime = 0;\n  for (auto i : lst) {\n    if (i > largest_prime\
    \ && is_prime(i)) {\n      largest_prime = i;\n    }\n  }\n  long sum = 0;\n \
    \ while (largest_prime > 0) {\n    sum += largest_prime % 10;\n    largest_prime\
    \ /= 10;\n  }\n  return sum;", "    std::vector<long> primes;\n    for (auto i\
    \ : lst) {\n        bool is_prime = true;\n        for (auto j : primes) {\n \
    \           if (i % j == 0) {\n                is_prime = false;\n           \
    \     break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long largest_prime = *std::max_element(primes.begin(),\
    \ primes.end());\n    long sum = 0;\n    while (largest_prime > 0) {\n       \
    \ sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "    long largest_prime = 0;\n    for (auto i : lst) {\n        if (i\
    \ < 2) {\n            continue;\n        }\n        bool is_prime = true;\n  \
    \      for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n       \
    \         is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            largest_prime = i;\n        }\n    }\n \
    \   long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime)\
    \ {\n            if (lst[i] % 2 != 0) {\n                if (lst[i] % 3 != 0)\
    \ {\n                    if (lst[i] % 5 != 0) {\n                        if (lst[i]\
    \ % 7 != 0) {\n                            if (lst[i] % 11 != 0) {\n         \
    \                       if (lst[i] % 13 != 0) {\n                            \
    \        if (lst[i] % 17 != 0) {\n                                        if (lst[i]\
    \ % 19 != 0) {\n                                            if (lst[i] % 23 !=\
    \ 0) {\n                                                if (lst[i] % 29 != 0)\
    \ {\n                                                    if (lst[i] % 31 != 0)\
    \ {\n                                                        if (lst[i] % 37 !=\
    \ 0) {\n                                                            if (lst[i]\
    \ % 41 != 0) {\n                                                             \
    \   if (lst[i] % 43 != 0) {\n                                                \
    \                    if (lst[i] % 47 != 0) {\n                               \
    \                                         if (lst[i] % 53 != 0) {\n          \
    \                                                                  if (lst[i]\
    \ % 59 != 0) {\n                                                             \
    \                   if (lst[i] % 61 != 0) {\n                                \
    \                                                    if (lst[i] % 67 != 0) {\n\
    \                                                                            \
    \            if (lst[i] % 71 != 0) {\n                                       \
    \                                                     if (lst[i] % 73 != 0) {\n\
    \                                                                            \
    \                    if (lst[i] % 79 != 0) {\n                               \
    \                                                                     if (lst[i]\
    \ % 83 != 0) {\n                                                             \
    \                                           if (lst[i] % 89 != 0) {\n        \
    \                                                                            \
    \                        if (lst[i] % 97 != 0) {\n                           \
    \                                                                            \
    \         largest_prime = lst[i];\n                                          \
    \                                                                  }\n       \
    \         ", "    // your code here\n    long max = 0;\n    for(int i = 0; i <\
    \ lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n  \
    \      }\n    }\n    std::vector<long> primes;\n    for(int i = 2; i <= max; i++){\n\
    \        bool prime = true;\n        for(int j = 2; j < i; j++){\n           \
    \ if(i % j == 0){\n                prime = false;\n                break;\n  \
    \          }\n        }\n        if(prime){\n            primes.push_back(i);\n\
    \        }\n    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size();\
    \ i++){\n        bool inList = false;\n        for(int j = 0; j < lst.size();\
    \ j++){\n            if(primes[i] == lst[j]){\n                inList = true;\n\
    \                break;\n            }\n        }\n        if(inList){\n     \
    \       if(primes[i] > maxPrime){\n                maxPrime = primes[i];\n   \
    \         }\n        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n \
    \       sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    for (long i = 2;\
    \ i < max; i++) {\n        for (long j = 0; j < lst.size(); j++) {\n         \
    \   if (lst[j] % i == 0) {\n                lst[j] = lst[j] / i;\n           \
    \ }\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \        sum += lst[i];\n    }\n    return sum;", "  long largest_prime = 0;\n\
    \  for (auto i : lst) {\n    if (i > largest_prime && i % 2 != 0 && i % 3 != 0\
    \ && i % 5 != 0 && i % 7 != 0) {\n      largest_prime = i;\n    }\n  }\n  long\
    \ sum = 0;\n  while (largest_prime > 0) {\n    sum += largest_prime % 10;\n  \
    \  largest_prime /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n        bool\
    \ is_prime = true;\n        for (long j = 2; j < num; j++) {\n            if (num\
    \ % j == 0) {\n                is_prime = false;\n                break;\n   \
    \         }\n        }\n        if (is_prime && num > max_prime) {\n         \
    \   max_prime = num;\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max\
    \ /= 10;\n    }\n    return sum;", "    // your code here\n    long max = 0;\n\
    \    for(long i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n      \
    \      max = lst[i];\n        }\n    }\n    std::vector<long> primes;\n    for(long\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(long j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime){\n    \
    \        primes.push_back(i);\n        }\n    }\n    long sum = 0;\n    for(long\
    \ i = 0; i < primes.size(); i++){\n        long temp = primes[i];\n        while(temp\
    \ > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n \
    \   }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                largest_prime = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n    while\
    \ (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;"]
stop_tokens:
- "\n}"
