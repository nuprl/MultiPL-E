name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3,\
  \ (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)5})));\n}\n"
completions: ["    std::vector<long> result;\n    std::unordered_set<long> set;\n\
    \    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n     \
    \       result.push_back(n);\n            set.insert(n);\n        }\n    }\n \
    \   return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            res.push_back(n);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "  std::vector<long> result;\n  std::unordered_set<long> unique_numbers;\n\
    \  for (auto number : numbers) {\n    if (unique_numbers.find(number) == unique_numbers.end())\
    \ {\n      unique_numbers.insert(number);\n      result.push_back(number);\n \
    \   }\n  }\n  return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s(numbers.begin(), numbers.end());\n    for (long i : s) {\n        result.push_back(i);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i])\
    \ == set.end()) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto number : numbers) {\n    if (seen.find(number) == seen.end())\
    \ {\n      result.push_back(number);\n      seen.insert(number);\n    }\n  }\n\
    \  return result;", "    std::vector<long> result;\n    std::set<long> s;\n  \
    \  for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n           \
    \ s.insert(i);\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::unordered_set<long> s;\n   \
    \ for (int i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i]) ==\
    \ s.end()) {\n            s.insert(numbers[i]);\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ int> m;\n    for (int i = 0; i < numbers.size(); i++) {\n        m[numbers[i]]++;\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        if (m[numbers[i]]\
    \ == 1) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::set<long> s;\n    for (auto\
    \ n : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    std::unordered_set<long> s;\n    for (long i :\
    \ numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::set<long> s;\n    for (auto n : numbers) {\n        if (s.count(n)\
    \ == 0) {\n            s.insert(n);\n            result.push_back(n);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n     \
    \   if (s.find(*it) == s.end()) {\n            s.insert(*it);\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto number : numbers) {\n    if (seen.find(number) == seen.end())\
    \ {\n      result.push_back(number);\n      seen.insert(number);\n    }\n  }\n\
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            res.push_back(n);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    std::set<long> s;\n    for (auto\
    \ i : numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::map<long, int> m;\n    for (auto i : numbers)\
    \ {\n        m[i]++;\n    }\n    for (auto i : numbers) {\n        if (m[i] ==\
    \ 1) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  std::set<long>\
    \ s;\n  for (int i = 0; i < numbers.size(); i++) {\n    if (s.find(numbers[i])\
    \ == s.end()) {\n      s.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> result;\n\tstd::unordered_set<long>\
    \ seen;\n\tfor (auto n : numbers) {\n\t\tif (seen.find(n) == seen.end()) {\n\t\
    \t\tresult.push_back(n);\n\t\t\tseen.insert(n);\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto n : numbers) {\n    if (seen.find(n) == seen.end()) {\n \
    \     result.push_back(n);\n      seen.insert(n);\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> s;\n    for (auto i : numbers) {\n        if (s.find(i)\
    \ == s.end()) {\n            s.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto& number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            set.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::unordered_set<long>\
    \ s;\n    for (auto num : numbers) {\n        if (s.find(num) == s.end()) {\n\
    \            s.insert(num);\n            res.push_back(num);\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique;\n    for (auto number : numbers) {\n        if (unique.find(number)\
    \ == unique.end()) {\n            unique.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto& n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "  std::vector<long> result;\n  std::unordered_set<long> seen;\n\
    \  for (long number : numbers) {\n    if (seen.find(number) == seen.end()) {\n\
    \      result.push_back(number);\n      seen.insert(number);\n    }\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::set<long> s;\n  \
    \  for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n           \
    \ s.insert(n);\n            result.push_back(n);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto i : numbers) {\n        if (s.find(i) == s.end()) {\n    \
    \        s.insert(i);\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::unordered_set<long> s;\n   \
    \ std::vector<long> res;\n    for (auto i : numbers) {\n        if (s.find(i)\
    \ == s.end()) {\n            s.insert(i);\n            res.push_back(i);\n   \
    \     }\n    }\n    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::map<long,\
    \ int> m;\n    for (long i : numbers) {\n        m[i]++;\n    }\n    for (long\
    \ i : numbers) {\n        if (m[i] == 1) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            result.push_back(num);\n            set.insert(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::unordered_set<long> s;\n   \
    \ std::vector<long> res;\n    for (auto n : numbers) {\n        if (s.find(n)\
    \ == s.end()) {\n            s.insert(n);\n            res.push_back(n);\n   \
    \     }\n    }\n    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "\tstd::vector<long> result;\n\tstd::unordered_set<long>\
    \ seen;\n\tfor (auto number : numbers) {\n\t\tif (seen.find(number) == seen.end())\
    \ {\n\t\t\tresult.push_back(number);\n\t\t\tseen.insert(number);\n\t\t}\n\t}\n\
    \treturn result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto number : numbers) {\n        if (set.find(number) == set.end())\
    \ {\n            result.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n\
    \            result.push_back(i);\n            set.insert(i);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> s;\n\
    \  for (long i = 0; i < numbers.size(); i++) {\n    if (s.find(numbers[i]) ==\
    \ s.end()) {\n      s.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto n : numbers) {\n    if (seen.find(n) == seen.end()) {\n \
    \     result.push_back(n);\n      seen.insert(n);\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    std::set<long> s;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (s.find(numbers[i]) == s.end()) {\n            s.insert(numbers[i]);\n\
    \            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n    \
    \        s.insert(n);\n            result.push_back(n);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator\
    \ it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator\
    \ it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator\
    \ it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator\
    \ it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator\
    \ it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator\
    \ it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator\
    \ it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator\
    \ it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator\
    \ it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator\
    \ it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator\
    \ it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator\
    \ it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator\
    \ it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator\
    \ it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator\
    \ it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator\
    \ it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator\
    \ it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator\
    \ it38;\n    std::vector<long>::iterator it39;\n    std::vector<", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto number : numbers)\
    \ {\n        if (seen.find(number) == seen.end()) {\n            result.push_back(number);\n\
    \            seen.insert(number);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            result.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
