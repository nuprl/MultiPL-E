name: HumanEval_111_histogram
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
  \ a space separated lowercase letters, return a dictionary\n// of the letter with\
  \ the most repetition and containing the corresponding count.\n// If several letters\
  \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
  a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
  // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
  b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
  a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
  b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
  \ histogram(std::string test) {\n"
tests: "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
  a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1},\
  \ {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"\
  b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
  \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
  }\n"
completions: ["    std::map<std::string,long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;", "    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;"]
stop_tokens:
- "\n}"
