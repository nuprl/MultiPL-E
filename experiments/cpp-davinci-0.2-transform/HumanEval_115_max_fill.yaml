name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <=\
  \ grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0\
  \ | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid,\
  \ long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    long rows = grid.size();\n    long cols = grid[0].size();\n   \
    \ long ans = 0;\n    for(long i = 0; i < rows; i++) {\n        for(long j = 0;\
    \ j < cols; j++) {\n            if(grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for(long k = i; k < rows; k++) {\n              \
    \      if(grid[k][j] == 1) {\n                        grid[k][j] = 0;\n      \
    \              } else {\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    long\
    \ count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0;\
    \ j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n              \
    \  count++;\n            }\n        }\n    }\n    return count / capacity;", " \
    \   // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0;\
    \ j < m; j++){\n            if(grid[i][j] == 1){\n                ans += capacity;\n\
    \            }\n        }\n    }\n    return ans;", "    // your code here\n \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n     \
    \       if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum / capacity;\n        if (sum % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    // your\
    \ code here\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                ans += capacity;\n        \
    \    }\n        }\n    }\n    return ans;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum\
    \ += grid[i][j];\n        }\n        ans += std::max(0l, capacity - sum);\n  \
    \  }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i; k < n; k++) {\n                \
    \    for (long l = j; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            grid[k][l] = 0;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    // your code here\n    long count = 0;\n    for(int i =\
    \ 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;", "    long result = 0;\n    for\
    \ (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size();\
    \ j++) {\n            if (grid[i][j] == 1) {\n                result += capacity;\n\
    \                for (int k = i; k < grid.size(); k++) {\n                   \
    \ if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n          \
    \          } else {\n                        break;\n                    }\n \
    \               }\n            }\n        }\n    }\n    return result;", "   \
    \ // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j\
    \ < m; j++){\n            if(grid[i][j] == 1){\n                ans += capacity;\n\
    \            }\n        }\n    }\n    return ans;", "    long result = 0;\n  \
    \  int n = grid.size();\n    int m = grid[0].size();\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                result += capacity;\n                for (int k = i;\
    \ k < n; k++) {\n                    for (int l = j; l < m; l++) {\n         \
    \               if (grid[k][l] == 1) {\n                            grid[k][l]\
    \ = 0;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;", "    long count = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count * capacity;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                ans++;\n                grid[i][j] = 0;\n                if (i\
    \ + 1 < n && grid[i + 1][j] == 1) {\n                    ans++;\n            \
    \        grid[i + 1][j] = 0;\n                }\n                if (j + 1 < m\
    \ && grid[i][j + 1] == 1) {\n                    ans++;\n                    grid[i][j\
    \ + 1] = 0;\n                }\n            }\n        }\n    }\n    return ans;",
  "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count += capacity;\n            }\n        }\n    }\n    return count;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += std::ceil((double)sum/capacity);\n    }\n    return ans;",
  "    long rows = grid.size();\n    long cols = grid[0].size();\n    long total =\
    \ 0;\n    for (long i = 0; i < rows; i++) {\n        long sum = 0;\n        for\
    \ (long j = 0; j < cols; j++) {\n            sum += grid[i][j];\n        }\n \
    \       total += std::min(sum, capacity);\n    }\n    return total;", "    long\
    \ count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0;\
    \ j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n              \
    \  count++;\n            }\n        }\n    }\n    return count/capacity;", " \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n \
    \           if (grid[i][j] == 1) {\n                grid[i][j] = 0;\n        \
    \        ans++;\n                std::queue<std::pair<long, long>> q;\n      \
    \          q.push({i, j});\n                while (!q.empty()) {\n           \
    \         auto p = q.front();\n                    q.pop();\n                \
    \    long x = p.first;\n                    long y = p.second;\n             \
    \       if (x > 0 && grid[x - 1][y] == 1) {\n                        grid[x -\
    \ 1][y] = 0;\n                        q.push({x - 1, y});\n                  \
    \  }\n                    if (x < n - 1 && grid[x + 1][y] == 1) {\n          \
    \              grid[x + 1][y] = 0;\n                        q.push({x + 1, y});\n\
    \                    }\n                    if (y > 0 && grid[x][y - 1] == 1)\
    \ {\n                        grid[x][y - 1] = 0;\n                        q.push({x,\
    \ y - 1});\n                    }\n                    if (y < m - 1 && grid[x][y\
    \ + 1] == 1) {\n                        grid[x][y + 1] = 0;\n                \
    \        q.push({x, y + 1});\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return ans;", "    long max_fill = 0;\n    for\
    \ (auto row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n\
    \            if (well == 1) {\n                fill += capacity;\n           \
    \ }\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n      \
    \  for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n      \
    \          cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt + capacity\
    \ - 1) / capacity;\n    }\n    return ans;", "    // your code goes here\n   \
    \ int n = grid.size();\n    int m = grid[0].size();\n    int ans = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                ans += capacity;\n                for(int k = i; k <\
    \ n; k++){\n                    for(int l = j; l < m; l++){\n                \
    \        if(grid[k][l] == 1){\n                            grid[k][l] = 0;\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return ans;", "    int n = grid.size();\n    int\
    \ m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++) {\n  \
    \      int sum = 0;\n        for(int j = 0; j < m; j++) {\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum % capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // Your code here\n    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long sum = 0;\n        for(long j = 0; j < m; j++){\n\
    \            sum += grid[i][j];\n        }\n        ans += sum/capacity;\n   \
    \     if(sum%capacity != 0) ans++;\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    return 0;", "    long result = 0;\n    // your code here\n    return result;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        ans +=\
    \ (sum / capacity);\n        if (sum % capacity != 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long count = 0;\n    for(int i = 0;\
    \ i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n \
    \           if(grid[i][j] == 1){\n                count += capacity;\n       \
    \         grid[i][j] = 0;\n            }\n        }\n    }\n    return count;",
  "    long result = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                result += capacity;\n                for (int k = i; k < grid.size();\
    \ k++) {\n                    grid[k][j] = 0;\n                }\n           \
    \ }\n        }\n    }\n    return result;", "    // your code here\n    long count\
    \ = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                grid[i][j]\
    \ = 0;\n                count++;\n                int k = i;\n               \
    \ while(k < grid.size() && capacity > 0){\n                    if(grid[k][j] ==\
    \ 1){\n                        grid[k][j] = 0;\n                        capacity--;\n\
    \                    }\n                    k++;\n                }\n        \
    \        if(capacity == 0){\n                    capacity = 1;\n             \
    \   }\n            }\n        }\n    }\n    return count;", "    long count =\
    \ 0;\n    for(auto i = 0; i < grid.size(); i++){\n        for(auto j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                count\
    \ += capacity;\n                for(auto k = i; k < grid.size(); k++){\n     \
    \               if(grid[k][j] == 1){\n                        grid[k][j] = 0;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;", "    // Your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum % capacity\
    \ != 0){\n            ans++;\n        }\n    }\n    return ans;", "    long rows\
    \ = grid.size();\n    long cols = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < rows; i++) {\n        for(long j = 0; j < cols; j++) {\n        \
    \    if(grid[i][j] == 1) {\n                ans += capacity;\n               \
    \ grid[i][j] = 0;\n            }\n        }\n    }\n    for(long i = 0; i < rows;\
    \ i++) {\n        for(long j = 0; j < cols; j++) {\n            if(grid[i][j]\
    \ == 0) {\n                if(i > 0 && grid[i-1][j] == 1) {\n                \
    \    ans--;\n                    grid[i-1][j] = 0;\n                }\n      \
    \          if(j > 0 && grid[i][j-1] == 1) {\n                    ans--;\n    \
    \                grid[i][j-1] = 0;\n                }\n                if(i <\
    \ rows-1 && grid[i+1][j] == 1) {\n                    ans--;\n               \
    \     grid[i+1][j] = 0;\n                }\n                if(j < cols-1 && grid[i][j+1]\
    \ == 1) {\n                    ans--;\n                    grid[i][j+1] = 0;\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    //\
    \ your code here\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n  \
    \      for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n        }\n\
    \        ans += sum/capacity;\n        if(sum%capacity != 0) ans++;\n    }\n \
    \   return ans;", "    // Your code here\n    long rows = grid.size();\n    long\
    \ cols = grid[0].size();\n    long max_fill = 0;\n    for(long i = 0; i < rows;\
    \ i++){\n        for(long j = 0; j < cols; j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;", "    long result = 0;\n    for (auto row : grid) {\n \
    \       long sum = 0;\n        for (auto cell : row) {\n            sum += cell;\n\
    \        }\n        result += sum / capacity;\n        if (sum % capacity != 0)\
    \ {\n            result++;\n        }\n    }\n    return result;", "    long n\
    \ = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j = 0; j < m;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n       \
    \     }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    // Your\
    \ code here\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n        for(long\
    \ j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                cnt++;\n\
    \            }\n        }\n        ans += cnt/capacity;\n        if(cnt%capacity\
    \ != 0){\n            ans++;\n        }\n    }\n    return ans;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        long fill = 0;\n        for (auto\
    \ well : row) {\n            if (well == 1) {\n                fill++;\n     \
    \       } else {\n                max_fill += fill / capacity;\n             \
    \   fill = 0;\n            }\n        }\n        max_fill += fill / capacity;\n\
    \    }\n    return max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i; k < n; k++) {\n                \
    \    for (long l = j; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            grid[k][l] = 0;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count += capacity;\n                for(int k = i; k <\
    \ grid.size(); k++){\n                    if(grid[k][j] == 1){\n             \
    \           grid[k][j] = 0;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return count;", "    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n         \
    \   sum += grid[i][j];\n        }\n        ans += std::min(sum, capacity);\n \
    \   }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans++;\n\
    \                grid[i][j] = 0;\n                if (i > 0 && grid[i - 1][j]\
    \ == 1) {\n                    grid[i - 1][j] = 0;\n                }\n      \
    \          if (j > 0 && grid[i][j - 1] == 1) {\n                    grid[i][j\
    \ - 1] = 0;\n                }\n                if (i < n - 1 && grid[i + 1][j]\
    \ == 1) {\n                    grid[i + 1][j] = 0;\n                }\n      \
    \          if (j < m - 1 && grid[i][j + 1] == 1) {\n                    grid[i][j\
    \ + 1] = 0;\n                }\n            }\n        }\n    }\n    return ans;",
  "    // your code here\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i+1 < grid.size()){\n                    grid[i+1][j] = 0;\n     \
    \           }\n                if(j+1 < grid[i].size()){\n                   \
    \ grid[i][j+1] = 0;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if(cnt % capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long max_fill = 0;\n    for(auto row : grid){\n\
    \        for(auto col : row){\n            if(col == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    //\
    \ your code here\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n  \
    \      for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n        }\n\
    \        ans += sum / capacity;\n        if(sum % capacity != 0) ans++;\n    }\n\
    \    return ans;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum % capacity\
    \ != 0){\n            ans++;\n        }\n    }\n    return ans;", "    long n\
    \ = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j = 0; j < m;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n       \
    \     }\n        }\n        ans += (cnt / capacity);\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    long count\
    \ = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                count++;\n\
    \            }\n        }\n    }\n    return count * capacity;", "    // your\
    \ code here\n    return 0;", "    // your code goes here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum %\
    \ capacity != 0){\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n\
    \        for (auto well : row) {\n            if (well == 1) {\n             \
    \   fill++;\n            } else {\n                max_fill += fill / capacity;\n\
    \                fill = 0;\n            }\n        }\n        max_fill += fill\
    \ / capacity;\n    }\n    return max_fill;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                ans++;\n                long rem = capacity;\n              \
    \  for (long k = i; k < n && rem > 0; k++) {\n                    for (long l\
    \ = j; l < m && rem > 0; l++) {\n                        if (grid[k][l] == 1)\
    \ {\n                            grid[k][l] = 0;\n                           \
    \ rem--;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return ans;", "    // your code here\n \
    \   long sum = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            sum += grid[i][j];\n        }\n\
    \    }\n    return sum/capacity;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt\
    \ / capacity);\n        if(cnt % capacity != 0){\n            ans++;\n       \
    \ }\n    }\n    return ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for\
    \ (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n           \
    \     cnt++;\n            }\n        }\n        ans += cnt / capacity;\n     \
    \   if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long max_fill = 0;\n    for (auto row : grid) {\n        long fill\
    \ = 0;\n        for (auto well : row) {\n            if (well == 1) {\n      \
    \          fill++;\n            } else {\n                if (fill > 0) {\n  \
    \                  max_fill += fill / capacity;\n                    fill = fill\
    \ % capacity;\n                }\n            }\n        }\n        if (fill >\
    \ 0) {\n            max_fill += fill / capacity;\n            fill = fill % capacity;\n\
    \        }\n    }\n    return max_fill;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                cnt++;\n            }\n        }\n    \
    \    ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                cnt++;\n            }\n        }\n        ans += cnt\
    \ / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n      \
    \  }\n    }\n    return ans;", "    // your code here\n    long count = 0;\n \
    \   for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count/capacity;", "    long result = 0;\n\
    \    // your code here\n    return result;", "    long max_fill = 0;\n    for\
    \ (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size();\
    \ j++) {\n            if (grid[i][j] == 1) {\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;", "    // Your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        if(sum >\
    \ capacity){\n            ans += (sum - capacity);\n        }\n    }\n    return\
    \ ans;", "    long rows = grid.size();\n    long cols = grid[0].size();\n    long\
    \ ans = 0;\n    for(long i = 0; i < rows; i++) {\n        for(long j = 0; j <\
    \ cols; j++) {\n            if(grid[i][j] == 1) {\n                ans += capacity;\n\
    \                for(long k = i; k < rows; k++) {\n                    grid[k][j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return ans;",
  "    // your code here\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for(long i = 0; i < rows; i++){\n        for(long j\
    \ = 0; j < cols; j++){\n            if(grid[i][j] == 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0;\
    \ j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n              \
    \  count++;\n            }\n        }\n    }\n    return count / capacity;", " \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n \
    \           if (grid[i][j] == 1) {\n                ans++;\n                grid[i][j]\
    \ = 0;\n                long c = capacity;\n                while (c > 0) {\n\
    \                    if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n              \
    \          grid[i - 1][j] = 0;\n                        c--;\n               \
    \     }\n                    if (i + 1 < n && grid[i + 1][j] == 1) {\n       \
    \                 grid[i + 1][j] = 0;\n                        c--;\n        \
    \            }\n                    if (j - 1 >= 0 && grid[i][j - 1] == 1) {\n\
    \                        grid[i][j - 1] = 0;\n                        c--;\n \
    \                   }\n                    if (j + 1 < m && grid[i][j + 1] ==\
    \ 1) {\n                        grid[i][j + 1] = 0;\n                        c--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    long max_fill = 0;\n    for (int i = 0; i < grid.size();\
    \ i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    long\
    \ ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                dp[i][j] = 1;\n\
    \                if (i > 0) {\n                    dp[i][j] += dp[i - 1][j];\n\
    \                }\n                if (j > 0) {\n                    dp[i][j]\
    \ += dp[i][j - 1];\n                }\n                if (i > 0 && j > 0) {\n\
    \                    dp[i][j] -= dp[i - 1][j - 1];\n                }\n      \
    \          ans = std::max(ans, dp[i][j]);\n            }\n        }\n    }\n \
    \   return (capacity * ans - 1) / (capacity - 1);", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] ==\
    \ 1) {\n                ans += capacity;\n                grid[i][j] = 0;\n  \
    \          }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = 0; j < m; j++) {\n            if (grid[i][j] == -1) {\n          \
    \      ans += capacity;\n                grid[i][j] = 0;\n            }\n    \
    \    }\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j\
    \ < m; j++) {\n            if (grid[i][j] == -2) {\n                ans += capacity;\n\
    \                grid[i][j] = 0;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == -3) {\n                ans += capacity;\n                grid[i][j]\
    \ = 0;\n            }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == -4) {\n\
    \                ans += capacity;\n                grid[i][j] = 0;\n         \
    \   }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < m; j++) {\n            if (grid[i][j] == -5) {\n                ans\
    \ += capacity;\n                grid[i][j] = 0;\n            }\n        }\n  \
    \  }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++)\
    \ {\n            if (grid[i][j] == -6) {\n", "    int n = grid.size();\n    int\
    \ m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++) {\n  \
    \      int cnt = 0;\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j]\
    \ == 1) {\n                cnt++;\n            }\n        }\n        ans += (cnt\
    \ / capacity);\n        if(cnt % capacity != 0) {\n            ans++;\n      \
    \  }\n    }\n    return ans;", "    // your code here\n    int n = grid.size();\n\
    \    int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        int sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum % capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // your code here\n    long count\
    \ = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n    \
    \        if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    // your code here\n    long count =\
    \ 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count/capacity;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans += (sum\
    \ / capacity);\n        if(sum % capacity != 0){\n            ans++;\n       \
    \ }\n    }\n    return ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n \
    \           if (grid[i][j] == 1) {\n                ans += capacity;\n       \
    \         for (long k = i; k < n; k++) {\n                    grid[k][j] = 0;\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    long\
    \ count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0;\
    \ j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n              \
    \  count += capacity;\n            }\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         if(capacity > 0){\n                    capacity--;\n               \
    \     grid[i][j] = 0;\n                }\n                else{\n            \
    \        count++;\n                    capacity = capacity + grid[i].size() -\
    \ j - 1;\n                    grid[i][j] = 0;\n                }\n           \
    \ }\n        }\n    }\n    return count;", "    long count = 0;\n    for(int i\
    \ = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count += capacity;\n      \
    \      }\n        }\n    }\n    return count;", "    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n         \
    \   sum += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if\
    \ (sum % capacity != 0) {\n            ans++;\n        }\n    }\n    return ans;",
  "    long count = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         grid[i][j] = 0;\n                count++;\n                if(i+1 <\
    \ grid.size()){\n                    if(grid[i+1][j] == 1){\n                \
    \        grid[i+1][j] = 0;\n                        count++;\n               \
    \     }\n                }\n                if(j+1 < grid[i].size()){\n      \
    \              if(grid[i][j+1] == 1){\n                        grid[i][j+1] =\
    \ 0;\n                        count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return count;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] ==\
    \ 1) {\n                ans += capacity;\n                for (long k = i; k <\
    \ n; k++) {\n                    if (grid[k][j] == 1) {\n                    \
    \    grid[k][j] = 0;\n                    } else {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                if(capacity > 0){\n                    grid[i][j] =\
    \ 0;\n                    capacity--;\n                }\n                else{\n\
    \                    count++;\n                    capacity = capacity + grid[i].size()\
    \ - j;\n                    j = -1;\n                }\n            }\n      \
    \  }\n    }\n    return count;", "    int n = grid.size();\n    int m = grid[0].size();\n\
    \    int ans = 0;\n    for(int i = 0; i < n; i++) {\n        int cnt = 0;\n  \
    \      for(int j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n     \
    \           cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if(cnt % capacity != 0) {\n            ans++;\n        }\n    }\n   \
    \ return ans;", "    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long total_water = 0;\n    for (long i = 0; i < rows; i++) {\n        for\
    \ (long j = 0; j < cols; j++) {\n            total_water += grid[i][j];\n    \
    \    }\n    }\n    long total_buckets = total_water / capacity;\n    if (total_water\
    \ % capacity != 0) {\n        total_buckets++;\n    }\n    return total_buckets;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    // your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j\
    \ < m; j++){\n            if(grid[i][j] == 1){\n                ans += capacity;\n\
    \            }\n        }\n    }\n    return ans;", "    // your code here\n \
    \   long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n    }\n    return count / capacity;",
  "    // your code here\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for(long i = 0; i < rows; i++){\n        for(long j\
    \ = 0; j < cols; j++){\n            if(grid[i][j] == 1){\n                count++;\n\
    \                grid[i][j] = 0;\n                if(i - 1 >= 0){\n          \
    \          if(grid[i-1][j] == 1){\n                        count++;\n        \
    \                grid[i-1][j] = 0;\n                    }\n                }\n\
    \                if(i + 1 < rows){\n                    if(grid[i+1][j] == 1){\n\
    \                        count++;\n                        grid[i+1][j] = 0;\n\
    \                    }\n                }\n                if(j - 1 >= 0){\n \
    \                   if(grid[i][j-1] == 1){\n                        count++;\n\
    \                        grid[i][j-1] = 0;\n                    }\n          \
    \      }\n                if(j + 1 < cols){\n                    if(grid[i][j+1]\
    \ == 1){\n                        count++;\n                        grid[i][j+1]\
    \ = 0;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += (cnt + capacity - 1) / capacity;\n \
    \   }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n                if(i+1 < grid.size()){\n    \
    \                grid[i+1][j] = 1;\n                }\n            }\n       \
    \ }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // your code here\n    long count = 0;\n    for(int i =\
    \ 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;", "    // Your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long sum = 0;\n        for(long j = 0; j < m; j++){\n\
    \            sum += grid[i][j];\n        }\n        ans += sum/capacity;\n   \
    \     if(sum%capacity != 0) ans++;\n    }\n    return ans;", "    long count =\
    \ 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \        grid[i][j] = 0;\n                if(i - 1 >= 0 && grid[i - 1][j] == 1){\n\
    \                    grid[i - 1][j] = 0;\n                }\n                if(i\
    \ + 1 < grid.size() && grid[i + 1][j] == 1){\n                    grid[i + 1][j]\
    \ = 0;\n                }\n                if(j - 1 >= 0 && grid[i][j - 1] ==\
    \ 1){\n                    grid[i][j - 1] = 0;\n                }\n          \
    \      if(j + 1 < grid[i].size() && grid[i][j + 1] == 1){\n                  \
    \  grid[i][j + 1] = 0;\n                }\n            }\n        }\n    }\n \
    \   return count;", "    // your code here\n    long count = 0;\n    for(int i\
    \ = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        sum += grid[i][j];\n        }\n        ans += sum / capacity;\n     \
    \   if (sum % capacity != 0) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n   \
    \     for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                if(capacity\
    \ > 1){\n                    for(int k = i; k < grid.size(); k++){\n         \
    \               for(int l = j; l < grid[k].size(); l++){\n                   \
    \         if(grid[k][l] == 1){\n                                grid[k][l] = 0;\n\
    \                                count++;\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count;", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               ans++;\n                grid[i][j] = 0;\n                if (i\
    \ > 0 && grid[i - 1][j] == 1) {\n                    ans++;\n                \
    \    grid[i - 1][j] = 0;\n                }\n                if (j > 0 && grid[i][j\
    \ - 1] == 1) {\n                    ans++;\n                    grid[i][j - 1]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return ans;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += (cnt / capacity);\n        if (cnt %\
    \ capacity != 0) {\n            ans++;\n        }\n    }\n    return ans;", " \
    \   long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n                grid[i][j] = 0;\n                if(i+1 <\
    \ grid.size()){\n                    grid[i+1][j] = 1;\n                }\n  \
    \          }\n        }\n    }\n    return count;", "    // Your code here\n \
    \   long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n \
    \   for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n     \
    \       if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long count = 0;\n    for(int i = 0;\
    \ i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n \
    \           if(grid[i][j] == 1){\n                count += capacity;\n       \
    \     }\n        }\n    }\n    return count;", "    long result = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                result += capacity;\n                for (int k = i + 1; k <\
    \ n; k++) {\n                    if (grid[k][j] == 1) {\n                    \
    \    grid[k][j] = 0;\n                    } else {\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    // Your code here\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n   \
    \     long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity)\
    \ ans++;\n    }\n    return ans;", "    // your code here\n    long count = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                grid[i][j] = 0;\n \
    \               count++;\n                if(i-1 >= 0 && grid[i-1][j] == 1){\n\
    \                    grid[i-1][j] = 0;\n                }\n                if(i+1\
    \ < grid.size() && grid[i+1][j] == 1){\n                    grid[i+1][j] = 0;\n\
    \                }\n                if(j-1 >= 0 && grid[i][j-1] == 1){\n     \
    \               grid[i][j-1] = 0;\n                }\n                if(j+1 <\
    \ grid[i].size() && grid[i][j+1] == 1){\n                    grid[i][j+1] = 0;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long max_fill = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n                grid[i][j] = 0;\n           \
    \     if(i - 1 >= 0){\n                    if(grid[i-1][j] == 1){\n          \
    \              grid[i-1][j] = 0;\n                    }\n                }\n \
    \               if(i + 1 < grid.size()){\n                    if(grid[i+1][j]\
    \ == 1){\n                        grid[i+1][j] = 0;\n                    }\n \
    \               }\n                if(j - 1 >= 0){\n                    if(grid[i][j-1]\
    \ == 1){\n                        grid[i][j-1] = 0;\n                    }\n \
    \               }\n                if(j + 1 < grid[i].size()){\n             \
    \       if(grid[i][j+1] == 1){\n                        grid[i][j+1] = 0;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return count;", "    long times = 0;\n    for (int i = 0; i < grid.size(); i++)\
    \ {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                times++;\n                if (capacity > 1) {\n   \
    \                 for (int k = i; k < grid.size(); k++) {\n                  \
    \      for (int l = j; l < grid[k].size(); l++) {\n                          \
    \  if (grid[k][l] == 1) {\n                                grid[k][l] = 0;\n \
    \                               capacity--;\n                                if\
    \ (capacity == 0) {\n                                    return times;\n     \
    \                           }\n                            }\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return times;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += (sum/capacity);\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;", "    // Your code here\n    long m =\
    \ grid.size();\n    long n = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < m; i++){\n        long sum = 0;\n        for(long j = 0; j < n; j++){\n\
    \            sum += grid[i][j];\n        }\n        ans += (sum / capacity);\n\
    \        if(sum % capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum/capacity);\n        if(sum%capacity != 0) ans++;\n \
    \   }\n    return ans;", "    // your code here\n    long max_fill = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans += (capacity\
    \ - sum);\n    }\n    return ans;", "    // your code here\n    return 0;", " \
    \   long result = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                result += capacity;\n                for (int k = i - 1; k >=\
    \ 0; k--) {\n                    if (grid[k][j] == 1) {\n                    \
    \    break;\n                    }\n                    grid[k][j] = 1;\n    \
    \            }\n            }\n        }\n    }\n    return result;", "    //\
    \ Your code here\n    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n            }\n        }\n    }\n    return count/capacity;",
  "    long rows = grid.size();\n    long cols = grid[0].size();\n    long total_water\
    \ = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long j = 0; j < cols;\
    \ j++) {\n            total_water += grid[i][j];\n        }\n    }\n    long total_buckets\
    \ = rows * cols;\n    long total_bucket_capacity = total_buckets * capacity;\n\
    \    if (total_bucket_capacity < total_water) {\n        return -1;\n    }\n \
    \   long total_buckets_used = total_water / capacity;\n    if (total_water % capacity\
    \ != 0) {\n        total_buckets_used++;\n    }\n    return total_buckets_used;",
  "    long max_fill = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    // your code here\n    long count = 0;\n    for(int i = 0;\
    \ i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n \
    \           if(grid[i][j] == 1){\n                count += capacity;\n       \
    \     }\n        }\n    }\n    return count;", "    long n = grid.size();\n  \
    \  long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cur = 0;\n        for (long j = 0; j < m; j++) {\n         \
    \   if (grid[i][j] == 1) {\n                cur++;\n            }\n        }\n\
    \        ans += cur / capacity;\n        if (cur % capacity != 0) {\n        \
    \    ans++;\n        }\n    }\n    return ans;", "    // Your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long cnt = 0;\n        for(long j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                cnt++;\n            }\n   \
    \     }\n        ans += (cnt / capacity);\n        if(cnt % capacity != 0){\n\
    \            ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans += (sum/capacity);\n\
    \        if(sum%capacity != 0) ans++;\n    }\n    return ans;", "    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j = 0; j < m;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n       \
    \     }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    long max_fill\
    \ = 0;\n    for (long i = 0; i < grid.size(); i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < grid[i].size(); j++) {\n            sum += grid[i][j];\n\
    \        }\n        max_fill += (sum / capacity) + (sum % capacity > 0);\n   \
    \ }\n    return max_fill;", "    long result = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                result += capacity;\n                for\
    \ (long k = i; k < grid.size(); k++) {\n                    if (grid[k][j] ==\
    \ 1) {\n                        grid[k][j] = 0;\n                    } else {\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return result;", "    // your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++){\n            sum += grid[i][j];\n        }\n        ans += sum/capacity;\n\
    \        if(sum%capacity != 0) ans++;\n    }\n    return ans;", "    long n =\
    \ grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j = 0; j < m;\
    \ j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n       \
    \     }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    long sum\
    \ = 0;\n    for (auto i : grid) {\n        for (auto j : i) {\n            sum\
    \ += j;\n        }\n    }\n    return sum / capacity + (sum % capacity != 0);",
  "    // your code here\n    long max_fill_count = 0;\n    for(auto row : grid){\n\
    \        long fill_count = 0;\n        for(auto col : row){\n            if(col\
    \ == 1){\n                fill_count++;\n            }\n        }\n        max_fill_count\
    \ += fill_count / capacity;\n        if(fill_count % capacity != 0){\n       \
    \     max_fill_count++;\n        }\n    }\n    return max_fill_count;", "    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                ans++;\n                long cur = capacity;\n\
    \                for (long k = i; k < n; k++) {\n                    if (grid[k][j]\
    \ == 1) {\n                        cur--;\n                        if (cur ==\
    \ 0) {\n                            break;\n                        }\n      \
    \              }\n                }\n                if (cur > 0) {\n        \
    \            for (long k = i - 1; k >= 0; k--) {\n                        if (grid[k][j]\
    \ == 1) {\n                            cur--;\n                            if\
    \ (cur == 0) {\n                                break;\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \                if (cur > 0) {\n                    for (long k = j + 1; k <\
    \ m; k++) {\n                        if (grid[i][k] == 1) {\n                \
    \            cur--;\n                            if (cur == 0) {\n           \
    \                     break;\n                            }\n                \
    \        }\n                    }\n                }\n                if (cur\
    \ > 0) {\n                    for (long k = j - 1; k >= 0; k--) {\n          \
    \              if (grid[i][k] == 1) {\n                            cur--;\n  \
    \                          if (cur == 0) {\n                                break;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n                if (cur > 0) {\n                    ans\
    \ += cur;\n                }\n            }\n        }\n    }\n    return ans;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n \
    \       for (auto well : row) {\n            if (well == 1) {\n              \
    \  fill++;\n            } else {\n                if (fill > 0) {\n          \
    \          max_fill += fill / capacity;\n                    fill = fill % capacity;\n\
    \                }\n            }\n        }\n        if (fill > 0) {\n      \
    \      max_fill += fill / capacity;\n            fill = fill % capacity;\n   \
    \     }\n    }\n    return max_fill;", "    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n \
    \       long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                cnt++;\n            }\n        }\n    \
    \    ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long sum = 0;\n        for (long j = 0; j < m; j++) {\n            sum +=\
    \ grid[i][j];\n        }\n        ans += (sum + capacity - 1) / capacity;\n  \
    \  }\n    return ans;", "    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                ans += capacity;\n                for (int k = i; k < n; k++)\
    \ {\n                    for (int l = j; l < m; l++) {\n                     \
    \   if (grid[k][l] == 1) {\n                            grid[k][l] = 0;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return ans;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         if (well == 1) {\n                fill += capacity;\n            }\n\
    \        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "\tlong result = 0;\n\tfor (auto i = 0; i < grid.size(); i++) {\n\t\tfor (auto j\
    \ = 0; j < grid[i].size(); j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tresult++;\n\
    \t\t\t\tif (capacity > 1) {\n\t\t\t\t\tfor (auto k = 1; k < capacity; k++) {\n\
    \t\t\t\t\t\tif (i + k < grid.size()) {\n\t\t\t\t\t\t\tgrid[i + k][j] = 0;\n\t\t\
    \t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;", " \
    \   long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         if(capacity > 0){\n                    count++;\n                  \
    \  capacity--;\n                }\n                else{\n                   \
    \ count += 2;\n                    capacity = 1;\n                }\n        \
    \    }\n        }\n    }\n    return count;", "    // Your code here\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long cnt = 0;\n        for(long j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                cnt++;\n            }\n   \
    \     }\n        ans += (cnt / capacity);\n        if(cnt % capacity != 0){\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long result = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    for (long i = 0;\
    \ i < n; i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n\
    \            sum += grid[i][j];\n        }\n        result += sum / capacity;\n\
    \        if (sum % capacity != 0) {\n            result++;\n        }\n    }\n\
    \    return result;", "    long result = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                result += capacity;\n                for\
    \ (long k = i - 1; k >= 0; k--) {\n                    if (grid[k][j] == 1) {\n\
    \                        break;\n                    }\n                    grid[k][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    return result;",
  "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        if(sum > 0){\n            ans += capacity - sum;\n        }\n  \
    \  }\n    return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                for(int k = 0; k < capacity;\
    \ k++){\n                    if(i+k < grid.size()){\n                        grid[i+k][j]\
    \ = 0;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        int k = i;\n                while(k < grid.size() && capacity > 0){\n\
    \                    if(grid[k][j] == 1){\n                        grid[k][j]\
    \ = 0;\n                        capacity--;\n                    }\n         \
    \           k++;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n \
    \       for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;", "    long result = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                result += capacity;\n                for\
    \ (long k = i - 1; k >= 0; k--) {\n                    if (grid[k][j] == 1) {\n\
    \                        result -= capacity;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i; k < n; k++) {\n                \
    \    for (long l = j; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            grid[k][l] = 0;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;", "    // your code here\n    long count = 0;\n    for(int i =\
    \ 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;", "    // Your code here\n    long\
    \ row = grid.size();\n    long col = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < row; i++){\n        long sum = 0;\n        for(long j = 0; j < col;\
    \ j++){\n            sum += grid[i][j];\n        }\n        ans += sum / capacity;\n\
    \        if(sum % capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++)\
    \ {\n            if (grid[i][j] == 1) {\n                ans++;\n            \
    \    grid[i][j] = 0;\n                if (i + 1 < n) {\n                    grid[i\
    \ + 1][j] = std::max(grid[i + 1][j] - capacity, 0l);\n                }\n    \
    \            if (j + 1 < m) {\n                    grid[i][j + 1] = std::max(grid[i][j\
    \ + 1] - capacity, 0l);\n                }\n            }\n        }\n    }\n\
    \    return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n\
    \        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n            }\n        }\n    }\n    return count\
    \ * capacity;", "    // your code here\n    long n = grid.size();\n    long m\
    \ = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n   \
    \     long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto col : row) {\n            if (col\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;", "    // your code here\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n \
    \       long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;", "    // Your code here\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n\
    \    for(long i = 0; i < n; i++){\n        for(long j = 0; j < m; j++){\n    \
    \        if(grid[i][j] == 1){\n                ans += capacity;\n            }\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n   \
    \             ans += capacity;\n                for (long k = i + 1; k < n; k++)\
    \ {\n                    if (grid[k][j] == 1) {\n                        grid[k][j]\
    \ = 0;\n                    } else {\n                        break;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0;\
    \ j < m; j++){\n            if(grid[i][j] == 1){\n                ans += capacity;\n\
    \            }\n        }\n    }\n    return ans;", "    long count = 0;\n   \
    \ for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n    }\n    return count * capacity;", "    long result = 0;\n\
    \    for (auto i = 0; i < grid.size(); i++) {\n        for (auto j = 0; j < grid[i].size();\
    \ j++) {\n            if (grid[i][j] == 1) {\n                result += capacity;\n\
    \                for (auto k = i; k < grid.size(); k++) {\n                  \
    \  if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n         \
    \           } else {\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  for(long i = 0; i < n; i++) {\n        long sum = 0;\n        for(long j =\
    \ 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n        ans +=\
    \ sum / capacity;\n        if(sum % capacity != 0) {\n            ans++;\n   \
    \     }\n    }\n    return ans;", "    long count = 0;\n    for(int i = 0; i <\
    \ grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n     \
    \       if(grid[i][j] == 1){\n                count++;\n            }\n      \
    \  }\n    }\n    return count * capacity;", "    // your code here\n    long rows\
    \ = grid.size();\n    long cols = grid[0].size();\n    long count = 0;\n    for(long\
    \ i = 0; i < rows; i++){\n        for(long j = 0; j < cols; j++){\n          \
    \  if(grid[i][j] == 1){\n                count += capacity;\n            }\n \
    \       }\n    }\n    return count;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                cnt++;\n            }\n        }\n        ans += cnt\
    \ / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n      \
    \  }\n    }\n    return ans;", "    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \    }\n        }\n    }\n    return count;", "    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n                grid[i][j]\
    \ = 0;\n            }\n        }\n    }\n    return count;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        sum += grid[i][j];\n        }\n        ans += std::max(0L, capacity -\
    \ sum);\n    }\n    return ans;", "    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;", "    long result = 0;\n    for (int i = 0; i < grid.size(); i++)\
    \ {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                result += capacity;\n                for (int k = i\
    \ - 1; k >= 0; k--) {\n                    if (grid[k][j] == 1) {\n          \
    \              break;\n                    }\n                    grid[k][j] =\
    \ 1;\n                }\n            }\n        }\n    }\n    return result;",
  "    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n  \
    \  for (long i = 0; i < n; i++) {\n        long cnt = 0;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                cnt++;\n\
    \            }\n        }\n        ans += cnt / capacity;\n        if (cnt % capacity\
    \ != 0) {\n            ans++;\n        }\n    }\n    return ans;", "    long result\
    \ = 0;\n    // your code here\n    return result;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        sum += grid[i][j];\n        }\n        ans += (sum / capacity);\n   \
    \     if (sum % capacity != 0) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for\
    \ (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n        }\n    \
    \    ans += (sum / capacity);\n        if (sum % capacity) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long cnt = 0;\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j]\
    \ == 1) {\n                cnt++;\n            }\n        }\n        ans += cnt\
    \ / capacity;\n        if (cnt % capacity != 0) {\n            ans++;\n      \
    \  }\n    }\n    return ans;", "    // your code here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;",
  "    long result = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for\
    \ (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                result += capacity;\n                for (int k = 0; k < grid.size();\
    \ k++) {\n                    if (grid[k][j] == 1) {\n                       \
    \ grid[k][j] = 0;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return result;", "    long result = 0;\n    for (int i =\
    \ 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++)\
    \ {\n            if (grid[i][j] == 1) {\n                result += capacity;\n\
    \                for (int k = i; k < grid.size(); k++) {\n                   \
    \ if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n          \
    \          } else {\n                        break;\n                    }\n \
    \               }\n            }\n        }\n    }\n    return result;", "   \
    \ // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long cnt = 0;\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if(cnt % capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;", "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += (sum / capacity);\n        if(sum % capacity != 0){\n   \
    \         ans++;\n        }\n    }\n    return ans;", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n    \
    \        if (grid[i][j] == 1) {\n                cnt++;\n            }\n     \
    \   }\n        ans += cnt / capacity;\n        if (cnt % capacity != 0) {\n  \
    \          ans++;\n        }\n    }\n    return ans;", "    // your code here\n\
    \    long count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n    }\n    return count;", '    return
    0;', "    // your code here\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < n; i++){\n        long sum = 0;\n\
    \        for(long j = 0; j < m; j++){\n            sum += grid[i][j];\n      \
    \  }\n        ans += sum/capacity;\n        if(sum%capacity != 0) ans++;\n   \
    \ }\n    return ans;", "    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                long row = i;\n                long col = j;\n  \
    \              while (row < rows && grid[row][col] == 1) {\n                 \
    \   grid[row][col] = 0;\n                    row++;\n                }\n     \
    \       }\n        }\n    }\n    return count * capacity;", "    long count =\
    \ 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \        grid[i][j] = 0;\n                if(i - 1 >= 0 && grid[i - 1][j] == 1){\n\
    \                    grid[i - 1][j] = 0;\n                }\n                if(i\
    \ + 1 < grid.size() && grid[i + 1][j] == 1){\n                    grid[i + 1][j]\
    \ = 0;\n                }\n                if(j - 1 >= 0 && grid[i][j - 1] ==\
    \ 1){\n                    grid[i][j - 1] = 0;\n                }\n          \
    \      if(j + 1 < grid[i].size() && grid[i][j + 1] == 1){\n                  \
    \  grid[i][j + 1] = 0;\n                }\n            }\n        }\n    }\n \
    \   return count;"]
stop_tokens:
- "\n}"
