name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  // zero, and has a frequency greater than or equal to the value of the integer itself.\
  \ \n// The frequency of an integer is the number of times it appears in the list.\n\
  // If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
  \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n//\
  \ (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n\
  // (-1)\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
  \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
  \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
  \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
  \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
  \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
  \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
  \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
  \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
  \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
  \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
  \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1,\
  \ (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1,\
  \ (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3,\
  \ (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9,\
  \ (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
  \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
  \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
  \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
  \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
  \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9,\
  \ (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10,\
  \ (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) ==\
  \ (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7,\
  \ (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1,\
  \ (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9,\
  \ (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2,\
  \ (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7,\
  \ (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
completions: ["    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "\tstd::map<long, long> freq;\n\tfor (long i = 0; i < lst.size(); i++)\
    \ {\n\t\tfreq[lst[i]]++;\n\t}\n\tlong max = -1;\n\tfor (std::map<long, long>::iterator\
    \ it = freq.begin(); it != freq.end(); it++) {\n\t\tif (it->first <= it->second\
    \ && it->first > max) {\n\t\t\tmax = it->first;\n\t\t}\n\t}\n\treturn max;", " \
    \   std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    long max = -1;\n    for (auto i : m) {\n        if (i.first <= i.second &&\
    \ i.first > max) {\n            max = i.first;\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    long max = -1;\n    for (auto i : m) {\n        if (i.first <= i.second &&\
    \ i.first > max) {\n            max = i.first;\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    long max = -1;\n    for (auto i : m) {\n        if (i.first <= i.second &&\
    \ i.first > max) {\n            max = i.first;\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    for (auto i : m) {\n        if (i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::unordered_map<long, long>\
    \ freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : freq) {\n        if (i.first <= i.second && i.first > max)\
    \ {\n            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (auto i: lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto i: freq) {\n        if (i.first <= i.second) {\n      \
    \      ans = std::max(ans, i.first);\n        }\n    }\n    return ans;", "  \
    \  std::map<long, long> m;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   m[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it = m.begin(); it\
    \ != m.end(); it++) {\n        if (it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       ans = std::max(ans, i.first);\n        }\n    }\n    return ans;", " \
    \   std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    long max = -1;\n    for (auto i : freq) {\n  \
    \      if (i.first <= i.second && i.first > max) {\n            max = i.first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> freq;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long\
    \ ans = -1;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n    \
    \    if (it->first <= it->second) {\n            ans = std::max(ans, it->first);\n\
    \        }\n    }\n    return ans;", "    std::map<long, long> freq;\n    for\
    \ (auto i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second && i.first > max) {\n         \
    \   max = i.first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i\
    \ : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> m;\n    for (auto\
    \ i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n    for (auto i : m)\
    \ {\n        if (i.first <= i.second && i.first > max) {\n            max = i.first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for (auto\
    \ i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    long max = -1;\n    for (auto i : m) {\n        if (i.first <= i.second)\
    \ {\n            if (i.first > max) {\n                max = i.first;\n      \
    \      }\n        }\n    }\n    return max;", "    std::map<long, long> m;\n \
    \   for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n   \
    \     if (i.first <= i.second) {\n            return i.first;\n        }\n   \
    \ }\n    return -1;"]
stop_tokens:
- "\n}"
