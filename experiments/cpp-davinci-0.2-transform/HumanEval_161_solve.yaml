name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    if(s.size() == 0) return s;\n    std::string res = \"\";\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n    \
    \        res += toupper(s[i]);\n        } else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if(res == s) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    std::string result;\n    bool has_letter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        has_letter = true;\n            if (isupper(s[i])) {\n              \
    \  result += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!has_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result\
    \ += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      \
    \      result += tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int i = 0;\n    while(i < s.size()\
    \ && !isalpha(s[i])) i++;\n    if(i == s.size()) return std::string(s.rbegin(),\
    \ s.rend());\n    for(int j = 0; j < s.size(); j++) {\n        if(isalpha(s[j]))\
    \ {\n            if(isupper(s[j])) s[j] = tolower(s[j]);\n            else s[j]\
    \ = toupper(s[j]);\n        }\n    }\n    return s;", "    int len = s.length();\n\
    \    if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n   \
    \     }\n    }\n    return s;", "    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            count++;\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(count ==\
    \ 0) {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", "  \
    \  int n = s.size();\n    if(n == 0) return \"\";\n    int i = 0;\n    while(i\
    \ < n && !isalpha(s[i])) i++;\n    if(i == n) return std::string(s.rbegin(), s.rend());\n\
    \    for(int j = i; j < n; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "  std::string result;\n  bool has_letter = false;\n  for\
    \ (char c : s) {\n    if (isalpha(c)) {\n      has_letter = true;\n      if (isupper(c))\
    \ {\n        result += tolower(c);\n      } else {\n        result += toupper(c);\n\
    \      }\n    } else {\n      result += c;\n    }\n  }\n  if (!has_letter) {\n\
    \    std::reverse(result.begin(), result.end());\n  }\n  return result;", "  \
    \  int n = s.size();\n    bool flag = true;\n    for(int i = 0; i < n; i++) {\n\
    \        if(isalpha(s[i])) {\n            flag = false;\n            break;\n\
    \        }\n    }\n    if(flag) {\n        reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n\
    \            }\n            else {\n                s[i] = toupper(s[i]);\n  \
    \          }\n        }\n    }\n    return s;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n    \
    \        } else {\n                s[i] = toupper(s[i]);\n            }\n    \
    \    }\n    }\n    if(count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    std::string result = \"\";\n    bool hasLetter =\
    \ false;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            hasLetter = true;\n            result += s[i]\
    \ - 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            hasLetter\
    \ = true;\n            result += s[i] + 32;\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int n = s.size();\n    if(n\
    \ == 0) return \"\";\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;", "    int flag = 0;\n   \
    \ for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n       \
    \     flag = 1;\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    if(flag == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int len = s.length();\n    int i = 0;\n    while(i\
    \ < len && !isalpha(s[i]))\n        i++;\n    if(i == len)\n        reverse(s.begin(),\
    \ s.end());\n    else{\n        for(int j = 0; j < len; j++){\n            if(isalpha(s[j])){\n\
    \                if(islower(s[j]))\n                    s[j] = toupper(s[j]);\n\
    \                else\n                    s[j] = tolower(s[j]);\n           \
    \ }\n        }\n    }\n    return s;", "    std::string result;\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ if(len == 0)\n        return s;\n    for(int i = 0; i < len; i++) {\n      \
    \  if(s[i] >= 'a' && s[i] <= 'z')\n            s[i] = s[i] - 32;\n        else\
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = s[i] + 32;\n    }\n    return\
    \ s;", "    if (s.size() == 0) return \"\";\n    std::string res = \"\";\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n           \
    \ res += s[i];\n        }\n    }\n    if (res == s) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    int len = s.length();\n    if(len\
    \ == 0) return s;\n    int i = 0;\n    while(i < len && !isalpha(s[i])) i++;\n\
    \    if(i == len) return std::string(s.rbegin(), s.rend());\n    for(int j = i;\
    \ j < len; j++) {\n        if(isalpha(s[j])) {\n            if(islower(s[j]))\
    \ s[j] = toupper(s[j]);\n            else s[j] = tolower(s[j]);\n        }\n \
    \   }\n    return s;", "    std::string result;\n    if (s.size() == 0) {\n  \
    \      return result;\n    }\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    return result;",
  "    int n = s.size();\n    if(n == 0) return \"\";\n    std::string ans = \"\"\
    ;\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            ans += s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n            ans += s[i] - 'A' + 'a';\n        } else {\n           \
    \ ans += s[i];\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
