name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
  \ True if all keys are strings in lower \n// case or all keys are strings in upper\
  \ case, else return False.\n// The function should return False is the given dictionary\
  \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if(dict.size() == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.size() == 0) return false;\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') all_upper = false;\n        if(it->first[0] >=\
    \ 'A' && it->first[0] <= 'Z') all_lower = false;\n    }\n    return all_lower\
    \ || all_upper;", "    if(dict.size()==0)\n        return false;\n    bool is_lower=true;\n\
    \    bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(isupper(it->first[0]))\n            is_lower=false;\n        else\n\
    \            is_upper=false;\n    }\n    return (is_lower || is_upper);", "  \
    \  if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(islower(it->first[0])) upper = false;\n        if(isupper(it->first[0]))\
    \ lower = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower = true;\n    for(auto i:dict){\n   \
    \     if(isupper(i.first[0])){\n            is_lower = false;\n            break;\n\
    \        }\n    }\n    for(auto i:dict){\n        if(is_lower){\n            if(isupper(i.first[0]))\n\
    \                return false;\n        }\n        else{\n            if(islower(i.first[0]))\n\
    \                return false;\n        }\n    }\n    return true;", "  if (dict.size()\
    \ == 0) {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper\
    \ = true;\n  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first.length()\
    \ == 0) {\n      return false;\n    }\n    if (it->first[0] < 'a' || it->first[0]\
    \ > 'z') {\n      all_lower = false;\n    }\n    if (it->first[0] < 'A' || it->first[0]\
    \ > 'Z') {\n      all_upper = false;\n    }\n  }\n  return all_lower || all_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0])){\n\
    \            for(int i=0;i<it->first.length();i++){\n                if(!islower(it->first[i])){\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else if(isupper(it->first[0])){\n     \
    \       for(int i=0;i<it->first.length();i++){\n                if(!isupper(it->first[i])){\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else{\n            flag=false;\n      \
    \      break;\n        }\n    }\n    return flag;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool upper = true;\n    bool lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ upper = false;\n        if(!islower(it->first[0])) lower = false;\n    }\n \
    \   return upper || lower;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        if(islower(it->first[0])) is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0) return false;\n    bool is_upper = false;\n\
    \    bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n    }\n    return is_upper ^ is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return false;\n\
    \    std::map<std::string,std::string>::iterator it;\n    bool flag=true;\n  \
    \  for(it=dict.begin();it!=dict.end();it++){\n        if(it->first[0]>='a' &&\
    \ it->first[0]<='z'){\n            for(int i=0;i<it->first.length();i++){\n  \
    \              if(it->first[i]<'a' || it->first[i]>'z'){\n                   \
    \ flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else if(it->first[0]>='A' && it->first[0]<='Z'){\n       \
    \     for(int i=0;i<it->first.length();i++){\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z'){\n                    flag=false;\n                   \
    \ break;\n                }\n            }\n        }\n        else{\n       \
    \     flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool upper = true;\n    bool lower\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            upper = false;\n\
    \        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n           \
    \ lower = false;\n        } else {\n            return false;\n        }\n   \
    \ }\n    return upper || lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool all_lower = true;\n \
    \   bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            all_upper = false;\n\
    \        if(!islower(it->first[0]))\n            all_lower = false;\n    }\n \
    \   return all_lower || all_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first.length() == 0) return false;\n\
    \        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower\
    \ = true;\n        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n \
    \           is_upper = true;\n        } else {\n            return false;\n  \
    \      }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   if (isupper(it->first[0])) {\n            is_upper = true;\n        } else\
    \ if (islower(it->first[0])) {\n            is_lower = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_upper ^ is_lower;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     all_upper = false;\n        } else if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            all_lower = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return all_lower || all_upper;", "  if (dict.size()\
    \ == 0) {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper\
    \ = true;\n  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n      all_upper = false;\n    } else if (it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z') {\n      all_lower = false;\n    } else {\n \
    \     return false;\n    }\n  }\n  return all_lower || all_upper;", "    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (isupper(it->first[0])) {\n          \
    \  is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0) {\n     \
    \   return false;\n    }\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first.size()\
    \ == 0) {\n            return false;\n        }\n        if (islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if (isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower != is_upper;", "\tif (dict.size() == 0)\
    \ return false;\n\tbool lower = true;\n\tbool upper = true;\n\tfor (auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n\t\tif (it->first[0] >= 'a' && it->first[0]\
    \ <= 'z') {\n\t\t\tupper = false;\n\t\t} else if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n\t\t\tlower = false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn (lower || upper);", "    if (dict.size() == 0) {\n        return false;\n\
    \    }\n    bool is_lower = true;\n    bool is_upper = true;\n    for (auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if (it->first.size() == 0)\
    \ {\n            return false;\n        }\n        if (is_lower && !islower(it->first[0]))\
    \ {\n            is_lower = false;\n        }\n        if (is_upper && !isupper(it->first[0]))\
    \ {\n            is_upper = false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_upper =\
    \ true;\n    bool is_lower = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (isupper(it->first[0])) {\n            is_lower = false;\n\
    \        } else {\n            is_upper = false;\n        }\n    }\n    return\
    \ is_upper || is_lower;", "    if (dict.size() == 0) {\n        return false;\n\
    \    }\n    bool is_lower = false;\n    bool is_upper = false;\n    for (auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if (isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool lower = true;\n    bool upper = true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            upper = false;\n        } else if (isupper(it->first[0])) {\n\
    \            lower = false;\n        } else {\n            return false;\n   \
    \     }\n    }\n    return lower || upper;", "    if (dict.size() == 0) {\n  \
    \      return false;\n    }\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if\
    \ (it->first.size() == 0) {\n            return false;\n        }\n        if\
    \ (it->first[0] >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n\
    \        } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n          \
    \  all_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if (dict.size() == 0) {\n  \
    \      return false;\n    }\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if\
    \ (it->first[0] < 'a' || it->first[0] > 'z') {\n            all_lower = false;\n\
    \        }\n        if (it->first[0] < 'A' || it->first[0] > 'Z') {\n        \
    \    all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool lower = true;\n\
    \    bool upper = true;\n    for (auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if (it->first[0] < 'a' || it->first[0] > 'z') {\n            lower\
    \ = false;\n        }\n        if (it->first[0] < 'A' || it->first[0] > 'Z') {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;", " \
    \   if (dict.size() == 0) {\n        return false;\n    }\n    bool is_upper =\
    \ true;\n    bool is_lower = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        std::string key = it->first;\n        for (int i = 0; i < key.length();\
    \ i++) {\n            if (isupper(key[i])) {\n                is_lower = false;\n\
    \            }\n            if (islower(key[i])) {\n                is_upper =\
    \ false;\n            }\n        }\n    }\n    return is_upper || is_lower;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     is_lower = true;\n        } else if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            is_upper = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    bool all_lower = true;\n    bool\
    \ all_upper = true;\n    for (auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        std::string key = it->first;\n        if (key.size() == 0) {\n  \
    \          return false;\n        }\n        for (int i = 0; i < key.size(); i++)\
    \ {\n            if (isupper(key[i])) {\n                all_lower = false;\n\
    \            }\n            if (islower(key[i])) {\n                all_upper\
    \ = false;\n            }\n        }\n    }\n    return all_lower || all_upper;",
  "    if (dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (it->first.size() == 0) return false;\n        if (it->first[0] >= 'a' &&\
    \ it->first[0] <= 'z') {\n            all_upper = false;\n        } else if (it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z') {\n            all_lower = false;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return all_lower ||\
    \ all_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n  \
    \  bool upper = true;\n    bool lower = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            upper = false;\n        }\n        if (it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            lower = false;\n        }\n    }\n  \
    \  return upper || lower;", "    if (dict.size() == 0) {\n        return false;\n\
    \    }\n    bool is_lower = false;\n    bool is_upper = false;\n    for (auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (it->first.size() ==\
    \ 0) {\n            return false;\n        }\n        if (islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if (isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  for (int i = 0; i < it->first.length(); i++) {\n            if (islower(it->first[i]))\
    \ {\n                all_upper = false;\n            } else if (isupper(it->first[i]))\
    \ {\n                all_lower = false;\n            } else {\n              \
    \  return false;\n            }\n        }\n    }\n    return all_lower || all_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (isupper(it->first[0])) {\n            is_upper = true;\n\
    \        } else if (islower(it->first[0])) {\n            is_lower = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool all_lower = true;\n    bool all_upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first.size() == 0) {\n          \
    \  return false;\n        }\n        if (it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            all_upper = false;\n        } else if (it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            all_lower = false;\n        } else {\n\
    \            return false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if (dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (it->first[0] < 'a' || it->first[0] > 'z') is_lower = false;\n        if\
    \ (it->first[0] < 'A' || it->first[0] > 'Z') is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if (dict.size() == 0) {\n        return false;\n\
    \    }\n    bool is_lower = true;\n    bool is_upper = true;\n    for (auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if (it->first.size() == 0)\
    \ {\n            return false;\n        }\n        if (is_lower) {\n         \
    \   for (int i = 0; i < it->first.size(); i++) {\n                if (!islower(it->first[i]))\
    \ {\n                    is_lower = false;\n                    break;\n     \
    \           }\n            }\n        }\n        if (is_upper) {\n           \
    \ for (int i = 0; i < it->first.size(); i++) {\n                if (!isupper(it->first[i]))\
    \ {\n                    is_upper = false;\n                    break;\n     \
    \           }\n            }\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_upper = false;\n\
    \        } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n          \
    \  is_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return is_lower || is_upper;", "    if (dict.size() == 0) {\n    \
    \    return false;\n    }\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else if (islower(it->first[0])) {\n\
    \            is_lower = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_upper ^ is_lower;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  std::string key = it->first;\n        if (key.length() == 0) {\n          \
    \  return false;\n        }\n        for (int i = 0; i < key.length(); i++) {\n\
    \            if (isupper(key[i])) {\n                is_lower = false;\n     \
    \       }\n            if (islower(key[i])) {\n                is_upper = false;\n\
    \            }\n        }\n    }\n    return is_lower || is_upper;", "    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_upper = false;\n\
    \        } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n          \
    \  is_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool upper = true;\n    bool lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            upper = false;\n        if(!islower(it->first[0]))\n            lower\
    \ = false;\n    }\n    return upper || lower;", "    int upper = 0;\n    int lower\
    \ = 0;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if\
    \ (isupper(it->first[0])) {\n            upper++;\n        } else {\n        \
    \    lower++;\n        }\n    }\n    if (upper == 0 || lower == 0) {\n       \
    \ return true;\n    }\n    return false;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) upper = false;\n\
    \        if(isupper(it->first[0])) lower = false;\n    }\n    return lower ||\
    \ upper;", "    if(dict.size()==0) return false;\n    bool is_lower=true;\n  \
    \  bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n \
    \       std::string key=it->first;\n        if(!isupper(key[0])) is_upper=false;\n\
    \        if(!islower(key[0])) is_lower=false;\n    }\n    return is_lower || is_upper;",
  "    if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto i : dict) {\n        if(i.first.size() != 0) {\n     \
    \       if(islower(i.first[0])) {\n                upper = false;\n          \
    \  } else {\n                lower = false;\n            }\n        }\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n            is_upper\
    \ = false;\n        if(!islower(it->first[0]))\n            is_lower = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) upper = false;\n\
    \        if(isupper(it->first[0])) lower = false;\n    }\n    return lower ||\
    \ upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.size() == 0) return false;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            upper = false;\n        } else if(it->first[0] >= 'A' &&\
    \ it->first[0] <= 'Z') {\n            lower = false;\n        } else {\n     \
    \       return false;\n        }\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool is_upper = false;\n   \
    \ bool is_lower = false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(it->first[0]>='a' && it->first[0]<='z')\n            is_lower = true;\n\
    \        else if(it->first[0]>='A' && it->first[0]<='Z')\n            is_upper\
    \ = true;\n        else\n            return false;\n    }\n    if(is_lower &&\
    \ is_upper)\n        return false;\n    return true;", "    if(dict.size() ==\
    \ 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        for(int i = 0; i < key.size(); i++) {\n          \
    \  if(!isupper(key[i])) all_upper = false;\n            if(!islower(key[i])) all_lower\
    \ = false;\n        }\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first.length() == 0)\n            return false;\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            is_lower = is_lower\
    \ && (it->first == std::string(it->first.size(), std::tolower(it->first[0])));\n\
    \        }\n        if(is_upper) {\n            is_upper = is_upper && (it->first\
    \ == std::string(it->first.size(), std::toupper(it->first[0])));\n        }\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool is_lower = true;\n    for(auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_lower\
    \ = false;\n    }\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(is_lower && isupper(it->first[0]))\n            return false;\n  \
    \      if(!is_lower && islower(it->first[0]))\n            return false;\n   \
    \ }\n    return true;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        } else {\n            is_lower = true;\n        }\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "   \
    \ if(dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(islower(it->first[0])) is_upper = false;\n        if(isupper(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool is_upper = true;\n    bool is_lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_upper || is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if(dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n\
    \        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n           \
    \ all_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size()==0)\n       \
    \ return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(it->first[0]>='A' && it->first[0]<='Z'){\n            flag=false;\n\
    \            break;\n        }\n    }\n    if(flag==true){\n        for(auto it=dict.begin();it!=dict.end();it++){\n\
    \            if(it->first[0]>='a' && it->first[0]<='z'){\n                flag=false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else if(isupper(it->first[0]))\n\
    \            lower = false;\n        else\n            return false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) upper = false;\n    \
    \    if(isupper(it->first[0])) lower = false;\n    }\n    return lower || upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper = true;\n        } else {\n\
    \            is_lower = true;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(is_lower) {\n            if(!islower(it->first[0])) is_lower = false;\n \
    \       }\n        if(is_upper) {\n            if(!isupper(it->first[0])) is_upper\
    \ = false;\n        }\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\n\
    \            is_lower = false;\n        if(!isupper(it->first[0]))\n         \
    \   is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z')\n            all_upper = false;\n        else if(it->first[0] >= 'A' &&\
    \ it->first[0] <= 'Z')\n            all_lower = false;\n        else\n       \
    \     return false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower=false;\n    bool is_upper=false;\n \
    \   for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first[0]>='a'\
    \ && it->first[0]<='z')\n            is_lower=true;\n        else if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n            is_upper=true;\n        else\n          \
    \  return false;\n    }\n    if(is_lower && is_upper)\n        return false;\n\
    \    return true;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !islower(it->first[0]))\n\
    \            is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\n\
    \            is_upper = false;\n    }\n    return is_lower || is_upper;", "  \
    \  if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else if(isupper(it->first[0]))\n\
    \            lower = false;\n        else\n            return false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!islower(it->first[0])) all_lower = false;\n\
    \        if(!isupper(it->first[0])) all_upper = false;\n    }\n    return all_lower\
    \ || all_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0])) is_upper = false;\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return (is_upper && !is_lower) || (!is_upper && is_lower);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_upper ^ is_lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_upper = true;\n  \
    \  bool is_lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0]))\n            is_lower = false;\n      \
    \  else\n            is_upper = false;\n    }\n    return is_upper || is_lower;",
  "    if(dict.size() == 0)\n        return false;\n    bool lower = false;\n    bool\
    \ upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(islower(it->first[0]))\n            lower = true;\n        else if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            return false;\n    }\n \
    \   return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_upper = false;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_lower = false;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool is_lower = true;\n    bool\
    \ is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(isupper(it->first[0]))\n            is_lower = false;\n        else\n\
    \            is_upper = false;\n    }\n    return (is_lower || is_upper);", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n            break;\n        }\n        else\
    \ if(isupper(it->first[0])) {\n            is_lower = false;\n            break;\n\
    \        }\n    }\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(is_lower) {\n            if(!islower(it->first[0]))\n            \
    \    return false;\n        }\n        else {\n            if(!isupper(it->first[0]))\n\
    \                return false;\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n        if(!isupper(it->first[0])) is_upper = false;\n  \
    \  }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return lower || upper;",
  "  if (dict.size() == 0) return false;\n  bool lower = true;\n  bool upper = true;\n\
    \  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (islower(it->first[0]))\
    \ upper = false;\n    if (isupper(it->first[0])) lower = false;\n  }\n  return\
    \ lower || upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n  \
    \      else is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);", "    if(dict.size() == 0) return false;\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!is_upper && isupper(it->first[0])) is_upper = true;\n \
    \       if(!is_lower && islower(it->first[0])) is_lower = true;\n    }\n    return\
    \ is_upper ^ is_lower;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool upper = true;\n    bool lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return upper || lower;",
  "    if(dict.size()==0)\n        return false;\n    bool is_lower=true;\n    bool\
    \ is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n       \
    \ if(!isupper(it->first[0]))\n            is_upper=false;\n        if(!islower(it->first[0]))\n\
    \            is_lower=false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ upper = false;\n        if(isupper(it->first[0])) lower = false;\n    }\n  \
    \  return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    int upper = 0, lower = 0;\n    for(auto i : dict) {\n        if(isupper(i.first[0]))\n\
    \            upper++;\n        else if(islower(i.first[0]))\n            lower++;\n\
    \        else\n            return false;\n    }\n    if(upper == 0 || lower ==\
    \ 0)\n        return true;\n    return false;", "\tif(dict.size() == 0)\n\t\t\
    return false;\n\tbool is_lower = false;\n\tbool is_upper = false;\n\tfor(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n\t\tif(isupper(it->first[0]))\
    \ {\n\t\t\tis_upper = true;\n\t\t}\n\t\telse if(islower(it->first[0])) {\n\t\t\
    \tis_lower = true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(is_lower\
    \ && is_upper)\n\t\treturn false;\n\treturn true;", "    if(dict.size()==0)\n\
    \        return false;\n    bool lower=true;\n    bool upper=true;\n    for(auto\
    \ i:dict){\n        if(islower(i.first[0]))\n            upper=false;\n      \
    \  else\n            lower=false;\n    }\n    return lower||upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        is_lower =\
    \ is_lower && (it->first == tolower(it->first));\n        is_upper = is_upper\
    \ && (it->first == toupper(it->first));\n    }\n    return is_lower || is_upper;",
  "    // your code here\n    int lower = 0;\n    int upper = 0;\n    if(dict.size()\
    \ == 0)\n        return false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++)\n    {\n        if(isupper(it->first[0]))\n            upper++;\n    \
    \    else if(islower(it->first[0]))\n            lower++;\n        else\n    \
    \        return false;\n    }\n    if(lower == 0 || upper == 0)\n        return\
    \ true;\n    return false;", "    // Your code here\n    if(dict.size() == 0)\n\
    \        return false;\n    bool flag = true;\n    for(auto i = dict.begin();\
    \ i != dict.end(); i++)\n    {\n        if(i->first[0] >= 'a' && i->first[0] <=\
    \ 'z')\n        {\n            for(int j = 1; j < i->first.length(); j++)\n  \
    \          {\n                if(i->first[j] < 'a' || i->first[j] > 'z')\n   \
    \             {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n        }\n        else if(i->first[0] >= 'A'\
    \ && i->first[0] <= 'Z')\n        {\n            for(int j = 1; j < i->first.length();\
    \ j++)\n            {\n                if(i->first[j] < 'A' || i->first[j] > 'Z')\n\
    \                {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    return flag;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool flag = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            for(int i = 0; i < it->first.size(); i++) {\n               \
    \ if(!islower(it->first[i])) {\n                    flag = false;\n          \
    \          break;\n                }\n            }\n        }\n        else if(isupper(it->first[0]))\
    \ {\n            for(int i = 0; i < it->first.size(); i++) {\n               \
    \ if(!isupper(it->first[i])) {\n                    flag = false;\n          \
    \          break;\n                }\n            }\n        }\n        else {\n\
    \            flag = false;\n            break;\n        }\n    }\n    return flag;",
  "    if(dict.size() == 0)\n        return false;\n    int upper = 0, lower = 0;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            upper++;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            lower++;\n        else\n       \
    \     return false;\n    }\n    if(upper == 0 || lower == 0)\n        return true;\n\
    \    return false;", "    if(dict.size() == 0) return false;\n    bool upper =\
    \ true;\n    bool lower = true;\n    for(auto i : dict) {\n        if(i.first[0]\
    \ >= 'a' && i.first[0] <= 'z') lower = false;\n        if(i.first[0] >= 'A' &&\
    \ i.first[0] <= 'Z') upper = false;\n    }\n    return lower || upper;", "   \
    \ if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!islower(it->first[0])) lower = false;\n        if(!isupper(it->first[0]))\
    \ upper = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper =\
    \ false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return lower || upper;",
  "  if (dict.size() == 0) return false;\n  bool all_lower = true;\n  bool all_upper\
    \ = true;\n  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first.size()\
    \ == 0) return false;\n    if (islower(it->first[0])) all_upper = false;\n   \
    \ if (isupper(it->first[0])) all_lower = false;\n  }\n  return all_lower || all_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) {\n            is_lower = true;\n        } else if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ lower = false;\n        if(!isupper(it->first[0])) upper = false;\n    }\n \
    \   return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n           \
    \ is_lower = true;\n        }\n        else if(isupper(it->first[0])) {\n    \
    \        is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    if(is_lower && is_upper) return false;\n    return true;", "    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (is_lower) {\n            is_lower = is_lower && (it->first == std::string(it->first.size(),\
    \ std::tolower(it->first[0])));\n        }\n        if (is_upper) {\n        \
    \    is_upper = is_upper && (it->first == std::string(it->first.size(), std::toupper(it->first[0])));\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if (dict.size() ==\
    \ 0) {\n        return false;\n    }\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   if (it->first.size() == 0) {\n            return false;\n        }\n     \
    \   if (islower(it->first[0])) {\n            is_lower = true;\n        } else\
    \ if (isupper(it->first[0])) {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (isupper(it->first[0])) {\n            is_upper = true;\n\
    \        } else if (islower(it->first[0])) {\n            is_lower = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool is_lower = true;\n    bool is_upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  is_upper = false;\n        } else if (isupper(it->first[0])) {\n          \
    \  is_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return is_lower || is_upper;", "    if (dict.size() == 0) {\n    \
    \    return false;\n    }\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first.size()\
    \ == 0) {\n            return false;\n        }\n        for (int i = 0; i < it->first.size();\
    \ i++) {\n            if (!isupper(it->first[i])) {\n                all_upper\
    \ = false;\n            }\n            if (!islower(it->first[i])) {\n       \
    \         all_lower = false;\n            }\n        }\n    }\n    return all_lower\
    \ || all_upper;", "    if (dict.size() == 0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if (!isupper(it->first[0])) all_upper = false;\n\
    \        if (!islower(it->first[0])) all_lower = false;\n    }\n    return all_lower\
    \ || all_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        std::string key = it->first;\n        if\
    \ (key.size() == 0) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < key.size(); i++) {\n            if (islower(key[i])) {\n        \
    \        all_upper = false;\n            } else if (isupper(key[i])) {\n     \
    \           all_lower = false;\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return all_lower || all_upper;", "    if\
    \ (dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   if (isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0) {\n     \
    \   return false;\n    }\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else if (islower(it->first[0])) {\n\
    \            is_lower = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool isUpper = false;\n    bool isLower\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   std::string key = it->first;\n        if (key.length() == 0) {\n         \
    \   return false;\n        }\n        if (isupper(key[0])) {\n            isUpper\
    \ = true;\n        } else if (islower(key[0])) {\n            isLower = true;\n\
    \        } else {\n            return false;\n        }\n    }\n    return isUpper\
    \ ^ isLower;", "    if (dict.size() == 0) {\n        return false;\n    }\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  is_lower = true;\n        } else if (isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0) {\n      \
    \  return false;\n    }\n    bool is_lower_case = false;\n    bool is_upper_case\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   std::string key = it->first;\n        if (key.size() == 0) {\n           \
    \ return false;\n        }\n        if (islower(key[0])) {\n            is_lower_case\
    \ = true;\n        } else if (isupper(key[0])) {\n            is_upper_case =\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ is_lower_case ^ is_upper_case;", "    if (dict.size() == 0) {\n        return\
    \ false;\n    }\n    bool is_lower = true;\n    bool is_upper = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (is_lower) {\n\
    \            is_lower = std::all_of(it->first.begin(), it->first.end(), ::islower);\n\
    \        }\n        if (is_upper) {\n            is_upper = std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper);\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first.size() == 0) {\n            return false;\n \
    \       }\n        if (islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if (isupper(it->first[0])) {\n            is_upper = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  is_lower = true;\n        } else if (isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0) {\n      \
    \  return false;\n    }\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n        } else\
    \ if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            is_upper = true;\n\
    \        } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ != is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            all_upper = false;\n        } else if (it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            all_lower = false;\n        } else {\n\
    \            return false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     all_upper = false;\n        } else if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            all_lower = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return all_lower || all_upper;", "    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    bool lower = true;\n    bool upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (it->first[0] < 'a' || it->first[0] > 'z') {\n            lower = false;\n\
    \        }\n        if (it->first[0] < 'A' || it->first[0] > 'Z') {\n        \
    \    upper = false;\n        }\n    }\n    return lower || upper;", "    if (dict.size()\
    \ == 0) return false;\n    bool upper = true;\n    bool lower = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            upper = false;\n        } else\
    \ if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return upper\
    \ || lower;", "    if (dict.size() == 0) {\n        return false;\n    }\n   \
    \ bool is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  is_lower = true;\n        } else if (isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0) {\n      \
    \  return false;\n    }\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        if (is_lower) {\n            is_lower = std::all_of(key.begin(),\
    \ key.end(), ::islower);\n        }\n        if (is_upper) {\n            is_upper\
    \ = std::all_of(key.begin(), key.end(), ::isupper);\n        }\n    }\n    return\
    \ is_lower || is_upper;", "    if (dict.size() == 0) {\n        return false;\n\
    \    }\n    bool is_lower = true;\n    bool is_upper = true;\n    for (auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_lower = false;\n        } else {\n            is_upper = false;\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if (dict.size() ==\
    \ 0) {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (isupper(it->first[0])) {\n            is_lower = false;\n        } else\
    \ {\n            is_upper = false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if (isupper(it->first[0])) {\n            is_upper = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool all_lower = true;\n    bool all_upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first[0] < 'a' || it->first[0] >\
    \ 'z') {\n            all_lower = false;\n        }\n        if (it->first[0]\
    \ < 'A' || it->first[0] > 'Z') {\n            all_upper = false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if (dict.size() == 0) {\n  \
    \      return false;\n    }\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else if (islower(it->first[0])) {\n\
    \            is_lower = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_upper ^ is_lower;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower =\
    \ true;\n        } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n  \
    \          is_upper = true;\n        } else {\n            return false;\n   \
    \     }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto i:dict){\n        if(islower(i.first[0])){\n\
    \            for(auto j:dict){\n                if(isupper(j.first[0])){\n   \
    \                 flag=false;\n                    break;\n                }\n\
    \            }\n        }\n        else if(isupper(i.first[0])){\n           \
    \ for(auto j:dict){\n                if(islower(j.first[0])){\n              \
    \      flag=false;\n                    break;\n                }\n          \
    \  }\n        }\n        else{\n            flag=false;\n            break;\n\
    \        }\n    }\n    return flag;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_upper = false;\n \
    \   bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_upper ^ is_lower;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0]))\n            is_upper = false;\n      \
    \  else if(isupper(it->first[0]))\n            is_lower = false;\n        else\n\
    \            return false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !islower(it->first[0]))\n            is_lower = false;\n        if(is_upper\
    \ && !isupper(it->first[0]))\n            is_upper = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!islower(it->first[0])) is_lower = false;\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_upper = false;\n        else if(isupper(it->first[0]))\n     \
    \       is_lower = false;\n        else\n            return false;\n    }\n  \
    \  return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n  \
    \  bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            all_upper = false;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            all_lower = false;\n        } else {\n\
    \            return false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_upper\
    \ = false;\n        }\n        else if(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z') {\n            is_lower = false;\n        }\n        else {\n         \
    \   return false;\n        }\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() ==\
    \ 0) return false;\n        if(isupper(it->first[0])) upper = true;\n        if(islower(it->first[0]))\
    \ lower = true;\n    }\n    return upper != lower;", "    if(dict.size() == 0)\
    \ return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        std::string key = it->first;\n\
    \        for(int i = 0; i < key.size(); i++) {\n            if(isupper(key[i]))\
    \ all_lower = false;\n            if(islower(key[i])) all_upper = false;\n   \
    \     }\n    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else\n            lower = false;\n    }\n    return lower\
    \ || upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n          \
    \  is_upper = false;\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n\
    \            is_lower = false;\n        else\n            return false;\n    }\n\
    \    return is_lower || is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    for(auto i = dict.begin();\
    \ i != dict.end(); i++) {\n        if(islower(i->first[0]))\n            upper\
    \ = false;\n        else if(isupper(i->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return lower || upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return (is_lower && !is_upper) ||\
    \ (!is_lower && is_upper);", "    if(dict.size() == 0) return false;\n    bool\
    \ lower = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(!islower(it->first[0])) lower = false;\n   \
    \     if(!isupper(it->first[0])) upper = false;\n    }\n    return lower || upper;",
  "    if(dict.size() == 0) return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n    }\n    if(is_upper && is_lower) return false;\n    return\
    \ true;", "    if(dict.size() == 0) return false;\n    bool isUpper = false;\n\
    \    bool isLower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) isUpper = true;\n        if(islower(it->first[0]))\
    \ isLower = true;\n    }\n    return isUpper ^ isLower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'a'\
    \ && it->first[0] <= 'z') {\n            is_lower = true;\n        } else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_upper\
    \ = false;\n        }\n        else if(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z') {\n            is_lower = false;\n        }\n        else {\n         \
    \   return false;\n        }\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n\
    \        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            is_upper\
    \ = true;\n        else\n            return false;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.length() == 0) return false;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool is_upper = true;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!isupper(it->first[0])) is_upper = false;\n\
    \        if(!islower(it->first[0])) is_lower = false;\n    }\n    return is_upper\
    \ || is_lower;", "    if (dict.size() == 0) return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     is_lower = true;\n        } else if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            is_upper = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    bool is_lower = false;\n    bool\
    \ is_upper = false;\n    for (auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower\
    \ = true;\n        } else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (isupper(it->first[0])) {\n            is_lower = false;\n        } else\
    \ {\n            is_upper = false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ true;\n    bool is_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first.size() == 0) {\n            return false;\n \
    \       }\n        if (is_lower && isupper(it->first[0])) {\n            is_lower\
    \ = false;\n        }\n        if (is_upper && islower(it->first[0])) {\n    \
    \        is_upper = false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first.size() == 0) {\n            return false;\n \
    \       }\n        if (islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if (isupper(it->first[0])) {\n            is_upper = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if (it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower || is_upper;",
  "    if (dict.size() == 0) {\n        return false;\n    }\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if (isupper(it->first[0])) {\n            is_upper = true;\n \
    \       } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if (dict.size() == 0) {\n        return false;\n    }\n \
    \   bool lower = true;\n    bool upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first.length() == 0) {\n        \
    \    return false;\n        }\n        if (islower(it->first[0])) {\n        \
    \    upper = false;\n        } else if (isupper(it->first[0])) {\n           \
    \ lower = false;\n        } else {\n            return false;\n        }\n   \
    \ }\n    return lower || upper;", "    if (dict.size() == 0) {\n        return\
    \ false;\n    }\n    bool all_lower = true;\n    bool all_upper = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;", "    if (dict.size() == 0) {\n        return\
    \ false;\n    }\n    bool is_lower = false;\n    bool is_upper = false;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if (isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if (dict.size() == 0)\
    \ return false;\n    bool lower = true;\n    bool upper = true;\n    for (auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            upper = false;\n        } else if (isupper(it->first[0])) {\n\
    \            lower = false;\n        } else {\n            return false;\n   \
    \     }\n    }\n    return lower || upper;", "    if (dict.size() == 0) {\n  \
    \      return false;\n    }\n    bool upper = true;\n    bool lower = true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            upper = false;\n        }\n  \
    \      if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            lower =\
    \ false;\n        }\n    }\n    return upper || lower;"]
stop_tokens:
- "\n}"
