name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
  \ True if all keys are strings in lower \n// case or all keys are strings in upper\
  \ case, else return False.\n// The function should return False is the given dictionary\
  \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if(dict.size() == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.size() == 0) return false;\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') all_upper = false;\n        if(it->first[0] >=\
    \ 'A' && it->first[0] <= 'Z') all_lower = false;\n    }\n    return all_lower\
    \ || all_upper;", "    if(dict.size()==0)\n        return false;\n    bool is_lower=true;\n\
    \    bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(isupper(it->first[0]))\n            is_lower=false;\n        else\n\
    \            is_upper=false;\n    }\n    return (is_lower || is_upper);", "  \
    \  if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(islower(it->first[0])) upper = false;\n        if(isupper(it->first[0]))\
    \ lower = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower = true;\n    for(auto i:dict){\n   \
    \     if(isupper(i.first[0])){\n            is_lower = false;\n            break;\n\
    \        }\n    }\n    for(auto i:dict){\n        if(is_lower){\n            if(isupper(i.first[0]))\n\
    \                return false;\n        }\n        else{\n            if(islower(i.first[0]))\n\
    \                return false;\n        }\n    }\n    return true;", "  if (dict.size()\
    \ == 0) {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper\
    \ = true;\n  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first.length()\
    \ == 0) {\n      return false;\n    }\n    if (it->first[0] < 'a' || it->first[0]\
    \ > 'z') {\n      all_lower = false;\n    }\n    if (it->first[0] < 'A' || it->first[0]\
    \ > 'Z') {\n      all_upper = false;\n    }\n  }\n  return all_lower || all_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0])){\n\
    \            for(int i=0;i<it->first.length();i++){\n                if(!islower(it->first[i])){\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else if(isupper(it->first[0])){\n     \
    \       for(int i=0;i<it->first.length();i++){\n                if(!isupper(it->first[i])){\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else{\n            flag=false;\n      \
    \      break;\n        }\n    }\n    return flag;", "    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool upper = true;\n    bool lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ upper = false;\n        if(!islower(it->first[0])) lower = false;\n    }\n \
    \   return upper || lower;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        if(islower(it->first[0])) is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0) return false;\n    bool is_upper = false;\n\
    \    bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n    }\n    return is_upper ^ is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return false;\n\
    \    std::map<std::string,std::string>::iterator it;\n    bool flag=true;\n  \
    \  for(it=dict.begin();it!=dict.end();it++){\n        if(it->first[0]>='a' &&\
    \ it->first[0]<='z'){\n            for(int i=0;i<it->first.length();i++){\n  \
    \              if(it->first[i]<'a' || it->first[i]>'z'){\n                   \
    \ flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else if(it->first[0]>='A' && it->first[0]<='Z'){\n       \
    \     for(int i=0;i<it->first.length();i++){\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z'){\n                    flag=false;\n                   \
    \ break;\n                }\n            }\n        }\n        else{\n       \
    \     flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool upper = true;\n    bool lower\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            upper = false;\n\
    \        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n           \
    \ lower = false;\n        } else {\n            return false;\n        }\n   \
    \ }\n    return upper || lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool all_lower = true;\n \
    \   bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            all_upper = false;\n\
    \        if(!islower(it->first[0]))\n            all_lower = false;\n    }\n \
    \   return all_lower || all_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first.length() == 0) return false;\n\
    \        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower\
    \ = true;\n        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n \
    \           is_upper = true;\n        } else {\n            return false;\n  \
    \      }\n    }\n    return is_lower ^ is_upper;"]
stop_tokens:
- "\n}"
