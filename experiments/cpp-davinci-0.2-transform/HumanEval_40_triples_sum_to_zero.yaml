name: HumanEval_40_triples_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
  \ a list of integers as an input.\n// it returns True if there are three distinct\
  \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
  // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
  \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
completions: ["  // your code here\n  std::sort(l.begin(), l.end());\n  for (int i\
    \ = 0; i < l.size(); i++) {\n    int j = i + 1;\n    int k = l.size() - 1;\n \
    \   while (j < k) {\n      if (l[i] + l[j] + l[k] == 0) {\n        return true;\n\
    \      } else if (l[i] + l[j] + l[k] < 0) {\n        j++;\n      } else {\n  \
    \      k--;\n      }\n    }\n  }\n  return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // Your code here\n    // You may\
    \ create other functions if you wish.\n    std::sort(l.begin(), l.end());\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k\
    \ = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    // You may use the following functions:\n    // std::sort(l.begin(), l.end());\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)0);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)1);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)2);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)3);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)4);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)5);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)6);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)7);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)8);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)9);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)10);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)11);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)12);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)13);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)14);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)15);\n",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;"]
stop_tokens:
- "\n}"
