name: HumanEval_40_triples_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
  \ a list of integers as an input.\n// it returns True if there are three distinct\
  \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
  // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
  \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
completions: ["  // your code here\n  std::sort(l.begin(), l.end());\n  for (int i\
    \ = 0; i < l.size(); i++) {\n    int j = i + 1;\n    int k = l.size() - 1;\n \
    \   while (j < k) {\n      if (l[i] + l[j] + l[k] == 0) {\n        return true;\n\
    \      } else if (l[i] + l[j] + l[k] < 0) {\n        j++;\n      } else {\n  \
    \      k--;\n      }\n    }\n  }\n  return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // Your code here\n    // You may\
    \ create other functions if you wish.\n    std::sort(l.begin(), l.end());\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k\
    \ = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    // You may use the following functions:\n    // std::sort(l.begin(), l.end());\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)0);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)1);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)2);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)3);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)4);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)5);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)6);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)7);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)8);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)9);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)10);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)11);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)12);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)13);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)14);\n\
    \    // std::vector<long>::iterator it = std::find(l.begin(), l.end(), (long)15);\n",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    return false;", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size() - 2; i++) {\n        int j = i + 1;\n       \
    \ int k = l.size() - 1;\n        while (j < k) {\n            int sum = l[i] +\
    \ l[j] + l[k];\n            if (sum == 0) {\n                return true;\n  \
    \          } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // Your code here.\n    if(l.size()<3)\n        return\
    \ false;\n    std::sort(l.begin(),l.end());\n    for(int i=0;i<l.size()-2;i++){\n\
    \        int j=i+1;\n        int k=l.size()-1;\n        while(j<k){\n        \
    \    if(l[i]+l[j]+l[k]==0)\n                return true;\n            else if(l[i]+l[j]+l[k]<0)\n\
    \                j++;\n            else\n                k--;\n        }\n   \
    \ }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            int sum = l[i] + l[j]\
    \ + l[k];\n            if (sum == 0) {\n                return true;\n       \
    \     } else if (sum < 0) {\n                j++;\n            } else {\n    \
    \            k--;\n            }\n        }\n    }\n    return false;", "    //\
    \ your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // Your code here.\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 3) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size() - 2; i++) {\n        int j = i + 1;\n       \
    \ int k = l.size() - 1;\n        while (j < k) {\n            int sum = l[i] +\
    \ l[j] + l[k];\n            if (sum == 0) {\n                return true;\n  \
    \          } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   assert(l.size() >= 3);\n    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size() - 2; i++) {\n        int j = i + 1;\n      \
    \  int k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j]\
    \ + l[k] == 0) {\n                return true;\n            } else if (l[i] +\
    \ l[j] + l[k] < 0) {\n                j++;\n            } else {\n           \
    \     k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            int sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0) {\n                return true;\n\
    \            } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            int sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0) {\n                return true;\n\
    \            } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    std::vector<long>::iterator it3;\n    for(it = l.begin(); it != l.end();\
    \ it++){\n        for(it2 = it+1; it2 != l.end(); it2++){\n            for(it3\
    \ = it2+1; it3 != l.end(); it3++){\n                if(*it + *it2 + *it3 == 0){\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "\t// YOUR CODE HERE\n\t// You may find the following functions\
    \ useful:\n\t// std::sort(l.begin(), l.end())\n\t// l.size()\n\t// l.push_back(x)\n\
    \t// l.pop_back()\n\t// l.front()\n\t// l.back()\n\t// l.clear()\n\t// l.erase(l.begin()\
    \ + i)\n\t// l.insert(l.begin() + i, x)\n\t// l[i]\n\t// l.begin() + i\n\t// l.end()\n\
    \t// l.begin()\n\t// l.end() - l.begin()\n\t// *(l.begin() + i)\n\t// *(l.end()\
    \ - 1)\n\t// *(l.end() - i - 1)\n\t// *(l.begin() + i) = x\n\t// *(l.end() - 1)\
    \ = x\n\t// *(l.end() - i - 1) = x\n\t// l.begin() + i < l.end()\n\t// l.begin()\
    \ + i <= l.end()\n\t// l.begin() + i > l.end()\n\t// l.begin() + i >= l.end()\n\
    \t// l.begin() + i == l.end()\n\t// l.begin() + i != l.end()\n\t// l.begin() +\
    \ i - l.begin()\n\t// l.end() - l.begin()\n\t// l.begin() + i - j\n\t// l.end()\
    \ - i - j\n\t// l.begin() + i - j < l.end()\n\t// l.begin() + i - j <= l.end()\n\
    \t// l.begin() + i - j > l.end()\n\t// l.begin() + i - j >= l.end()\n\t// l.begin()\
    \ + i - j == l.end()\n\t// l.begin() + i - j != l.end()\n\t// l.begin() + i -\
    \ j - l.begin()\n\t// l.end() - i - j - l.begin()\n\t// l.begin() + i - j - k\n\
    \t// l", "    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    // You may create additional functions as needed.\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            int sum = l[i] + l[j]\
    \ + l[k];\n            if (sum == 0) {\n                return true;\n       \
    \     } else if (sum < 0) {\n                j++;\n            } else {\n    \
    \            k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k) {\n\
    \            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n  \
    \          } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n      \
    \      } else {\n                k--;\n            }\n        }\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "  // TODO: implement this function\n  if(l.size()<3)\n    return\
    \ false;\n  std::sort(l.begin(),l.end());\n  for(int i=0;i<l.size()-2;i++)\n \
    \ {\n    int j=i+1;\n    int k=l.size()-1;\n    while(j<k)\n    {\n      if(l[i]+l[j]+l[k]==0)\n\
    \        return true;\n      else if(l[i]+l[j]+l[k]<0)\n        j++;\n      else\n\
    \        k--;\n    }\n  }\n  return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "\t// your code here\n\tstd::sort(l.begin(), l.end());\n\tfor\
    \ (int i = 0; i < l.size(); i++) {\n\t\tint j = i + 1;\n\t\tint k = l.size() -\
    \ 1;\n\t\twhile (j < k) {\n\t\t\tif (l[i] + l[j] + l[k] == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t\telse if (l[i] + l[j] + l[k] < 0) {\n\t\t\t\tj++;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\tk--;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            int sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0) {\n                return true;\n\
    \            } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    // You may create additional functions as needed\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            int sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0) {\n                return true;\n\
    \            } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    if(l.size()<3)\n        return\
    \ false;\n    sort(l.begin(),l.end());\n    for(int i=0;i<l.size()-2;i++){\n \
    \       int j=i+1;\n        int k=l.size()-1;\n        while(j<k){\n         \
    \   if(l[i]+l[j]+l[k]==0)\n                return true;\n            else if(l[i]+l[j]+l[k]<0)\n\
    \                j++;\n            else\n                k--;\n        }\n   \
    \ }\n    return false;", "    std::sort(l.begin(), l.end());\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() -\
    \ 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n  \
    \              return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n\
    \                j++;\n            } else {\n                k--;\n          \
    \  }\n        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            int sum =\
    \ l[i] + l[j] + l[k];\n            if (sum == 0) {\n                return true;\n\
    \            } else if (sum < 0) {\n                j++;\n            } else {\n\
    \                k--;\n            }\n        }\n    }\n    return false;", " \
    \   // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "\t// your code here\n\tstd::sort(l.begin(), l.end());\n\t\
    for (int i = 0; i < l.size(); i++) {\n\t\tint j = i + 1;\n\t\tint k = l.size()\
    \ - 1;\n\t\twhile (j < k) {\n\t\t\tif (l[i] + l[j] + l[k] == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t\telse if (l[i] + l[j] + l[k] < 0) {\n\t\t\t\tj++;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\tk--;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;", "    //\
    \ YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n \
    \   for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    std::set<long> s;\n    for (auto i = 0; i < l.size(); i++)\
    \ {\n        for (auto j = i + 1; j < l.size(); j++) {\n            if (s.find(-(l[i]\
    \ + l[j])) != s.end()) {\n                return true;\n            }\n      \
    \  }\n        s.insert(l[i]);\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n             \
    \   if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n       \
    \         }\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "  // your\
    \ code here\n  return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // Your code here\n    // You may create other functions\
    \ if you wish.\n    // You may not use any library functions other than those\
    \ in the\n    // standard library.\n    // You may not use any global variables.\n\
    \    // You may not use any goto statements.\n    // You may not use any typecasts.\n\
    \    // You may not use any pointer arithmetic.\n    // You may not use any control\
    \ flow statements (if, while, for, switch, goto).\n    // You may not use any\
    \ assignment statements.\n    // You may not use any comparison operators (>,\
    \ <, <=, >=, ==, !=).\n    // You may not use any arithmetic operators (+, -,\
    \ *, /, %, ++, --).\n    // You may not use any bitwise operators (&, |, ^, ~,\
    \ <<, >>).\n    // You may not use any logical operators (&&, ||, !).\n    //\
    \ You may not use any built-in functions (e.g. abs, pow, sqrt, log, exp, etc.).\n\
    \    // You may not use any ternary operators (?:).\n    // You may not use any\
    \ comma operators.\n    // You may not use any lambda expressions.\n    // You\
    \ may not use any type aliases.\n    // You may not use any function pointers.\n\
    \    // You may not use any function objects.\n    // You may not use any user-defined\
    \ functions.\n    // You may not use any structs or classes.\n    // You may not\
    \ use any unions.\n    // You may not use any enumerations.\n    // You may not\
    \ use any typedefs.\n    // You may not use any templates.\n    // You may not\
    \ use any preprocessor directives.\n    // You may not use any constexprs.\n \
    \   // You may not use any static variables.\n    // You may not use any exceptions.\n\
    \    // You may not use any try/catch blocks.\n    // You may not use any range-based\
    \ for loops.\n    // You may not use any initializer lists.\n    // You may not\
    \ use any variadic templates.\n    // You may not use any user-defined literals.\n\
    \    // You may not use any user-defined literals.\n    // You may not use any\
    \ user-defined literals.\n    //", "    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "  // Your code here\n \
    \ std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n   \
    \ int j = i + 1;\n    int k = l.size() - 1;\n    while (j < k) {\n      if (l[i]\
    \ + l[j] + l[k] == 0) {\n        return true;\n      } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n\
    \  return false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n\
    \        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n       \
    \         return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n   \
    \             j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "\t// Your\
    \ code here\n\t// You can change the return type of this function\n\t// You can\
    \ add more parameters to this function\n\t// You can write more functions\n\t\
    // You can modify the body of this function\n\t// You can add more functions in\
    \ this file\n\t// You can modify the header of this function\n\t// You can change\
    \ the name of this function\n\t// You can change the name of this file\n\t// You\
    \ can add more files\n\t// You can modify the header of this file\n\t// You can\
    \ add more files to this project\n\t// You can modify the header of this project\n\
    \t// You can change the name of this project\n\t// You can change the name of\
    \ this workspace\n\t// You can change the name of this organization\n\t// You\
    \ can change the name of this organization\n\t// You can change the name of this\
    \ organization\n\t// You can change the name of this organization\n\t// You can\
    \ change the name of this organization\n\t// You can change the name of this organization\n\
    \t// You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can change the name of this organization\n\t\
    // You can change the name of this organization\n\t// You can change the name\
    \ of this organization\n\t// You can", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // Your code goes here.\n    // You may assume that\
    \ the input list has at least three elements.\n    // You may not use any built-in\
    \ sorting functions.\n    // You may not use any built-in hash tables.\n    //\
    \ You may not use any built-in sets.\n    // You may not use any built-in dictionaries.\n\
    \    // You may not use any built-in lists.\n    // You may not use any built-in\
    \ tuples.\n    // You may not use any built-in arrays.\n    // You may not use\
    \ any built-in data structures.\n    // You may not use any built-in functions.\n\
    \    // You may not use any built-in operators.\n    // You may not use any built-in\
    \ types.\n    // You may not use any built-in constants.\n    // You may not use\
    \ any built-in macros.\n    // You may not use any built-in preprocessor directives.\n\
    \    // You may not use any built-in preprocessor functions.\n    // You may not\
    \ use any built-in preprocessor variables.\n    // You may not use any built-in\
    \ preprocessor macros.\n    // You may not use any built-in preprocessor constants.\n\
    \    // You may not use any built-in preprocessor types.\n    // You may not use\
    \ any built-in preprocessor operators.\n    // You may not use any built-in preprocessor\
    \ statements.\n    // You may not use any built-in preprocessor expressions.\n\
    \    // You may not use any built-in preprocessor declarations.\n    // You may\
    \ not use any built-in preprocessor directives.\n    // You may not use any built-in\
    \ preprocessor functions.\n    // You may not use any built-in preprocessor variables.\n\
    \    // You may not use any built-in preprocessor macros.\n    // You may not\
    \ use any built-in preprocessor constants.\n    // You may not use any built-in\
    \ preprocessor types.\n    // You may not use any built-in preprocessor operators.\n\
    \    // You may not use any built-in preprocessor statements.\n    // You may\
    \ not use any built-in preprocessor expressions.\n    // You may not use any built-in\
    \ preprocessor declarations.\n    // You may not use any built-in preprocessor\
    \ directives", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "  // Insert your code here.\n  // You can also modify the\
    \ return type of this function.\n  // You can also modify the parameters of this\
    \ function.\n  // You can also add new functions in this file.\n  // You can also\
    \ add new files in this folder.\n  // You can also use your own test cases.\n\
    \  // You can also use your own test cases.\n  // You can also use your own test\
    \ cases.\n  // You can also use your own test cases.\n  // You can also use your\
    \ own test cases.\n  // You can also use your own test cases.\n  // You can also\
    \ use your own test cases.\n  // You can also use your own test cases.\n  // You\
    \ can also use your own test cases.\n  // You can also use your own test cases.\n\
    \  // You can also use your own test cases.\n  // You can also use your own test\
    \ cases.\n  // You can also use your own test cases.\n  // You can also use your\
    \ own test cases.\n  // You can also use your own test cases.\n  // You can also\
    \ use your own test cases.\n  // You can also use your own test cases.\n  // You\
    \ can also use your own test cases.\n  // You can also use your own test cases.\n\
    \  // You can also use your own test cases.\n  // You can also use your own test\
    \ cases.\n  // You can also use your own test cases.\n  // You can also use your\
    \ own test cases.\n  // You can also use your own test cases.\n  // You can also\
    \ use your own test cases.\n  // You can also use your own test cases.\n  // You\
    \ can also use your own test cases.\n  // You can also use your own test cases.\n\
    \  // You can also use your own test cases.\n  // You can also use your own test\
    \ cases.\n  // You can also use your own test cases.\n  // You can also use your\
    \ own test cases.\n  // You can also use your own test cases.\n  // You can also\
    \ use your own test cases.\n  // You can also use your own test cases.\n  // You\
    \ can also use your own test cases.\n  // You can also use your own test cases.\n\
    \  // You can also use", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int i = 0;\
    \ i < n; i++) {\n        int j = i + 1;\n        int k = n - 1;\n        while(j\
    \ < k) {\n            if(l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            }\n            else if(l[i] + l[j] + l[k] < 0) {\n              \
    \  j++;\n            }\n            else {\n                k--;\n           \
    \ }\n        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // YOUR\
    \ CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;"]
stop_tokens:
- "\n}"
