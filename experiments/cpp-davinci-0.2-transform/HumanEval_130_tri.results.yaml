language: cpp
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    if (n == 1) {\n        result.push_back(1);\n        result.push_back(3);\n\
    \        return result;\n    }\n    if (n == 2) {\n        result.push_back(1);\n\
    \        result.push_back(3);\n        result.push_back(2);\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zpadvcn.cpp: In function 'int main()':\n/tmp/tmp2zpadvcn.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp2zpadvcn.cpp:2:\n/tmp/tmp2zpadvcn.cpp:50:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp2zpadvcn.cpp:50:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp2zpadvcn.cpp:50:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp2zpadvcn.cpp:50:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2zpadvcn.cpp:50:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2zpadvcn.cpp:50:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2zpadvcn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    if(n\
    \ == 0) return v;\n    if(n == 1) return v;\n    if(n == 2) return v;\n    for(int\
    \ i = 3; i <= n; i++){\n        if(i % 2 == 0) v.push_back(1 + i / 2);\n     \
    \   else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocmycb_p.cpp: In function 'int main()':\n/tmp/tmpocmycb_p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpocmycb_p.cpp:2:\n/tmp/tmpocmycb_p.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpocmycb_p.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpocmycb_p.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpocmycb_p.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpocmycb_p.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpocmycb_p.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpocmycb_p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    result.push_back(1);\n    if (n == 0) return result;\n    result.push_back(3);\n\
    \    if (n == 1) return result;\n    result.push_back(2);\n    if (n == 2) return\
    \ result;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n   \
    \         result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeo1m3c6q.cpp: In function 'int main()':\n/tmp/tmpeo1m3c6q.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpeo1m3c6q.cpp:2:\n/tmp/tmpeo1m3c6q.cpp:38:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpeo1m3c6q.cpp:38:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpeo1m3c6q.cpp:38:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpeo1m3c6q.cpp:38:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeo1m3c6q.cpp:38:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeo1m3c6q.cpp:38:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeo1m3c6q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    for(int\
    \ i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            v.push_back(1 +\
    \ i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_tqihtb.cpp: In function 'int main()':\n/tmp/tmpi_tqihtb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi_tqihtb.cpp:2:\n/tmp/tmpi_tqihtb.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpi_tqihtb.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi_tqihtb.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi_tqihtb.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_tqihtb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy32xco24.cpp: In function 'int main()':\n/tmp/tmpy32xco24.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpy32xco24.cpp:2:\n/tmp/tmpy32xco24.cpp:39:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpy32xco24.cpp:39:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpy32xco24.cpp:39:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpy32xco24.cpp:39:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy32xco24.cpp:39:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpy32xco24.cpp:39:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpy32xco24.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    for(int\
    \ i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            v.push_back(1 +\
    \ i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_tqihtb.cpp: In function 'int main()':\n/tmp/tmpi_tqihtb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi_tqihtb.cpp:2:\n/tmp/tmpi_tqihtb.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpi_tqihtb.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi_tqihtb.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi_tqihtb.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_tqihtb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) return v;\n    v.push_back(1);\n    if(n == 1) return v;\n\
    \    v.push_back(3);\n    if(n == 2) return v;\n    v.push_back(2);\n    if(n\
    \ == 3) return v;\n    for(int i = 4; i <= n; i++){\n        if(i % 2 == 0) v.push_back(1\
    \ + i / 2);\n        else v.push_back(v[i - 1] + v[i - 2] + v[i - 4]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmiqzbz9l.cpp: In function 'int main()':\n/tmp/tmpmiqzbz9l.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmiqzbz9l.cpp:2:\n/tmp/tmpmiqzbz9l.cpp:36:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpmiqzbz9l.cpp:36:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpmiqzbz9l.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpmiqzbz9l.cpp:36:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmiqzbz9l.cpp:36:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpmiqzbz9l.cpp:36:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmiqzbz9l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy32xco24.cpp: In function 'int main()':\n/tmp/tmpy32xco24.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpy32xco24.cpp:2:\n/tmp/tmpy32xco24.cpp:39:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpy32xco24.cpp:39:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpy32xco24.cpp:39:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpy32xco24.cpp:39:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy32xco24.cpp:39:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpy32xco24.cpp:39:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpy32xco24.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 0) {\n        res.push_back(1);\n        return res;\n  \
    \  }\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n  \
    \  for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            res.push_back(res[i - 1] + res[i -\
    \ 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7v_jpmmk.cpp: In function 'int main()':\n/tmp/tmp7v_jpmmk.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp7v_jpmmk.cpp:2:\n/tmp/tmp7v_jpmmk.cpp:39:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp7v_jpmmk.cpp:39:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp7v_jpmmk.cpp:39:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp7v_jpmmk.cpp:39:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7v_jpmmk.cpp:39:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp7v_jpmmk.cpp:39:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp7v_jpmmk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjikm1y6c.cpp: In function 'int main()':\n/tmp/tmpjikm1y6c.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpjikm1y6c.cpp:2:\n/tmp/tmpjikm1y6c.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpjikm1y6c.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpjikm1y6c.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpjikm1y6c.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjikm1y6c.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjikm1y6c.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjikm1y6c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) return v;\n    v.push_back(1);\n    if(n == 1) return v;\n\
    \    v.push_back(3);\n    if(n == 2) return v;\n    v.push_back(2);\n    if(n\
    \ == 3) return v;\n    for(int i = 3; i < n; i++){\n        if(i % 2 == 0) v.push_back(1\
    \ + i / 2);\n        else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffr26ads.cpp: In function 'int main()':\n/tmp/tmpffr26ads.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpffr26ads.cpp:2:\n/tmp/tmpffr26ads.cpp:36:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpffr26ads.cpp:36:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpffr26ads.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpffr26ads.cpp:36:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpffr26ads.cpp:36:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpffr26ads.cpp:36:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpffr26ads.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n\
    \    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            res.push_back(res[i - 1] + res[i -\
    \ 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvngtpgb4.cpp: In function 'int main()':\n/tmp/tmpvngtpgb4.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpvngtpgb4.cpp:2:\n/tmp/tmpvngtpgb4.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpvngtpgb4.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpvngtpgb4.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpvngtpgb4.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvngtpgb4.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvngtpgb4.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvngtpgb4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    if(n\
    \ == 0)\n        return v;\n    if(n == 1)\n        return v;\n    if(n == 2)\n\
    \        return v;\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0)\n\
    \            v.push_back(1 + i / 2);\n        else\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvlfvi1x.cpp: In function 'int main()':\n/tmp/tmpgvlfvi1x.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpgvlfvi1x.cpp:2:\n/tmp/tmpgvlfvi1x.cpp:40:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpgvlfvi1x.cpp:40:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpgvlfvi1x.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpgvlfvi1x.cpp:40:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgvlfvi1x.cpp:40:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgvlfvi1x.cpp:40:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgvlfvi1x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjikm1y6c.cpp: In function 'int main()':\n/tmp/tmpjikm1y6c.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpjikm1y6c.cpp:2:\n/tmp/tmpjikm1y6c.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpjikm1y6c.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpjikm1y6c.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpjikm1y6c.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjikm1y6c.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjikm1y6c.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjikm1y6c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    long\
    \ i = 3;\n    while(i <= n) {\n        if(i % 2 == 0) {\n            v.push_back(1\
    \ + i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n        i++;\n    }\n    return v;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8eag0dj.cpp: In function 'int main()':\n/tmp/tmpd8eag0dj.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpd8eag0dj.cpp:2:\n/tmp/tmpd8eag0dj.cpp:37:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpd8eag0dj.cpp:37:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpd8eag0dj.cpp:37:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpd8eag0dj.cpp:37:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpd8eag0dj.cpp:37:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpd8eag0dj.cpp:37:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpd8eag0dj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    for(int\
    \ i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            v.push_back(1 +\
    \ i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_tqihtb.cpp: In function 'int main()':\n/tmp/tmpi_tqihtb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi_tqihtb.cpp:2:\n/tmp/tmpi_tqihtb.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpi_tqihtb.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi_tqihtb.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi_tqihtb.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_tqihtb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    for(int\
    \ i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            v.push_back(1 +\
    \ i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_tqihtb.cpp: In function 'int main()':\n/tmp/tmpi_tqihtb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi_tqihtb.cpp:2:\n/tmp/tmpi_tqihtb.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpi_tqihtb.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi_tqihtb.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi_tqihtb.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_tqihtb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n\
    \    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            res.push_back(res[i - 1] + res[i -\
    \ 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvngtpgb4.cpp: In function 'int main()':\n/tmp/tmpvngtpgb4.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpvngtpgb4.cpp:2:\n/tmp/tmpvngtpgb4.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpvngtpgb4.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpvngtpgb4.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpvngtpgb4.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvngtpgb4.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvngtpgb4.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvngtpgb4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  if (n == 0) {\n    result.push_back(1);\n    return result;\n  }\n  result.push_back(1);\n\
    \  result.push_back(3);\n  result.push_back(2);\n  for (int i = 3; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtmvw78z.cpp: In function 'int main()':\n/tmp/tmpvtmvw78z.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpvtmvw78z.cpp:2:\n/tmp/tmpvtmvw78z.cpp:39:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpvtmvw78z.cpp:39:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpvtmvw78z.cpp:39:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpvtmvw78z.cpp:39:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvtmvw78z.cpp:39:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvtmvw78z.cpp:39:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvtmvw78z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    for(int\
    \ i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            v.push_back(1 +\
    \ i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_tqihtb.cpp: In function 'int main()':\n/tmp/tmpi_tqihtb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpi_tqihtb.cpp:2:\n/tmp/tmpi_tqihtb.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpi_tqihtb.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpi_tqihtb.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi_tqihtb.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi_tqihtb.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi_tqihtb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
