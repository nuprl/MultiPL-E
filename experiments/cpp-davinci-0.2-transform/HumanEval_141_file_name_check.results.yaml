language: cpp
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    std::string result = \"No\";\n\
    \    int dot_count = 0;\n    int digit_count = 0;\n    int dot_index = 0;\n  \
    \  for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] ==\
    \ '.') {\n            dot_count++;\n            dot_index = i;\n        }\n  \
    \      if (isdigit(file_name[i])) {\n            digit_count++;\n        }\n \
    \   }\n    if (dot_count == 1 && digit_count <= 3) {\n        std::string extension\
    \ = file_name.substr(dot_index + 1);\n        std::string name = file_name.substr(0,\
    \ dot_index);\n        if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n            if (isalpha(name[0])) {\n                result =\
    \ \"Yes\";\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp6v3r97w.cpp: In function 'int main()':\n/tmp/tmpp6v3r97w.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp6v3r97w.cpp:2:\n/tmp/tmpp6v3r97w.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int i = 0;\n    int len = file_name.length();\n    for(i = 0; i <\
    \ len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n    \
    \        count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string sub_str = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub_str.length() == 0) {\n        return \"No\";\n    }\n    if(!(sub_str[0]\
    \ >= 'a' && sub_str[0] <= 'z') && !(sub_str[0] >= 'A' && sub_str[0] <= 'Z')) {\n\
    \        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprukdu844.cpp: In function 'int main()':\n/tmp/tmprukdu844.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprukdu844.cpp:2:\n/tmp/tmprukdu844.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == std::string::npos) {\n        return \"No\";\n    }\n    std::string\
    \ prefix = file_name.substr(0, dot_pos);\n    std::string suffix = file_name.substr(dot_pos\
    \ + 1);\n    if (prefix.empty() || prefix.find_first_not_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) != std::string::npos) {\n        return \"No\";\n    }\n    if (prefix.find_first_of(\"\
    0123456789\") != std::string::npos) {\n        int count = 0;\n        for (int\
    \ i = 0; i < prefix.size(); i++) {\n            if (prefix[i] >= '0' && prefix[i]\
    \ <= '9') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n    }\n    if (suffix != \"txt\"\
    \ && suffix != \"exe\" && suffix != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0_0x9y0.cpp: In function 'int main()':\n/tmp/tmph0_0x9y0.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0_0x9y0.cpp:2:\n/tmp/tmph0_0x9y0.cpp:45:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string str = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(str == \"txt\" || str == \"exe\" || str == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatep6oh9.cpp: In function 'int main()':\n/tmp/tmpatep6oh9.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpatep6oh9.cpp:2:\n/tmp/tmpatep6oh9.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n\tstd::string result = \"No\";\n\t\
    std::string sub_str = \"\";\n\tint dot_count = 0;\n\tint digit_count = 0;\n\t\
    for (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i] == '.') {\n\
    \t\t\tdot_count++;\n\t\t\tif (dot_count > 1) {\n\t\t\t\treturn result;\n\t\t\t\
    }\n\t\t\tif (i == 0) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (sub_str.length()\
    \ == 0) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (digit_count > 3) {\n\t\t\
    \t\treturn result;\n\t\t\t}\n\t\t\tif (sub_str.length() > 0) {\n\t\t\t\tif (sub_str[0]\
    \ >= '0' && sub_str[0] <= '9') {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\tsub_str = \"\";\n\t\t}\n\t\telse if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n\t\t\tdigit_count++;\n\t\t\tif (digit_count > 3) {\n\t\t\t\treturn\
    \ result;\n\t\t\t}\n\t\t\tsub_str += file_name[i];\n\t\t}\n\t\telse {\n\t\t\t\
    sub_str += file_name[i];\n\t\t}\n\t}\n\tif (sub_str == \"txt\" || sub_str == \"\
    exe\" || sub_str == \"dll\") {\n\t\tresult = \"Yes\";\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvii0nxqh.cpp: In function 'int main()':\n/tmp/tmpvii0nxqh.cpp:61:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvii0nxqh.cpp:2:\n/tmp/tmpvii0nxqh.cpp:62:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \            count++;\n        }\n        if(file_name[i] == '.') {\n        \
    \    dot++;\n            dot_pos = i;\n        }\n    }\n    if(count > 3 || dot\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_pos);\n    std::string sub2 = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63sbiplw.cpp: In function 'int main()':\n/tmp/tmp63sbiplw.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp63sbiplw.cpp:2:\n/tmp/tmp63sbiplw.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string str1 = file_name.substr(0, file_name.find('.'));\n   \
    \ std::string str2 = file_name.substr(file_name.find('.') + 1);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpow72pjj5.cpp: In function 'int main()':\n/tmp/tmpow72pjj5.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpow72pjj5.cpp:2:\n/tmp/tmpow72pjj5.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string str1 = file_name.substr(0, file_name.find(\".\"));\n \
    \   std::string str2 = file_name.substr(file_name.find(\".\") + 1);\n    if(str1.length()\
    \ == 0 || str2.length() == 0) {\n        return \"No\";\n    }\n    if(str1[0]\
    \ >= '0' && str1[0] <= '9') {\n        return \"No\";\n    }\n    if(str2 != \"\
    txt\" && str2 != \"exe\" && str2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqj7rob_.cpp: In function 'int main()':\n/tmp/tmprqj7rob_.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprqj7rob_.cpp:2:\n/tmp/tmprqj7rob_.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i\
    \ = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string first_part\
    \ = file_name.substr(0, dot_pos);\n    std::string second_part = file_name.substr(dot_pos\
    \ + 1, len - dot_pos - 1);\n    if(first_part.length() == 0 || (first_part[0]\
    \ < 'a' || first_part[0] > 'z') && (first_part[0] < 'A' || first_part[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\") {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n  \
    \  assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9y9k21ii.cpp: In function 'int main()':\n/tmp/tmp9y9k21ii.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9y9k21ii.cpp:2:\n/tmp/tmp9y9k21ii.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(!((sub[0] >= 'a' && sub[0] <=\
    \ 'z') || (sub[0] >= 'A' && sub[0] <= 'Z'))) {\n        return \"No\";\n    }\n\
    \    sub = file_name.substr(file_name.find('.') + 1);\n    if(sub != \"txt\" &&\
    \ sub != \"exe\" && sub != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp916i6fug.cpp: In function 'int main()':\n/tmp/tmp916i6fug.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp916i6fug.cpp:2:\n/tmp/tmp916i6fug.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string extension = file_name.substr(file_name.find(\".\") + 1);\n\
    \    if(extension == \"txt\" || extension == \"exe\" || extension == \"dll\")\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptmcgi7v0.cpp: In function 'int main()':\n/tmp/tmptmcgi7v0.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptmcgi7v0.cpp:2:\n/tmp/tmptmcgi7v0.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string before_dot\
    \ = file_name.substr(0, dot_index);\n    std::string after_dot = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(before_dot.length() == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfs4ru9ti.cpp: In function 'int main()':\n/tmp/tmpfs4ru9ti.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfs4ru9ti.cpp:2:\n/tmp/tmpfs4ru9ti.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_index = -1;\n    int count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_index = i;\n        }\n        if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if\
    \ (count > 3) {\n        return \"No\";\n    }\n    if (dot_index == -1) {\n \
    \       return \"No\";\n    }\n    if (dot_index == 0) {\n        return \"No\"\
    ;\n    }\n    if (file_name[dot_index + 1] == 't' && file_name[dot_index + 2]\
    \ == 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if (file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x' &&\
    \ file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n    if (file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09sg2sd0.cpp: In function 'int main()':\n/tmp/tmp09sg2sd0.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp09sg2sd0.cpp:2:\n/tmp/tmp09sg2sd0.cpp:50:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ str1 = file_name.substr(0, file_name.find(\".\"));\n    std::string str2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str1.length() == 0 || (str1[0] >= 'a' && str1[0] <= 'z') ||\
    \ (str1[0] >= 'A' && str1[0] <= 'Z')) {\n        return \"No\";\n    }\n    if(str2\
    \ == \"txt\" || str2 == \"exe\" || str2 == \"dll\") {\n        return \"Yes\"\
    ;\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_7bl45k.cpp: In function 'int main()':\n/tmp/tmpy_7bl45k.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy_7bl45k.cpp:2:\n/tmp/tmpy_7bl45k.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n\tint count = 0;\n\tint dot_count\
    \ = 0;\n\tint dot_index = 0;\n\tfor (int i = 0; i < file_name.length(); i++) {\n\
    \t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\
    \t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_index = i;\n\t\t\
    }\n\t}\n\tif (count > 3) {\n\t\treturn \"No\";\n\t}\n\tif (dot_count != 1) {\n\
    \t\treturn \"No\";\n\t}\n\tif (file_name[0] < 'a' || file_name[0] > 'z') {\n\t\
    \treturn \"No\";\n\t}\n\tif (file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index) != \"txt\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index) != \"exe\" && file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index) != \"dll\") {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_zxvzhqx.cpp: In function 'int main()':\n/tmp/tmp_zxvzhqx.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_zxvzhqx.cpp:2:\n/tmp/tmp_zxvzhqx.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string sub1\
    \ = file_name.substr(0, dot_index);\n    std::string sub2 = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5msipbw.cpp: In function 'int main()':\n/tmp/tmpw5msipbw.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5msipbw.cpp:2:\n/tmp/tmpw5msipbw.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd47bvtgr.cpp: In function 'int main()':\n/tmp/tmpd47bvtgr.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd47bvtgr.cpp:2:\n/tmp/tmpd47bvtgr.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\
    \ {\n        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string after_dot = file_name.substr(dot_index + 1);\n\
    \    if(before_dot.length() == 0 || (before_dot[0] < 'a' || before_dot[0] > 'z')\
    \ && (before_dot[0] < 'A' || before_dot[0] > 'Z')) {\n        return \"No\";\n\
    \    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppcjmu6ld.cpp: In function 'int main()':\n/tmp/tmppcjmu6ld.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppcjmu6ld.cpp:2:\n/tmp/tmppcjmu6ld.cpp:45:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub1 = file_name.substr(0, file_name.find(\".\"));\n \
    \   std::string sub2 = file_name.substr(file_name.find(\".\") + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0bjq84jj.cpp: In function 'int main()':\n/tmp/tmp0bjq84jj.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0bjq84jj.cpp:2:\n/tmp/tmp0bjq84jj.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count_dot\
    \ = 0;\n    int count_letter = 0;\n    int count_digit = 0;\n    int count_txt\
    \ = 0;\n    int count_exe = 0;\n    int count_dll = 0;\n    for(int i = 0; i <\
    \ file_name.length(); i++) {\n        if(file_name[i] == '.') {\n            count_dot++;\n\
    \        }\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n       \
    \     count_letter++;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count_digit++;\n        }\n        if(file_name[i] ==\
    \ 't' && file_name[i+1] == 'x' && file_name[i+2] == 't') {\n            count_txt++;\n\
    \        }\n        if(file_name[i] == 'e' && file_name[i+1] == 'x' && file_name[i+2]\
    \ == 'e') {\n            count_exe++;\n        }\n        if(file_name[i] == 'd'\
    \ && file_name[i+1] == 'l' && file_name[i+2] == 'l') {\n            count_dll++;\n\
    \        }\n    }\n    if(count_dot == 1 && count_digit <= 3 && count_letter >\
    \ 0 && (count_txt == 1 || count_exe == 1 || count_dll == 1)) {\n        return\
    \ \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpny2mc9r2.cpp: In function 'int main()':\n/tmp/tmpny2mc9r2.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpny2mc9r2.cpp:2:\n/tmp/tmpny2mc9r2.cpp:54:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
