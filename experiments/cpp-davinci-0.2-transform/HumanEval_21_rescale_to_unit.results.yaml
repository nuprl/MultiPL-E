language: cpp
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo1lvr0c.cpp: In function 'int main()':\n/tmp/tmpvo1lvr0c.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvo1lvr0c.cpp:2:\n/tmp/tmpvo1lvr0c.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvo1lvr0c.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvo1lvr0c.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvo1lvr0c.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplpv7oemo.cpp: In function 'int main()':\n/tmp/tmplpv7oemo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplpv7oemo.cpp:2:\n/tmp/tmplpv7oemo.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmplpv7oemo.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmplpv7oemo.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplpv7oemo.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmplpv7oemo.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmplpv7oemo.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uf2m1lu.cpp: In function 'int main()':\n/tmp/tmp5uf2m1lu.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5uf2m1lu.cpp:2:\n/tmp/tmp5uf2m1lu.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5uf2m1lu.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp5uf2m1lu.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp5uf2m1lu.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwpgmp41.cpp: In function 'int main()':\n/tmp/tmpvwpgmp41.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvwpgmp41.cpp:2:\n/tmp/tmpvwpgmp41.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvwpgmp41.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvwpgmp41.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvwpgmp41.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        result.push_back((numbers[i] - min) / range);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbbj9nn8.cpp: In function 'int main()':\n/tmp/tmpqbbj9nn8.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbbj9nn8.cpp:2:\n/tmp/tmpqbbj9nn8.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpqbbj9nn8.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpqbbj9nn8.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbbj9nn8.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpqbbj9nn8.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpqbbj9nn8.cpp:19:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (auto number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9oifdkqw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk_h2_drb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwpgmp41.cpp: In function 'int main()':\n/tmp/tmpvwpgmp41.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvwpgmp41.cpp:2:\n/tmp/tmpvwpgmp41.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvwpgmp41.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvwpgmp41.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvwpgmp41.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / range);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjs9gnfxz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwpgmp41.cpp: In function 'int main()':\n/tmp/tmpvwpgmp41.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvwpgmp41.cpp:2:\n/tmp/tmpvwpgmp41.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvwpgmp41.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvwpgmp41.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvwpgmp41.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvwpgmp41.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max_number = *std::max_element(numbers.begin(), numbers.end());\n  float\
    \ range = max_number - min_number;\n  std::vector<float> rescaled_numbers;\n \
    \ for (auto number : numbers) {\n    rescaled_numbers.push_back((number - min_number)\
    \ / range);\n  }\n  return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptzwvtko2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo6xolbpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoo93o0_a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5gjoim_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvw_7508f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9yfzx6sc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfaf88r5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvfmm16z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> rescaled;\n    for (float number\
    \ : numbers) {\n        rescaled.push_back((number - min) / range);\n    }\n \
    \   return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb30wy4_t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx45698wu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        }\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    float range = max_number - min_number;\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / range);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn91z_s5c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   float range = max_number - min_number;\n    std::vector<float> result;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min_number) / range);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5qkt6wrr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n  float range\
    \ = max - min;\n  std::vector<float> result;\n  for (float number : numbers) {\n\
    \    result.push_back((number - min) / range);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ey0m09o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx45698wu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        result.push_back((numbers[i] - min) / range);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbbj9nn8.cpp: In function 'int main()':\n/tmp/tmpqbbj9nn8.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbbj9nn8.cpp:2:\n/tmp/tmpqbbj9nn8.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpqbbj9nn8.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpqbbj9nn8.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbbj9nn8.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpqbbj9nn8.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpqbbj9nn8.cpp:19:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\
    \tnumbers[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxh5qf57.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> rescaled;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        float rescaled_number = (numbers[i]\
    \ - min) / range;\n        rescaled.push_back(rescaled_number);\n    }\n    return\
    \ rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ekk332d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uf2m1lu.cpp: In function 'int main()':\n/tmp/tmp5uf2m1lu.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5uf2m1lu.cpp:2:\n/tmp/tmp5uf2m1lu.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5uf2m1lu.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp5uf2m1lu.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp5uf2m1lu.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo1lvr0c.cpp: In function 'int main()':\n/tmp/tmpvo1lvr0c.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvo1lvr0c.cpp:2:\n/tmp/tmpvo1lvr0c.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvo1lvr0c.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvo1lvr0c.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvo1lvr0c.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvw_7508f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo1lvr0c.cpp: In function 'int main()':\n/tmp/tmpvo1lvr0c.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvo1lvr0c.cpp:2:\n/tmp/tmpvo1lvr0c.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvo1lvr0c.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvo1lvr0c.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvo1lvr0c.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbpaulq1h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    std::vector<float> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5uf2m1lu.cpp: In function 'int main()':\n/tmp/tmp5uf2m1lu.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5uf2m1lu.cpp:2:\n/tmp/tmp5uf2m1lu.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp5uf2m1lu.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5uf2m1lu.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp5uf2m1lu.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp5uf2m1lu.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // your code here\n    float max = *max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprl54rm8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfaf88r5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxrcmoo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xukeon_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdgl77hmw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89ls9u79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min = numbers[0];\n  float\
    \ max = numbers[0];\n  for (int i = 0; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  std::vector<float> result;\n  for (int i =\
    \ 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min) / (max\
    \ - min));\n  }\n  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn5w1c2kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3m8l8h3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_p691h4h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplgc8bsm3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8vz0hri3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfbopylm0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3m8l8h3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvfmm16z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float max = numbers[0];\n    float min = numbers[0];\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcq69fx5c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdlv9_nb9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx45698wu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvo1lvr0c.cpp: In function 'int main()':\n/tmp/tmpvo1lvr0c.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvo1lvr0c.cpp:2:\n/tmp/tmpvo1lvr0c.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpvo1lvr0c.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvo1lvr0c.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpvo1lvr0c.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpvo1lvr0c.cpp:18:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphxuebu9r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xukeon_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   float range = max_number - min_number;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min_number) / range;\n    }\n   \
    \ return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n  \
    \  assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ascebum.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   float range = max_number - min_number;\n    std::vector<float> rescaled_numbers;\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - min_number) / range);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwu1dhtv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5gjoim_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc7nqm6_e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfaf88r5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / range);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy6w2mzkf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float range\
    \ = max - min;\n  std::vector<float> rescaled;\n  for (auto number : numbers)\
    \ {\n    rescaled.push_back((number - min) / range);\n  }\n  return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp13t2wm7v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (float\
    \ number : numbers) {\n        result.push_back((number - min) / range);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppwdkkmq8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min = numbers[0];\n  float\
    \ max = numbers[0];\n  for (int i = 0; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  for (int i = 0; i < numbers.size(); i++) {\n\
    \    numbers[i] = (numbers[i] - min) / (max - min);\n  }\n  return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvy1yy4c7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> rescaled;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        rescaled.push_back((numbers[i]\
    \ - min) / range);\n    }\n    return rescaled;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuva8mgbx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float diff = max - min;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - min) / diff;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xukeon_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) max = numbers[i];\n        if (numbers[i] < min)\
    \ min = numbers[i];\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n \
    \       numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxlqc45oh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjfaf88r5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    if (numbers[i] < min) {\n      min =\
    \ numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n \
    \   }\n  }\n  std::vector<float> result;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    result.push_back((numbers[i] - min) / (max - min));\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3bcj3okq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9yfzx6sc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float diff = max - min;\n    std::vector<float> result;\n    for (float number\
    \ : numbers) {\n        result.push_back((number - min) / diff);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpng39mdut.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5gjoim_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float number : numbers) {\n        result.push_back((number - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5gjoim_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float scale = 1.0 / (max - min);\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmukczl_a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min = numbers[0];\n  float\
    \ max = numbers[0];\n  for (int i = 0; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  std::vector<float> result;\n  for (int i =\
    \ 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min) / (max\
    \ - min));\n  }\n  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn5w1c2kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ diff = max - min;\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / diff);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc7fpdcek.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxrcmoo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    float range = max - min;\n \
    \   std::vector<float> rescaled;\n    for (float number : numbers) {\n       \
    \ rescaled.push_back((number - min) / range);\n    }\n    return rescaled;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx8_l8e8_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\tfloat diff = max - min;\n\tstd::vector<float>\
    \ result;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tresult.push_back((numbers[i]\
    \ - min) / diff);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpture6uky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto n : numbers) {\n        result.push_back((n - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe4a7rgmc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    std::vector<float> result;\n    for (auto number\
    \ : numbers) {\n        result.push_back((number - min) / range);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjs9gnfxz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  std::vector<float>\
    \ result;\n  for (float number : numbers) {\n    result.push_back((number - min)\
    \ / (max - min));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvh7ze351.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> rescaled;\n    for (float number\
    \ : numbers) {\n        float rescaled_number = (number - min) / range;\n    \
    \    rescaled.push_back(rescaled_number);\n    }\n    return rescaled;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx55qojk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (float number :\
    \ numbers) {\n        result.push_back((number - min) / range);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73xjka56.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp73xjka56.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp73xjka56.cpp: In function 'int main()':\n/tmp/tmp73xjka56.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp73xjka56.cpp:2:\n/tmp/tmp73xjka56.cpp:19:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp73xjka56.cpp:19:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp73xjka56.cpp:19:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp73xjka56.cpp:19:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp73xjka56.cpp:19:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result.push_back((numbers[i] - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw071hzn.cpp: In function 'int main()':\n/tmp/tmpgw071hzn.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgw071hzn.cpp:2:\n/tmp/tmpgw071hzn.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpgw071hzn.cpp:27:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgw071hzn.cpp:27:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpgw071hzn.cpp:27:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpgw071hzn.cpp:27:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl35irdg0.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpl35irdg0.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpl35irdg0.cpp: In function 'int main()':\n/tmp/tmpl35irdg0.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl35irdg0.cpp:2:\n/tmp/tmpl35irdg0.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpl35irdg0.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpl35irdg0.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpl35irdg0.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpl35irdg0.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0mahgd8.cpp: In function 'int main()':\n/tmp/tmpn0mahgd8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn0mahgd8.cpp:2:\n/tmp/tmpn0mahgd8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpn0mahgd8.cpp:26:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn0mahgd8.cpp:26:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpn0mahgd8.cpp:26:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpn0mahgd8.cpp:26:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9yxh4_l.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpb9yxh4_l.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb9yxh4_l.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb9yxh4_l.cpp: In function 'int main()':\n/tmp/tmpb9yxh4_l.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb9yxh4_l.cpp:2:\n/tmp/tmpb9yxh4_l.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpb9yxh4_l.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb9yxh4_l.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpb9yxh4_l.cpp:18:93:\
    \ warning: extended initializer lists only available with -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvfmm16z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748852
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    float diff = max - min;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / diff;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjbk43hol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n  \
    \          min = numbers[i];\n        }\n        if (numbers[i] > max) {\n   \
    \         max = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgnt3vqq.cpp: In function 'int main()':\n/tmp/tmpfgnt3vqq.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgnt3vqq.cpp:2:\n/tmp/tmpfgnt3vqq.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpfgnt3vqq.cpp:25:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfgnt3vqq.cpp:25:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpfgnt3vqq.cpp:25:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpfgnt3vqq.cpp:25:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \       if (numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    std::vector<float> result;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i] - min)\
    \ / range);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95cjpm6.cpp: In function 'int main()':\n/tmp/tmpy95cjpm6.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy95cjpm6.cpp:2:\n/tmp/tmpy95cjpm6.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpy95cjpm6.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy95cjpm6.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpy95cjpm6.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpy95cjpm6.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / range);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy6w2mzkf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748853
