language: cpp
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    float\
    \ sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += std::abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv6dauc7.cpp: In function 'int main()':\n/tmp/tmpiv6dauc7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiv6dauc7.cpp:2:\n/tmp/tmpiv6dauc7.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpiv6dauc7.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpiv6dauc7.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiv6dauc7.cpp:24:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpiv6dauc7.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpiv6dauc7.cpp:25:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0.0;\n    float mean = 0.0;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum\
    \ / numbers.size();\n    float sum_of_differences = 0.0;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        sum_of_differences += abs(numbers[i] - mean);\n\
    \    }\n    return sum_of_differences / numbers.size();\n}\nint main() {\n   \
    \ auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpch5aiyhy.cpp: In function 'int main()':\n/tmp/tmpch5aiyhy.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpch5aiyhy.cpp:2:\n/tmp/tmpch5aiyhy.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpch5aiyhy.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpch5aiyhy.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpch5aiyhy.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpch5aiyhy.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpch5aiyhy.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpch5aiyhy.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpch5aiyhy.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum /\
    \ numbers.size();\n    float sum_of_differences = 0;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        sum_of_differences += abs(numbers[i] - mean);\n\
    \    }\n    return sum_of_differences / numbers.size();\n}\nint main() {\n   \
    \ auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1vxjj615.cpp: In function 'int main()':\n/tmp/tmp1vxjj615.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1vxjj615.cpp:2:\n/tmp/tmp1vxjj615.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp1vxjj615.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp1vxjj615.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1vxjj615.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp1vxjj615.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp1vxjj615.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp1vxjj615.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1vxjj615.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum /\
    \ numbers.size();\n    float sum_of_deviations = 0;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum_of_deviations += abs(numbers[i] - mean);\n    }\n    return\
    \ sum_of_deviations / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozdxgqgi.cpp: In function 'int main()':\n/tmp/tmpozdxgqgi.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpozdxgqgi.cpp:2:\n/tmp/tmpozdxgqgi.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpozdxgqgi.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpozdxgqgi.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpozdxgqgi.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpozdxgqgi.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpozdxgqgi.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpozdxgqgi.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpozdxgqgi.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0.0;\n    float mean = 0.0;\n    float mean_absolute_deviation\
    \ = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \    }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        mean_absolute_deviation += std::abs(numbers[i] - mean);\n  \
    \  }\n    mean_absolute_deviation = mean_absolute_deviation / numbers.size();\n\
    \    return mean_absolute_deviation;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6rh08o1.cpp: In function 'int main()':\n/tmp/tmpl6rh08o1.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl6rh08o1.cpp:2:\n/tmp/tmpl6rh08o1.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpl6rh08o1.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpl6rh08o1.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpl6rh08o1.cpp:26:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpl6rh08o1.cpp:27:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpl6rh08o1.cpp:27:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpl6rh08o1.cpp:27:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpl6rh08o1.cpp:27:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n  \
    \  int i;\n    for (i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \    }\n    mean = sum / numbers.size();\n    for (i = 0; i < numbers.size();\
    \ i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n\
    \    return mad;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhg8qe8y.cpp: In function 'int main()':\n/tmp/tmpxhg8qe8y.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxhg8qe8y.cpp:2:\n/tmp/tmpxhg8qe8y.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpxhg8qe8y.cpp:27:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpxhg8qe8y.cpp:27:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxhg8qe8y.cpp:27:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpxhg8qe8y.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpxhg8qe8y.cpp:28:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpxhg8qe8y.cpp:28:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpxhg8qe8y.cpp:28:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    float\
    \ sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += std::abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv6dauc7.cpp: In function 'int main()':\n/tmp/tmpiv6dauc7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiv6dauc7.cpp:2:\n/tmp/tmpiv6dauc7.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpiv6dauc7.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpiv6dauc7.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiv6dauc7.cpp:24:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpiv6dauc7.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpiv6dauc7.cpp:25:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum /\
    \ numbers.size();\n    float sum_deviation = 0;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum_deviation += abs(numbers[i] - mean);\n    }\n    return\
    \ sum_deviation / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbspwtqx.cpp: In function 'int main()':\n/tmp/tmpvbspwtqx.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvbspwtqx.cpp:2:\n/tmp/tmpvbspwtqx.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpvbspwtqx.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpvbspwtqx.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvbspwtqx.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpvbspwtqx.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpvbspwtqx.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpvbspwtqx.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpvbspwtqx.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n\
    \    float sum_of_differences = 0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        sum_of_differences += abs(numbers[i] - mean);\n    }\n    return\
    \ sum_of_differences / numbers.size();\n}\nint main() {\n    auto candidate =\
    \ mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3fhcl58.cpp: In function 'int main()':\n/tmp/tmpp3fhcl58.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp3fhcl58.cpp:2:\n/tmp/tmpp3fhcl58.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpp3fhcl58.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpp3fhcl58.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpp3fhcl58.cpp:24:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpp3fhcl58.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpp3fhcl58.cpp:25:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpp3fhcl58.cpp:25:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpp3fhcl58.cpp:25:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    float sum = 0.0;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum\
    \ / numbers.size();\n    float sum_of_differences = 0.0;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        sum_of_differences += std::abs(numbers[i]\
    \ - mean);\n    }\n    return sum_of_differences / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_d861kry.cpp: In function 'int main()':\n/tmp/tmp_d861kry.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_d861kry.cpp:2:\n/tmp/tmp_d861kry.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp_d861kry.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp_d861kry.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_d861kry.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp_d861kry.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp_d861kry.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp_d861kry.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp_d861kry.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    float\
    \ sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += std::abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv6dauc7.cpp: In function 'int main()':\n/tmp/tmpiv6dauc7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiv6dauc7.cpp:2:\n/tmp/tmpiv6dauc7.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpiv6dauc7.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpiv6dauc7.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiv6dauc7.cpp:24:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpiv6dauc7.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpiv6dauc7.cpp:25:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n  \
    \  }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n\
    \    return mad;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2z4r7zsh.cpp: In function 'int main()':\n/tmp/tmp2z4r7zsh.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2z4r7zsh.cpp:2:\n/tmp/tmp2z4r7zsh.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp2z4r7zsh.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp2z4r7zsh.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2z4r7zsh.cpp:26:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp2z4r7zsh.cpp:27:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2z4r7zsh.cpp:27:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 0);\n    float sum = 0;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    float\
    \ mean = sum / numbers.size();\n    float sum_of_deviations = 0;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        sum_of_deviations += abs(numbers[i]\
    \ - mean);\n    }\n    return sum_of_deviations / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr42yyc9b.cpp: In function 'int main()':\n/tmp/tmpr42yyc9b.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr42yyc9b.cpp:2:\n/tmp/tmpr42yyc9b.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpr42yyc9b.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpr42yyc9b.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr42yyc9b.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpr42yyc9b.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpr42yyc9b.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpr42yyc9b.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpr42yyc9b.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0.0;\n    float mean = 0.0;\n    float MAD = 0.0;\n\
    \    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ numbers[i];\n    }\n    mean = sum / n;\n    for (int i = 0; i < n; i++) {\n\
    \        MAD += abs(numbers[i] - mean);\n    }\n    return MAD / n;\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04di7_oh.cpp: In function 'int main()':\n/tmp/tmp04di7_oh.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04di7_oh.cpp:2:\n/tmp/tmp04di7_oh.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp04di7_oh.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp04di7_oh.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp04di7_oh.cpp:26:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp04di7_oh.cpp:27:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp04di7_oh.cpp:27:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp04di7_oh.cpp:27:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp04di7_oh.cpp:27:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum /\
    \ numbers.size();\n    float sum_abs = 0;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum_abs += std::abs(numbers[i] - mean);\n    }\n    return sum_abs\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ohy_1bh.cpp: In function 'int main()':\n/tmp/tmp2ohy_1bh.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ohy_1bh.cpp:2:\n/tmp/tmp2ohy_1bh.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp2ohy_1bh.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp2ohy_1bh.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2ohy_1bh.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp2ohy_1bh.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp2ohy_1bh.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp2ohy_1bh.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2ohy_1bh.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n  \
    \  }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n\
    \    return mad;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2z4r7zsh.cpp: In function 'int main()':\n/tmp/tmp2z4r7zsh.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2z4r7zsh.cpp:2:\n/tmp/tmp2z4r7zsh.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp2z4r7zsh.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp2z4r7zsh.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2z4r7zsh.cpp:26:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp2z4r7zsh.cpp:27:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2z4r7zsh.cpp:27:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n  \
    \  }\n    mean = sum / numbers.size();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n\
    \    return mad;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2z4r7zsh.cpp: In function 'int main()':\n/tmp/tmp2z4r7zsh.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2z4r7zsh.cpp:2:\n/tmp/tmp2z4r7zsh.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp2z4r7zsh.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp2z4r7zsh.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2z4r7zsh.cpp:26:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp2z4r7zsh.cpp:27:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmp2z4r7zsh.cpp:27:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2z4r7zsh.cpp:27:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    float\
    \ mad = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        mad += abs(numbers[i]\
    \ - mean);\n    }\n    mad /= numbers.size();\n    return mad;\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwiop76of.cpp: In function 'int main()':\n/tmp/tmpwiop76of.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwiop76of.cpp:2:\n/tmp/tmpwiop76of.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwiop76of.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwiop76of.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwiop76of.cpp:25:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwiop76of.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpwiop76of.cpp:26:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpwiop76of.cpp:26:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwiop76of.cpp:26:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = 0;\n    float mad = 0;\n  \
    \  int i;\n    for (i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \    }\n    mean = sum / numbers.size();\n    for (i = 0; i < numbers.size();\
    \ i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n\
    \    return mad;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhg8qe8y.cpp: In function 'int main()':\n/tmp/tmpxhg8qe8y.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxhg8qe8y.cpp:2:\n/tmp/tmpxhg8qe8y.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpxhg8qe8y.cpp:27:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpxhg8qe8y.cpp:27:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxhg8qe8y.cpp:27:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpxhg8qe8y.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpxhg8qe8y.cpp:28:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpxhg8qe8y.cpp:28:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpxhg8qe8y.cpp:28:90: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = 0.0;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    float\
    \ sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += std::abs(numbers[i]\
    \ - mean);\n    }\n    return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv6dauc7.cpp: In function 'int main()':\n/tmp/tmpiv6dauc7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiv6dauc7.cpp:2:\n/tmp/tmpiv6dauc7.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpiv6dauc7.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpiv6dauc7.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiv6dauc7.cpp:24:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpiv6dauc7.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                                \
    \                                          ^\n/tmp/tmpiv6dauc7.cpp:25:90: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpiv6dauc7.cpp:25:90: error: no matching"
  stdout: ''
