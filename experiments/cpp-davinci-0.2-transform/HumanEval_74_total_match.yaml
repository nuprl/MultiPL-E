name: HumanEval_74_total_match
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ two lists of strings and returns the list that has \n// total number of chars\
  \ in the all strings of the list less than the other list.\n// if the two lists\
  \ have the same number of chars, return the first list.\n// Examples\n// >>> total_match((std::vector<std::string>()),\
  \ (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"\
  , (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"\
  hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
  4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
  \ lst2) {\n"
tests: "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\",\
  \ (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
  4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
  }))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
  \ == (std::vector<std::string>()));\n}\n"
completions: ["\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n\
    \    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i\
    \ = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int\
    \ i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n    }\n   \
    \ if(sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }", "    int total1\
    \ = 0;\n    int total2 = 0;\n    for (auto s : lst1) {\n        total1 += s.size();\n\
    \    }\n    for (auto s : lst2) {\n        total2 += s.size();\n    }\n    if\
    \ (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }", "\tint sum1\
    \ = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 +=\
    \ lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 +=\
    \ lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}", "\tint total_chars_lst1 = 0;\n\tint total_chars_lst2 =\
    \ 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\ttotal_chars_lst1 += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\ttotal_chars_lst2 += lst2[i].size();\n\
    \t}\n\tif (total_chars_lst1 < total_chars_lst2) {\n\t\treturn lst1;\n\t}\n\telse\
    \ {\n\t\treturn lst2;\n\t}", "\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1\
    \ > total2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}", "\tint\
    \ total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\
    \ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n\
    \    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i <\
    \ lst1.size(); i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i =\
    \ 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n    }",
  "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\
    \ {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }", "    int sum1 = 0;\n    int\
    \ sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }", "\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\
    \ {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\
    \t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse\
    \ {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int\
    \ i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n    }\n   \
    \ for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n  \
    \  }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n       \
    \ return lst2;\n    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i =\
    \ 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int\
    \ i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n    }\n   \
    \ if(sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }", "\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}", "    int total1 = 0;\n    int total2 =\
    \ 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        total1 += lst1[i].size();\n\
    \    }\n    for (int i = 0; i < lst2.size(); i++) {\n        total2 += lst2[i].size();\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    return lst2;",
  "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\
    \ {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }"]
stop_tokens:
- "\n}"
