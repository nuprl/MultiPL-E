name: HumanEval_148_bf
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in\
  \ our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus,\
  \ then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function\
  \ that takes two planet names as strings planet1 and planet2. \n// The function\
  \ should return a tuple containing all planets whose orbits are \n// located between\
  \ the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to\
  \ the sun. \n// The function should return an empty tuple if planet1 or planet2\n\
  // are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"\
  ))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
  }))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"\
  ))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
  Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
  , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string\
  \ planet2) {\n"
tests: "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
  ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
  Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
  Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
  Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
  , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"))\
  \ == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"\
  Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"\
  Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
completions: ["    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 >\
    \ p2) {\n        int temp = p1;\n        p1 = p2;\n        p2 = temp;\n    }\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    std::vector<std::string> result;\n    int start = -1;\n\
    \    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if\
    \ (planets[i] == planet1) {\n            start = i;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = i;\n        }\n    }\n    if (start == -1 ||\
    \ end == -1) {\n        return result;\n    }\n    if (start > end) {\n      \
    \  std::swap(start, end);\n    }\n    for (int i = start + 1; i < end; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1\
    \ = -1, p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) p1 = i;\n        if (planets[i] == planet2) p2 = i;\n    }\n   \
    \ if (p1 == -1 || p2 == -1) return result;\n    if (p1 > p2) std::swap(p1, p2);\n\
    \    for (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int start = -1;\n    int end = -1;\n\
    \    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1)\
    \ {\n            start = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            end = i;\n        }\n    }\n    if (start == -1 || end == -1) {\n\
    \        return result;\n    }\n    if (start < end) {\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.push_back(planets[i]);\n        }\n\
    \    } else {\n        for (int i = end + 1; i < start; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i1 = -1, i2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            i1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n\
    \        return res;\n    }\n    if (i1 > i2) {\n        std::swap(i1, i2);\n\
    \    }\n    for (int i = i1 + 1; i < i2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        int temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1 + 1; i < p2; i++) {\n        result.push_back(planets[i]);\n   \
    \ }\n    return result;", "    std::vector<std::string> planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    };\n    std::vector<std::string> result;\n    int i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n    int i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n    if (i1 == planets.size() ||\
    \ i2 == planets.size()) {\n        return result;\n    }\n    if (i1 > i2) {\n\
    \        std::swap(i1, i2);\n    }\n    for (int i = i1 + 1; i < i2; i++) {\n\
    \        result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return res;\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int p1 = -1, p2 = -1;\n    for (int\
    \ i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n  \
    \          p1 = i;\n        }\n        if (planets[i] == planet2) {\n        \
    \    p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n        return\
    \ result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.push_back(planets[i]);\n        }\n    } else {\n    \
    \    for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1 = -1,\
    \ p2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            p1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            p2 = i;\n        }\n    }\n    if (p1 == -1 || p2 == -1) {\n\
    \        return result;\n    }\n    if (p1 < p2) {\n        for (int i = p1 +\
    \ 1; i < p2; i++) {\n            result.push_back(planets[i]);\n        }\n  \
    \  } else {\n        for (int i = p2 + 1; i < p1; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> res;\n    int i = 0;\n \
    \   while (planets[i] != planet1) {\n        i++;\n    }\n    int j = 0;\n   \
    \ while (planets[j] != planet2) {\n        j++;\n    }\n    if (i > j) {\n   \
    \     for (int k = j; k < i; k++) {\n            res.push_back(planets[k]);\n\
    \        }\n    } else {\n        for (int k = i; k < j; k++) {\n            res.push_back(planets[k]);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n    std::vector<std::string> result;\n    int i = 0;\n    while\
    \ (planets[i] != planet1) {\n        i++;\n    }\n    int j = 0;\n    while (planets[j]\
    \ != planet2) {\n        j++;\n    }\n    if (i > j) {\n        std::swap(i, j);\n\
    \    }\n    for (int k = i + 1; k < j; k++) {\n        result.push_back(planets[k]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        std::swap(index1, index2);\n    }\n    for (int i = index1 + 1; i\
    \ < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;",
  "    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int index1 = -1;\n    int index2 = -1;\n    for (int i = 0; i <\
    \ planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1\
    \ = i;\n        }\n        if (planets[i] == planet2) {\n            index2 =\
    \ i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (int i = index1 + 1;\
    \ i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n \
    \   } else {\n        for (int i = index2 + 1; i < index1; i++) {\n          \
    \  result.push_back(planets[i]);\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int p1 = -1, p2 = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            p1 = i;\n        }\n\
    \        if (planets[i] == planet2) {\n            p2 = i;\n        }\n    }\n\
    \    if (p1 == -1 || p2 == -1) {\n        return result;\n    }\n    if (p1 <\
    \ p2) {\n        for (int i = p1 + 1; i < p2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = p2 + 1; i < p1; i++) {\n      \
    \      result.push_back(planets[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int start = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start = i;\n     \
    \   }\n        if (planets[i] == planet2) {\n            end = i;\n        }\n\
    \    }\n    if (start == -1 || end == -1) {\n        return result;\n    }\n \
    \   if (start > end) {\n        int temp = start;\n        start = end;\n    \
    \    end = temp;\n    }\n    for (int i = start + 1; i < end; i++) {\n       \
    \ result.push_back(planets[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int start\
    \ = -1;\n    int end = -1;\n    for (int i = 0; i < planets.size(); i++) {\n \
    \       if (planets[i] == planet1) {\n            start = i;\n        }\n    \
    \    if (planets[i] == planet2) {\n            end = i;\n        }\n    }\n  \
    \  if (start == -1 || end == -1) {\n        return result;\n    }\n    if (start\
    \ > end) {\n        int temp = start;\n        start = end;\n        end = temp;\n\
    \    }\n    for (int i = start + 1; i < end; i++) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1\
    \ || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2)\
    \ {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n\
    \        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n\
    \            result.push_back(planets[i]);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
