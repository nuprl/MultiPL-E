name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort an array of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5,\
  \ (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  std::vector<long> result;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      result.push_back(arr[i]);\n    } else {\n      int count = 0;\n      long\
    \ num = arr[i];\n      while (num > 0) {\n        if (num % 2 == 1) {\n      \
    \    count++;\n        }\n        num = num / 2;\n      }\n      if (count ==\
    \ 0) {\n        zero_count.push_back(arr[i]);\n      } else {\n        one_count.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(one_count.begin(), one_count.end());\n  std::sort(zero_count.begin(),\
    \ zero_count.end());\n  for (int i = 0; i < one_count.size(); i++) {\n    result.push_back(one_count[i]);\n\
    \  }\n  for (int i = 0; i < zero_count.size(); i++) {\n    result.push_back(zero_count[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negatives;\n  std::vector<long>\
    \ positives;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      negatives.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < negatives.size(); i++) {\n    result.push_back(negatives[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    result.push_back(positives[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> temp;\n\
    \  std::vector<long> temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n\
    \  std::vector<long> temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n\
    \  std::vector<long> temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n\
    \  std::vector<long> temp11;\n  std::vector<long> temp12;\n  std::vector<long>\
    \ temp13;\n  std::vector<long> temp14;\n  std::vector<long> temp15;\n  std::vector<long>\
    \ temp16;\n  std::vector<long> temp17;\n  std::vector<long> temp18;\n  std::vector<long>\
    \ temp19;\n  std::vector<long> temp20;\n  std::vector<long> temp21;\n  std::vector<long>\
    \ temp22;\n  std::vector<long> temp23;\n  std::vector<long> temp24;\n  std::vector<long>\
    \ temp25;\n  std::vector<long> temp26;\n  std::vector<long> temp27;\n  std::vector<long>\
    \ temp28;\n  std::vector<long> temp29;\n  std::vector<long> temp30;\n  std::vector<long>\
    \ temp31;\n  std::vector<long> temp32;\n  std::vector<long> temp33;\n  std::vector<long>\
    \ temp34;\n  std::vector<long> temp35;\n  std::vector<long> temp36;\n  std::vector<long>\
    \ temp37;\n  std::vector<long> temp38;\n  std::vector<long> temp39;\n  std::vector<long>\
    \ temp40;\n  std::vector<long> temp41;\n  std::vector<long> temp42;\n  std::vector<long>\
    \ temp43;\n  std::vector<long> temp44;\n  std::vector<long> temp45;\n  std::vector<long>",
  "  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n    while\
    \ (num) {\n      if (num & 1) {\n        count++;\n      }\n      num = num >>\
    \ 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> neg;\n  std::vector<long> pos;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n\
    \    } else {\n      pos.push_back(arr[i]);\n    }\n  }\n  std::sort(neg.begin(),\
    \ neg.end());\n  std::sort(pos.begin(), pos.end());\n  for (int i = 0; i < pos.size();\
    \ i++) {\n    int count = 0;\n    int temp = pos[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp = temp / 2;\n\
    \    }\n    if (count == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n\
    \      ones.push_back(pos[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < neg.size(); i++) {\n    result.push_back(neg[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n  \
    \  std::sort(i.second.begin(), i.second.end());\n    for (auto j : i.second) {\n\
    \      result.push_back(j);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n\
    \      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n    }\n  }\n\
    \  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(), ones.end());\n\
    \  std::vector<long> result;\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ ans;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> neg;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(neg.begin(), neg.end());\n  std::reverse(neg.begin(), neg.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < neg.size(); i++) {\n    sorted.push_back(neg[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<long> one_count;\n\
    \  std::vector<long> zero_count;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      int\
    \ count = 0;\n      int temp = arr[i];\n      while (temp != 0) {\n        if\
    \ (temp % 2 == 1) {\n          count++;\n        }\n        temp = temp / 2;\n\
    \      }\n      if (count == 0) {\n        zero_count.push_back(arr[i]);\n   \
    \   } else {\n        one_count.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(one_count.begin(),\
    \ one_count.end());\n  std::sort(zero_count.begin(), zero_count.end());\n  for\
    \ (int i = 0; i < one_count.size(); i++) {\n    result.push_back(one_count[i]);\n\
    \  }\n  for (int i = 0; i < zero_count.size(); i++) {\n    result.push_back(zero_count[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_count;\n  for (auto i : arr) {\n    int count = 0;\n    long num\
    \ = i;\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n \
    \     }\n      num /= 2;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (auto i\
    \ : ones_count) {\n    result.push_back(i.second);\n  }\n  return result;", " \
    \   // your code here\n    std::vector<long> sorted;\n    std::vector<long> sorted_ones;\n\
    \    std::vector<long> sorted_zeros;\n    std::vector<long> sorted_neg;\n    std::vector<long>\
    \ sorted_neg_ones;\n    std::vector<long> sorted_neg_zeros;\n    std::vector<long>\
    \ sorted_neg_zeros_ones;\n    std::vector<long> sorted_neg_ones_zeros;\n    std::vector<long>\
    \ sorted_zeros_ones;\n    std::vector<long> sorted_ones_zeros;\n    std::vector<long>\
    \ sorted_neg_zeros_ones_zeros;\n    std::vector<long> sorted_neg_ones_zeros_ones;\n\
    \    std::vector<long> sorted_zeros_ones_zeros;\n    std::vector<long> sorted_ones_zeros_ones;\n\
    \    std::vector<long> sorted_neg_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_neg_ones_zeros_ones_zeros;\n    std::vector<long> sorted_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_ones_zeros_ones_zeros;\n    std::vector<long> sorted_neg_zeros_ones_zeros_ones_zeros;\n\
    \    std::vector<long> sorted_neg_ones_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_zeros_ones_zeros_ones_zeros;\n    std::vector<long> sorted_ones_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_neg_zeros_ones_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_neg_ones_zeros_ones_zeros_ones_zeros;\n    std::vector<long> sorted_zeros_ones_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_ones_zeros_ones_zeros_ones_zeros;\n    std::vector<long>\
    \ sorted_", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long> zeros_arr;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_arr.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n  for (int i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (int i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto\
    \ i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ if (num & 1) {\n        count++;\n      }\n      num = num >> 1;\n    }\n  \
    \  ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones\
    \ = 0;\n    int decimal = arr[i];\n    while (decimal > 0) {\n      if (decimal\
    \ % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int countA = 0, countB = 0;\n    while (a > 0) {\n      countA +=\
    \ a % 2;\n      a /= 2;\n    }\n    while (b > 0) {\n      countB += b % 2;\n\
    \      b /= 2;\n    }\n    if (countA == countB)\n      return a < b;\n    return\
    \ countA < countB;\n  });\n  return arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ sorted_ones;\n  std::vector<long> sorted_zeros;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else {\n     \
    \ sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  sorted.insert(sorted.end(), sorted_zeros.begin(), sorted_zeros.end());\n  sorted.insert(sorted.end(),\
    \ sorted_ones.begin(), sorted_ones.end());\n  return sorted;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) {\n    int onesA = std::bitset<32>(a).count();\n\
    \    int onesB = std::bitset<32>(b).count();\n    if (onesA == onesB) {\n    \
    \  return a < b;\n    }\n    return onesA < onesB;\n  });\n  return arr;", " \
    \ std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if (i\
    \ % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto num : arr) {\n    int count = 0;\n    while (num > 0) {\n      if\
    \ (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    map[count].push_back(num);\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (auto num : it->second) {\n      result.push_back(num);\n\
    \    }\n  }\n  return result;", "  std::vector<long> result;\n  std::map<int,\
    \ std::vector<long>> map;\n  for (auto i : arr) {\n    int count = 0;\n    while\
    \ (i) {\n      if (i & 1)\n        count++;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> pairs;\n  for (auto i : arr) {\n    long count = 0;\n    long temp =\
    \ i;\n    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n \
    \     temp >>= 1;\n    }\n    pairs.push_back(std::make_pair(count, i));\n  }\n\
    \  std::sort(pairs.begin(), pairs.end());\n  for (auto i : pairs) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ temp;\n    std::vector<long> temp2;\n    std::vector<long> temp3;\n    std::vector<long>\
    \ temp4;\n    std::vector<long> temp5;\n    std::vector<long> temp6;\n    std::vector<long>\
    \ temp7;\n    std::vector<long> temp8;\n    std::vector<long> temp9;\n    std::vector<long>\
    \ temp10;\n    std::vector<long> temp11;\n    std::vector<long> temp12;\n    std::vector<long>\
    \ temp13;\n    std::vector<long> temp14;\n    std::vector<long> temp15;\n    std::vector<long>\
    \ temp16;\n    std::vector<long> temp17;\n    std::vector<long> temp18;\n    std::vector<long>\
    \ temp19;\n    std::vector<long> temp20;\n    std::vector<long> temp21;\n    std::vector<long>\
    \ temp22;\n    std::vector<long> temp23;\n    std::vector<long> temp24;\n    std::vector<long>\
    \ temp25;\n    std::vector<long> temp26;\n    std::vector<long> temp27;\n    std::vector<long>\
    \ temp28;\n    std::vector<long> temp29;\n    std::vector<long> temp30;\n    std::vector<long>\
    \ temp31;\n    std::vector<long> temp32;\n    std::vector<long> temp33;\n    std::vector<long>\
    \ temp34;\n    std::vector<long> temp35;\n    std::vector<long> temp36;\n    std::vector<long>\
    \ temp37;\n    std::vector<long> temp38;\n    std::vector<long> temp39;\n    std::vector<long>\
    \ temp40;\n    std::vector<long> temp41;\n    std::vector<long> temp42;\n    std::vector<long>\
    \ temp43;\n    std::vector<long> temp44;\n    std::vector<long> temp45;\n    std::vector<long>",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> m;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32; j++) {\n      if\
    \ (i & (1 << j)) {\n        count++;\n      }\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, long>>\
    \ ones;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while\
    \ (num) {\n      if (num & 1) {\n        count++;\n      }\n      num = num >>\
    \ 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    sorted.push_back(i.second);\n  }\n\
    \  return sorted;", "  std::vector<long> res;\n  std::vector<std::pair<int, int>>\
    \ ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int\
    \ temp = arr[i];\n    while (temp) {\n      if (temp & 1) {\n        count++;\n\
    \      }\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    res.push_back(ones[i].second);\n  }\n  return res;", "    std::vector<long>\
    \ result;\n    std::vector<std::pair<int, long>> temp;\n    for (auto i : arr)\
    \ {\n        int count = 0;\n        int num = i;\n        while (num) {\n   \
    \         count += num & 1;\n            num >>= 1;\n        }\n        temp.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i : temp)\
    \ {\n        result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> v;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    int temp = i;\n    while (temp) {\n      count += temp & 1;\n\
    \      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n \
    \ std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int count_a = 0, count_b = 0;\n    while (a > 0) {\n      count_a\
    \ += a & 1;\n      a >>= 1;\n    }\n    while (b > 0) {\n      count_b += b &\
    \ 1;\n      b >>= 1;\n    }\n    return count_a == count_b ? a < b : count_a <\
    \ count_b;\n  });\n  return arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ zero;\n  std::vector<long> one;\n  std::vector<long> two;\n  std::vector<long>\
    \ three;\n  std::vector<long> four;\n  std::vector<long> five;\n  std::vector<long>\
    \ six;\n  std::vector<long> seven;\n  std::vector<long> eight;\n  std::vector<long>\
    \ nine;\n  std::vector<long> ten;\n  std::vector<long> eleven;\n  std::vector<long>\
    \ twelve;\n  std::vector<long> thirteen;\n  std::vector<long> fourteen;\n  std::vector<long>\
    \ fifteen;\n  std::vector<long> sixteen;\n  std::vector<long> seventeen;\n  std::vector<long>\
    \ eighteen;\n  std::vector<long> nineteen;\n  std::vector<long> twenty;\n  std::vector<long>\
    \ twentyone;\n  std::vector<long> twentytwo;\n  std::vector<long> twentythree;\n\
    \  std::vector<long> twentyfour;\n  std::vector<long> twentyfive;\n  std::vector<long>\
    \ twentysix;\n  std::vector<long> twentyseven;\n  std::vector<long> twentyeight;\n\
    \  std::vector<long> twentynine;\n  std::vector<long> thirty;\n  std::vector<long>\
    \ thirtyone;\n  std::vector<long> thirtytwo;\n  std::vector<long> thirtythree;\n\
    \  std::vector<long> thirtyfour;\n  std::vector<long> thirtyfive;\n  std::vector<long>\
    \ thirtysix;\n  std::vector<long> thirtyseven;\n  std::vector<long> thirtyeight;\n\
    \  std::vector<long> thirtynine;\n  std::vector<long> forty;\n  std::vector<long>\
    \ fortyone;\n  std::vector<long> fortytwo;\n  std::vector<long> fortythree;\n\
    \  std::vector<long> fortyfour;\n  std::vector<long> fortyfive;\n  std::vector<long>\
    \ fortysix;\n  std::vector<", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> negatives;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      negatives.push_back(i);\n    } else if (i\
    \ == 0) {\n      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n\
    \    }\n  }\n  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : negatives)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : zeros) {\n    sorted.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n  }\n  return sorted;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (long\
    \ num : arr) {\n    int count = 0;\n    while (num) {\n      count += num & 1;\n\
    \      num >>= 1;\n    }\n    map[count].push_back(num);\n  }\n  for (auto it\
    \ = map.begin(); it != map.end(); ++it) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    result.insert(result.end(), it->second.begin(), it->second.end());\n  }\n\
    \  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n\
    \    int ones_a = std::bitset<32>(a).count();\n    int ones_b = std::bitset<32>(b).count();\n\
    \    if (ones_a == ones_b) {\n      return a < b;\n    }\n    return ones_a <\
    \ ones_b;\n  });\n  return arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int temp = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n\
    \        count++;\n      }\n      temp /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      sorted_arr.push_back(j);\n    }\n  }\n \
    \ return sorted_arr;", "  // your code here\n  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<std::pair<long,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n   \
    \   count += i & 1;\n      i >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for\
    \ (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long>\
    \ res;\n  std::map<long, long> map;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    long count = 0;\n    long num = arr[i];\n    while (num) {\n      count +=\
    \ num & 1;\n      num >>= 1;\n    }\n    map[count] = arr[i];\n  }\n  for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n    res.push_back(it->second);\n\
    \  }\n  return res;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ mp;\n  for (auto x : arr) {\n    int cnt = 0;\n    while (x) {\n      cnt +=\
    \ x & 1;\n      x >>= 1;\n    }\n    mp[cnt].push_back(x);\n  }\n  for (auto x\
    \ : mp) {\n    std::sort(x.second.begin(), x.second.end());\n    res.insert(res.end(),\
    \ x.second.begin(), x.second.end());\n  }\n  return res;", "  std::vector<std::pair<int,\
    \ int>> v;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n    \
    \  count += i & 1;\n      i >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for\
    \ (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> temp;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ if (num & 1) {\n        count++;\n      }\n      num = num >> 1;\n    }\n  \
    \  temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ count += num & 1;\n      num >>= 1;\n    }\n    sorted.push_back(count);\n \
    \ }\n  for (int i = 0; i < arr.size(); i++) {\n    for (int j = i + 1; j < arr.size();\
    \ j++) {\n      if (sorted[i] > sorted[j]) {\n        std::swap(sorted[i], sorted[j]);\n\
    \        std::swap(arr[i], arr[j]);\n      }\n    }\n  }\n  return arr;", "  std::vector<long>\
    \ sorted_arr;\n  std::map<int, std::vector<long>> ones_map;\n  for (auto i : arr)\
    \ {\n    int ones = 0;\n    while (i) {\n      ones += i & 1;\n      i >>= 1;\n\
    \    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto i : ones_map) {\n \
    \   std::sort(i.second.begin(), i.second.end());\n    sorted_arr.insert(sorted_arr.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return sorted_arr;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> sorted;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long temp =\
    \ arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    result.push_back(count);\n  }\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int min = i;\n    for (int j = i + 1; j <\
    \ arr.size(); j++) {\n      if (result[j] < result[min]) {\n        min = j;\n\
    \      }\n    }\n    if (min != i) {\n      std::swap(result[i], result[min]);\n\
    \      std::swap(arr[i], arr[min]);\n    }\n  }\n  return arr;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n   \
    \   count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    long temp = arr[i];\n    while (temp) {\n      count += temp & 1;\n     \
    \ temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n\
    \  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size(); i++)\
    \ {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n  for (auto i\
    \ = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal = arr[i];\n\
    \    while (decimal > 0) {\n      ones += decimal % 2;\n      decimal /= 2;\n\
    \    }\n    ones_and_decimal.push_back(std::make_pair(ones, arr[i]));\n  }\n \
    \ std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> neg;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(neg.begin(), neg.end());\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < neg.size(); i++)\
    \ {\n    result.push_back(neg[i]);\n  }\n  for (int i = 0; i < zeros.size(); i++)\
    \ {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\
    \ {\n        count++;\n      }\n      i >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, long>>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long\
    \ num = arr[i];\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n\
    \    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      if (num & 1) {\n        count++;\n\
    \      }\n      num = num >> 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ negatives;\n  std::vector<long> positives;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n    } else\
    \ if (arr[i] > 0) {\n      positives.push_back(arr[i]);\n    } else {\n      zeros.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(negatives.begin(), negatives.end());\n  std::sort(positives.begin(),\
    \ positives.end());\n  for (long i = 0; i < positives.size(); i++) {\n    ones.push_back(std::bitset<32>(positives[i]).count());\n\
    \  }\n  for (long i = 0; i < negatives.size(); i++) {\n    ones.push_back(std::bitset<32>(negatives[i]).count());\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (long i = 0; i < ones.size();\
    \ i++) {\n    for (long j = 0; j < positives.size(); j++) {\n      if (ones[i]\
    \ == std::bitset<32>(positives[j]).count()) {\n        result.push_back(positives[j]);\n\
    \        positives.erase(positives.begin() + j);\n        break;\n      }\n  \
    \  }\n    for (long j = 0; j < negatives.size(); j++) {\n      if (ones[i] ==\
    \ std::bitset<32>(negatives[j]).count()) {\n        result.push_back(negatives[j]);\n\
    \        negatives.erase(negatives.begin() + j);\n        break;\n      }\n  \
    \  }\n  }\n  for (long i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<long,long>>\
    \ pairs;\n  for(auto i: arr) {\n    long count = 0;\n    long temp = i;\n    while(temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    pairs.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(pairs.begin(), pairs.end());\n  for(auto i: pairs) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, long>> ones_count;\n  for (auto i : arr)\
    \ {\n    int count = 0;\n    long temp = i;\n    while (temp) {\n      count +=\
    \ temp & 1;\n      temp >>= 1;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (auto i\
    \ : ones_count) {\n    result.push_back(i.second);\n  }\n  return result;", " \
    \ std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0)\
    \ {\n      if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> ones;\n  for (auto i : arr) {\n   \
    \ int count = 0;\n    int temp = i;\n    while (temp > 0) {\n      if (temp %\
    \ 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long> result;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long> neg;\n\
    \  std::vector<long> pos;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ < 0) {\n      neg.push_back(arr[i]);\n    } else {\n      pos.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(neg.begin(), neg.end());\n  std::sort(pos.begin(), pos.end());\n\
    \  for (int i = 0; i < pos.size(); i++) {\n    if (__builtin_popcount(pos[i])\
    \ == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n      ones.push_back(pos[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < neg.size(); i++) {\n    result.push_back(neg[i]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::vector<std::pair<int,\
    \ long>> ones;\n    for (auto i : arr) {\n        int count = 0;\n        long\
    \ temp = i;\n        while (temp) {\n            if (temp & 1) {\n           \
    \     count++;\n            }\n            temp >>= 1;\n        }\n        ones.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (auto i : ones)\
    \ {\n        result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n  \
    \  int count = 0;\n    long temp = i;\n    while (temp) {\n      count += temp\
    \ & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> res;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (long i : arr) {\n    int count = 0;\n    while (i > 0)\
    \ {\n      if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    res.push_back(i.second);\n  }\n \
    \ return res;", "  std::vector<long> res;\n  std::vector<std::pair<int, int>>\
    \ v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num\
    \ = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n\
    \      }\n      num /= 2;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size(); i++) {\n\
    \    res.push_back(v[i].second);\n  }\n  return res;", "  std::vector<long> ans;\n\
    \  std::vector<std::pair<int, long>> v;\n  for (long i : arr) {\n    int cnt =\
    \ 0;\n    while (i) {\n      cnt += i % 2;\n      i /= 2;\n    }\n    v.push_back({cnt,\
    \ i});\n  }\n  std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    ans.push_back(i.second);\n\
    \  }\n  return ans;", "  std::sort(arr.begin(), arr.end(), [](long a, long b)\
    \ {\n    int countA = std::bitset<32>(a).count();\n    int countB = std::bitset<32>(b).count();\n\
    \    if (countA == countB) {\n      return a < b;\n    }\n    return countA <\
    \ countB;\n  });\n  return arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while\
    \ (num) {\n      ones += num & 1;\n      num >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    result.push_back(pair.second);\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      count += num % 2;\n      num /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    res.push_back(ones[i].second);\n  }\n  return res;",
  "  std::vector<long> sorted;\n  std::vector<long> one_count;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n    while\
    \ (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num\
    \ /= 2;\n    }\n    one_count.push_back(count);\n  }\n  std::vector<long> sorted_one_count\
    \ = one_count;\n  std::sort(sorted_one_count.begin(), sorted_one_count.end());\n\
    \  for (int i = 0; i < sorted_one_count.size(); i++) {\n    for (int j = 0; j\
    \ < one_count.size(); j++) {\n      if (sorted_one_count[i] == one_count[j]) {\n\
    \        sorted.push_back(arr[j]);\n        one_count[j] = -1;\n        break;\n\
    \      }\n    }\n  }\n  return sorted;", "    std::vector<long> ret;\n    std::vector<std::pair<int,\
    \ int>> ones;\n    for (int i = 0; i < arr.size(); i++) {\n        int count =\
    \ 0;\n        int num = arr[i];\n        while (num > 0) {\n            if (num\
    \ % 2 == 1) {\n                count++;\n            }\n            num /= 2;\n\
    \        }\n        ones.push_back(std::make_pair(count, arr[i]));\n    }\n  \
    \  std::sort(ones.begin(), ones.end());\n    for (int i = 0; i < ones.size();\
    \ i++) {\n        ret.push_back(ones[i].second);\n    }\n    return ret;", " \
    \   std::vector<long> result;\n    std::vector<std::pair<int, int>> ones;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        int\
    \ temp = arr[i];\n        while (temp > 0) {\n            if (temp % 2 == 1) {\n\
    \                count++;\n            }\n            temp /= 2;\n        }\n\
    \        ones.push_back(std::make_pair(count, arr[i]));\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (int i = 0; i < ones.size(); i++) {\n        result.push_back(ones[i].second);\n\
    \    }\n    return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i\
    \ & 1) count++;\n      i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for\
    \ (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  // your code here\n\
    \  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  std::vector<long> negative;\n  std::vector<long> positive;\n  for(int i = 0;\
    \ i < arr.size(); i++){\n    if(arr[i] < 0){\n      negative.push_back(arr[i]);\n\
    \    }\n    else{\n      positive.push_back(arr[i]);\n    }\n  }\n  std::sort(negative.begin(),\
    \ negative.end());\n  std::sort(positive.begin(), positive.end());\n  for(int\
    \ i = 0; i < positive.size(); i++){\n    if(positive[i] == 0){\n      zeros.push_back(positive[i]);\n\
    \    }\n    else{\n      int count = 0;\n      int num = positive[i];\n      while(num\
    \ > 0){\n        if(num % 2 == 1){\n          count++;\n        }\n        num\
    \ = num / 2;\n      }\n      ones.push_back(count);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for(int i = 0; i <\
    \ ones.size(); i++){\n    for(int j = 0; j < positive.size(); j++){\n      int\
    \ count = 0;\n      int num = positive[j];\n      while(num > 0){\n        if(num\
    \ % 2 == 1){\n          count++;\n        }\n        num = num / 2;\n      }\n\
    \      if(count == ones[i]){\n        result.push_back(positive[j]);\n      }\n\
    \    }\n  }\n  for(int i = 0; i < zeros.size(); i++){\n    result.push_back(zeros[i]);\n\
    \  }\n  for(int i = 0; i < negative.size(); i++){\n    result.push_back(negative[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (long i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> one_count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long temp\
    \ = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    one_count.push_back(count);\n  }\n  std::vector<long>\
    \ copy = arr;\n  std::sort(copy.begin(), copy.end());\n  for (int i = 0; i < copy.size();\
    \ i++) {\n    for (int j = 0; j < arr.size(); j++) {\n      if (copy[i] == arr[j])\
    \ {\n        result.push_back(arr[j]);\n        arr[j] = -1;\n        break;\n\
    \      }\n    }\n  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> pairs;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    pairs.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(pairs.begin(),\
    \ pairs.end());\n  for (int i = 0; i < pairs.size(); i++) {\n    result.push_back(pairs[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n\
    \  std::vector<long> sorted_zeros;\n  std::vector<long> sorted_neg;\n  std::vector<long>\
    \ sorted_neg_ones;\n  std::vector<long> sorted_neg_zeros;\n  for (int i = 0; i\
    \ < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_neg.push_back(arr[i]);\n\
    \    } else {\n      sorted.push_back(arr[i]);\n    }\n  }\n  for (int i = 0;\
    \ i < sorted.size(); i++) {\n    if (__builtin_popcount(sorted[i]) == 0) {\n \
    \     sorted_zeros.push_back(sorted[i]);\n    } else {\n      sorted_ones.push_back(sorted[i]);\n\
    \    }\n  }\n  for (int i = 0; i < sorted_neg.size(); i++) {\n    if (__builtin_popcount(sorted_neg[i])\
    \ == 0) {\n      sorted_neg_zeros.push_back(sorted_neg[i]);\n    } else {\n  \
    \    sorted_neg_ones.push_back(sorted_neg[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  std::sort(sorted_neg_ones.begin(), sorted_neg_ones.end());\n  std::sort(sorted_neg_zeros.begin(),\
    \ sorted_neg_zeros.end());\n  sorted.clear();\n  for (int i = 0; i < sorted_neg_ones.size();\
    \ i++) {\n    sorted.push_back(sorted_neg_ones[i]);\n  }\n  for (int i = 0; i\
    \ < sorted_neg_zeros.size(); i++) {\n    sorted.push_back(sorted_neg_zeros[i]);\n\
    \  }\n  for (int i = 0; i < sorted_ones.size();", "  std::vector<long> result;\n\
    \  std::vector<std::pair<int, int>> temp;\n  for (auto i : arr) {\n    int count\
    \ = 0;\n    int num = i;\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    temp.push_back(std::make_pair(count, i));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (auto i : temp) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while\
    \ (num > 0) {\n      ones += num % 2;\n      num /= 2;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted.push_back(pair.second);\n  }\n  return\
    \ sorted;", "  std::vector<std::pair<int, long>> v;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    long num = i;\n    while (num) {\n      count += num\
    \ & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for (auto\
    \ i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "    std::vector<long>\
    \ result;\n    std::vector<std::pair<int, long>> ones;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        int count = 0;\n        int num = arr[i];\n  \
    \      while (num > 0) {\n            if (num % 2 == 1) {\n                count++;\n\
    \            }\n            num /= 2;\n        }\n        ones.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (int i =\
    \ 0; i < ones.size(); i++) {\n        result.push_back(ones[i].second);\n    }\n\
    \    return result;", "  std::vector<long> res;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    res.push_back(ones[i].second);\n\
    \  }\n  return res;", "  std::sort(arr.begin(), arr.end(), [](long a, long b)\
    \ {\n    int count_a = std::bitset<64>(a).count();\n    int count_b = std::bitset<64>(b).count();\n\
    \    if (count_a == count_b) {\n      return a < b;\n    }\n    return count_a\
    \ < count_b;\n  });\n  return arr;", "  std::vector<long> result;\n  std::map<int,\
    \ std::vector<long>> map;\n  for (long i : arr) {\n    int count = 0;\n    while\
    \ (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n\
    \    }\n    map[count].push_back(i);\n  }\n  for (auto it = map.begin(); it !=\
    \ map.end(); it++) {\n    std::sort(it->second.begin(), it->second.end());\n \
    \   for (long i : it->second) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;", "    std::vector<long> res;\n    std::vector<std::pair<int, int>>\
    \ v;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n   \
    \     int num = arr[i];\n        while (num) {\n            count += num & 1;\n\
    \            num >>= 1;\n        }\n        v.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i\
    \ < v.size(); i++) {\n        res.push_back(v[i].second);\n    }\n    return res;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i =\
    \ 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\n        count++;\n\
    \      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map)\
    \ {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> one_count;\n  std::vector<long> zero_count;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      int num = arr[i];\n      while (num\
    \ > 0) {\n        if (num % 2 == 1) {\n          count++;\n        }\n       \
    \ num = num / 2;\n      }\n      if (count == 0) {\n        zero_count.push_back(arr[i]);\n\
    \      } else {\n        one_count.push_back(arr[i]);\n      }\n    }\n  }\n \
    \ std::sort(one_count.begin(), one_count.end());\n  std::sort(zero_count.begin(),\
    \ zero_count.end());\n  for (int i = 0; i < one_count.size(); i++) {\n    result.push_back(one_count[i]);\n\
    \  }\n  for (int i = 0; i < zero_count.size(); i++) {\n    result.push_back(zero_count[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<long, long>\
    \ map;\n  for (int i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long\
    \ temp = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n       \
    \ count++;\n      }\n      temp = temp / 2;\n    }\n    map[count] = arr[i];\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    result.push_back(it->second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> zeros;\n\
    \  std::vector<long> ones;\n  std::vector<long> twos;\n  std::vector<long> threes;\n\
    \  std::vector<long> fours;\n  std::vector<long> fives;\n  std::vector<long> sixes;\n\
    \  std::vector<long> sevens;\n  std::vector<long> eights;\n  std::vector<long>\
    \ nines;\n  std::vector<long> tens;\n  std::vector<long> elevens;\n  std::vector<long>\
    \ twelves;\n  std::vector<long> thirteens;\n  std::vector<long> fourteens;\n \
    \ std::vector<long> fifteens;\n  std::vector<long> sixteens;\n  std::vector<long>\
    \ seventeens;\n  std::vector<long> eigteens;\n  std::vector<long> ninteens;\n\
    \  std::vector<long> twenties;\n  std::vector<long> negatives;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 1) {\n      ones.push_back(arr[i]);\n    } else if (arr[i] == 2)\
    \ {\n      twos.push_back(arr[i]);\n    } else if (arr[i] == 3) {\n      threes.push_back(arr[i]);\n\
    \    } else if (arr[i] == 4) {\n      fours.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 5) {\n      fives.push_back(arr[i]);\n    } else if (arr[i] == 6)\
    \ {\n      sixes.push_back(arr[i]);\n    } else if (arr[i] == 7) {\n      sevens.push_back(",
  "  std::vector<long> result;\n  std::vector<std::pair<int, int>> v;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    result.push_back(v[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      if (i & 1) {\n        count++;\n  \
    \    }\n      i = i >> 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long> sorted_zeros;\n\
    \  std::vector<long> sorted_neg;\n  std::vector<long> sorted_neg_ones;\n  std::vector<long>\
    \ sorted_neg_zeros;\n  std::vector<long> sorted_neg_ones_zeros;\n  std::vector<long>\
    \ sorted_neg_zeros_ones;\n  std::vector<long> sorted_ones_zeros;\n  std::vector<long>\
    \ sorted_zeros_ones;\n  std::vector<long> sorted_neg_ones_zeros_neg;\n  std::vector<long>\
    \ sorted_neg_zeros_ones_neg;\n  std::vector<long> sorted_ones_zeros_neg;\n  std::vector<long>\
    \ sorted_zeros_ones_neg;\n  std::vector<long> sorted_neg_ones_zeros_pos;\n  std::vector<long>\
    \ sorted_neg_zeros_ones_pos;\n  std::vector<long> sorted_ones_zeros_pos;\n  std::vector<long>\
    \ sorted_zeros_ones_pos;\n  std::vector<long> sorted_neg_ones_zeros_neg_pos;\n\
    \  std::vector<long> sorted_neg_zeros_ones_neg_pos;\n  std::vector<long> sorted_ones_zeros_neg_pos;\n\
    \  std::vector<long> sorted_zeros_ones_neg_pos;\n  std::vector<long> sorted_neg_ones_zeros_pos_neg;\n\
    \  std::vector<long> sorted_neg_zeros_ones_pos_neg;\n  std::vector<long> sorted_ones_zeros_pos_neg;\n\
    \  std::vector<long> sorted_zeros_ones_pos_neg;\n  std::vector<long> sorted_neg_ones_zeros_neg_pos_neg;\n\
    \  std::vector<long> sorted_neg_zeros_ones_neg_pos_neg;\n  std::vector<long> sorted_ones_zeros_neg_pos_neg;\n",
  "  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n    while\
    \ (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;", "  std::vector<long>\
    \ ans;\n  std::map<int, std::vector<long>> m;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     count += num & 1;\n      num >>= 1;\n    }\n    m[count].push_back(arr[i]);\n\
    \  }\n  for (auto it = m.begin(); it != m.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (int i = 0; i < it->second.size(); i++) {\n    \
    \  ans.push_back(it->second[i]);\n    }\n  }\n  return ans;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n   \
    \   if (temp & 1) {\n        count++;\n      }\n      temp = temp >> 1;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ = temp >> 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n  \
    \  std::sort(i.second.begin(), i.second.end());\n    for (auto j : i.second) {\n\
    \      result.push_back(j);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::map<int, std::vector<long>> m;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n\
    \      }\n      i /= 2;\n    }\n    m[count].push_back(i);\n  }\n  for (auto i\
    \ : m) {\n    std::sort(i.second.begin(), i.second.end());\n    for (auto j :\
    \ i.second) {\n      res.push_back(j);\n    }\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> ones;\n  for (auto i : arr) {\n\
    \    long n = i;\n    long count = 0;\n    while (n) {\n      count += n & 1;\n\
    \      n >>= 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n \
    \ std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (auto i : arr) {\n    int ones = 0;\n    int\
    \ decimal = i;\n    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n   \
    \     ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n \
    \ return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n \
    \ std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ < 0) {\n      result.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n   \
    \   zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n  \
    \  }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    long temp = i;\n    while (temp > 0) {\n      if (temp\
    \ % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    int ones = 0;\n    int decimal = i;\n    while (decimal)\
    \ {\n      ones += decimal & 1;\n      decimal >>= 1;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n \
    \ return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto\
    \ i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negatives;\n  for (long i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      long count = 0;\n      long num = arr[i];\n      while (num > 0) {\n  \
    \      if (num % 2 == 1) {\n          count++;\n        }\n        num /= 2;\n\
    \      }\n      ones.push_back(count);\n      sorted.push_back(arr[i]);\n    }\n\
    \  }\n  for (long i = 0; i < sorted.size(); i++) {\n    for (long j = i + 1; j\
    \ < sorted.size(); j++) {\n      if (ones[i] > ones[j]) {\n        long temp =\
    \ ones[i];\n        ones[i] = ones[j];\n        ones[j] = temp;\n        temp\
    \ = sorted[i];\n        sorted[i] = sorted[j];\n        sorted[j] = temp;\n  \
    \    } else if (ones[i] == ones[j]) {\n        if (sorted[i] > sorted[j]) {\n\
    \          long temp = sorted[i];\n          sorted[i] = sorted[j];\n        \
    \  sorted[j] = temp;\n        }\n      }\n    }\n  }\n  for (long i = negatives.size()\
    \ - 1; i >= 0; i--) {\n    sorted.insert(sorted.begin(), negatives[i]);\n  }\n\
    \  for (long i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> ans;\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int temp = arr[i];\n    while (temp) {\n      if (temp & 1)\n        count++;\n\
    \      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n \
    \ }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size(); i++) {\n\
    \    ans.push_back(v[i].second);\n  }\n  return ans;", "  std::vector<long> result;\n\
    \  std::vector<std::pair<int, long>> ones_and_values;\n  for (auto value : arr)\
    \ {\n    int ones = 0;\n    while (value > 0) {\n      ones += value & 1;\n  \
    \    value >>= 1;\n    }\n    ones_and_values.push_back(std::make_pair(ones, value));\n\
    \  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for (auto\
    \ pair : ones_and_values) {\n    result.push_back(pair.second);\n  }\n  return\
    \ result;", "  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  std::vector<long> result;\n\
    \  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> temp;\n  for (auto i : arr) {\n    long count = 0;\n    long num = i;\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, long>> ones_and_nums;\n  for (auto num\
    \ : arr) {\n    int ones = 0;\n    long temp = num;\n    while (temp > 0) {\n\
    \      ones += temp & 1;\n      temp >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    result.push_back(pair.second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /=\
    \ 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    for (auto j : i.second) {\n      result.push_back(j);\n\
    \    }\n  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a,\
    \ long b) {\n    int a_ones = std::bitset<32>(a).count();\n    int b_ones = std::bitset<32>(b).count();\n\
    \    if (a_ones == b_ones) {\n      return a < b;\n    }\n    return a_ones <\
    \ b_ones;\n  });\n  return arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    int num = i;\n\
    \    while (num) {\n      if (num & 1) {\n        count++;\n      }\n      num\
    \ = num >> 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> result;\n  std::vector<long> temp;\n\
    \  std::vector<long> temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n\
    \  std::vector<long> temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n\
    \  std::vector<long> temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n\
    \  std::vector<long> temp11;\n  std::vector<long> temp12;\n  std::vector<long>\
    \ temp13;\n  std::vector<long> temp14;\n  std::vector<long> temp15;\n  std::vector<long>\
    \ temp16;\n  std::vector<long> temp17;\n  std::vector<long> temp18;\n  std::vector<long>\
    \ temp19;\n  std::vector<long> temp20;\n  std::vector<long> temp21;\n  std::vector<long>\
    \ temp22;\n  std::vector<long> temp23;\n  std::vector<long> temp24;\n  std::vector<long>\
    \ temp25;\n  std::vector<long> temp26;\n  std::vector<long> temp27;\n  std::vector<long>\
    \ temp28;\n  std::vector<long> temp29;\n  std::vector<long> temp30;\n  std::vector<long>\
    \ temp31;\n  std::vector<long> temp32;\n  std::vector<long> temp33;\n  std::vector<long>\
    \ temp34;\n  std::vector<long> temp35;\n  std::vector<long> temp36;\n  std::vector<long>\
    \ temp37;\n  std::vector<long> temp38;\n  std::vector<long> temp39;\n  std::vector<long>\
    \ temp40;\n  std::vector<long> temp41;\n  std::vector<long> temp42;\n  std::vector<long>\
    \ temp43;\n  std::vector<long> temp44;\n  std::vector<long> temp45;\n  std::vector<long>",
  "  std::vector<long> result;\n  std::vector<std::pair<int, long>> temp;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    long num = i;\n    while (num) {\n     \
    \ count += num & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> temp;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      sorted_arr.push_back(arr[i]);\n    } else\
    \ {\n      int count = 0;\n      int temp = arr[i];\n      while (temp > 0) {\n\
    \        if (temp % 2 == 1) {\n          count++;\n        }\n        temp = temp\
    \ / 2;\n      }\n      if (count == 0) {\n        zeros_count.push_back(arr[i]);\n\
    \      } else {\n        ones_count.push_back(arr[i]);\n      }\n    }\n  }\n\
    \  std::sort(ones_count.begin(), ones_count.end());\n  std::sort(zeros_count.begin(),\
    \ zeros_count.end());\n  for (int i = 0; i < ones_count.size(); i++) {\n    sorted_arr.push_back(ones_count[i]);\n\
    \  }\n  for (int i = 0; i < zeros_count.size(); i++) {\n    sorted_arr.push_back(zeros_count[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  std::vector<long> ans;\n  std::vector<std::pair<long,\
    \ long>> v;\n  for (auto i : arr) {\n    long count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    ans.push_back(i.second);\n\
    \  }\n  return ans;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_decimal;\n  for (auto i : arr) {\n    int ones = 0;\n    int decimal\
    \ = i;\n    while (decimal > 0) {\n      ones += decimal % 2;\n      decimal /=\
    \ 2;\n    }\n    ones_decimal.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_decimal.begin(),\
    \ ones_decimal.end());\n  for (auto i : ones_decimal) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int decimal\
    \ = arr[i];\n    int ones = 0;\n    while (decimal > 0) {\n      if (decimal %\
    \ 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<long, long>\
    \ m;\n  for (auto i : arr) {\n    long count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    m[count] = i;\n  }\n  for (auto i : m)\
    \ {\n    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal = arr[i];\n\
    \    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n \
    \     }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones_map;\n  for (auto i : arr) {\n    int ones = 0;\n    long temp = i;\n \
    \   while (temp > 0) {\n      if (temp % 2 == 1) {\n        ones++;\n      }\n\
    \      temp /= 2;\n    }\n    ones_map[ones].push_back(i);\n  }\n  for (auto i\
    \ : ones_map) {\n    std::sort(i.second.begin(), i.second.end());\n    for (auto\
    \ j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::map<long, long> map;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    long count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num = num / 2;\n\
    \    }\n    map[count] = arr[i];\n  }\n  for (auto it = map.begin(); it != map.end();\
    \ it++) {\n    result.push_back(it->second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, long>> temp;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    long num = i;\n    while (num > 0) {\n      if (num %\
    \ 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    temp.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones_and_values;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int ones = 0;\n    int value = arr[i];\n    while\
    \ (value != 0) {\n      ones += value & 1;\n      value >>= 1;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n\
    \  for (int i = 0; i < ones_and_values.size(); i++) {\n    result.push_back(ones_and_values[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i) {\n      if (i & 1)\n        count++;\n    \
    \  i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ ans;\n  std::vector<long> one;\n  std::vector<long> zero;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      ans.push_back(arr[i]);\n\
    \    } else {\n      if (__builtin_popcount(arr[i]) == 1) {\n        one.push_back(arr[i]);\n\
    \      } else {\n        zero.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(one.begin(),\
    \ one.end());\n  std::sort(zero.begin(), zero.end());\n  for (int i = 0; i < one.size();\
    \ i++) {\n    ans.push_back(one[i]);\n  }\n  for (int i = 0; i < zero.size();\
    \ i++) {\n    ans.push_back(zero[i]);\n  }\n  return ans;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::vector<long> one;\n  std::vector<long> zero;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      res.push_back(arr[i]);\n\
    \    } else {\n      if (__builtin_popcount(arr[i]) == 1) {\n        one.push_back(arr[i]);\n\
    \      } else {\n        zero.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(one.begin(),\
    \ one.end());\n  std::sort(zero.begin(), zero.end());\n  for (int i = 0; i < one.size();\
    \ i++) {\n    res.push_back(one[i]);\n  }\n  for (int i = 0; i < zero.size();\
    \ i++) {\n    res.push_back(zero[i]);\n  }\n  return res;", "  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for\
    \ (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    long temp = i;\n    while (temp) {\n      count += temp\
    \ & 1;\n      temp >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> ones_map;\n  std::map<int, std::vector<long>>\
    \ zeros_map;\n  for (auto i : arr) {\n    int ones = 0;\n    int zeros = 0;\n\
    \    long temp = i;\n    while (temp) {\n      if (temp & 1) {\n        ones++;\n\
    \      } else {\n        zeros++;\n      }\n      temp >>= 1;\n    }\n    if (ones)\
    \ {\n      ones_map[ones].push_back(i);\n    } else {\n      zeros_map[zeros].push_back(i);\n\
    \    }\n  }\n  for (auto i : zeros_map) {\n    for (auto j : i.second) {\n   \
    \   result.push_back(j);\n    }\n  }\n  for (auto i : ones_map) {\n    for (auto\
    \ j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n   \
    \   count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;", "    std::vector<long>\
    \ result;\n    std::map<int, std::vector<long>> m;\n    for (auto i : arr) {\n\
    \        int count = 0;\n        while (i > 0) {\n            if (i & 1) {\n \
    \               count++;\n            }\n            i = i >> 1;\n        }\n\
    \        m[count].push_back(i);\n    }\n    for (auto i : m) {\n        std::sort(i.second.begin(),\
    \ i.second.end());\n        result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::vector<std::pair<long,\
    \ long>> temp;\n    for (auto i : arr) {\n        int count = 0;\n        long\
    \ num = i;\n        while (num) {\n            count += num & 1;\n           \
    \ num >>= 1;\n        }\n        temp.push_back(std::make_pair(count, i));\n \
    \   }\n    std::sort(temp.begin(), temp.end());\n    for (auto i : temp) {\n \
    \       result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] >= 0) {\n      if (__builtin_popcount(arr[i])\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    } else {\n      result.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    map[count].push_back(arr[i]);\n  }\n  for (auto it\
    \ = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    for (int i = 0; i < it->second.size(); i++) {\n      result.push_back(it->second[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<std::pair<int, int>> v;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n  }\n\
    \  return res;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if\
    \ (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;", "  std::vector<long> sorted_arr;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::vector<long> zero_arr;\n  std::vector<long> one_arr;\n \
    \ std::vector<long> zero_decimal;\n  std::vector<long> one_decimal;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_arr.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zero_arr.push_back(arr[i]);\n    } else\
    \ {\n      one_arr.push_back(arr[i]);\n    }\n  }\n  for (int i = 0; i < one_arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = one_arr[i];\n    while (temp > 0)\
    \ {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp = temp\
    \ / 2;\n    }\n    one_count.push_back(count);\n  }\n  for (int i = 0; i < zero_arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = zero_arr[i];\n    while (temp > 0)\
    \ {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp = temp\
    \ / 2;\n    }\n    zero_count.push_back(count);\n  }\n  for (int i = 0; i < one_arr.size();\
    \ i++) {\n    one_decimal.push_back(one_arr[i]);\n  }\n  for (int i = 0; i < zero_arr.size();\
    \ i++) {\n    zero_decimal.push_back(zero_arr[i]);\n  }\n  std::sort(one_count.begin(),\
    \ one_count.end());\n  std::sort(zero_count.begin(), zero_count.end());\n  std::sort(one_decimal.begin(),\
    \ one_decimal.end());\n  std::sort(zero_decimal.", "  std::vector<long> result;\n\
    \  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n      count\
    \ += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "    // your code here\n    std::vector<long> res;\n\
    \    std::vector<std::pair<long, long>> temp;\n    for (auto i : arr) {\n    \
    \    long count = 0;\n        long num = i;\n        while (num) {\n         \
    \   count += num & 1;\n            num >>= 1;\n        }\n        temp.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i : temp)\
    \ {\n        res.push_back(i.second);\n    }\n    return res;", "  std::vector<long>\
    \ result;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(result.begin(), result.end());\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i =\
    \ 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  return\
    \ result;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int\
    \ count_a = 0, count_b = 0;\n    while (a > 0) {\n      count_a += a & 1;\n  \
    \    a >>= 1;\n    }\n    while (b > 0) {\n      count_b += b & 1;\n      b >>=\
    \ 1;\n    }\n    return count_a == count_b ? a < b : count_a < count_b;\n  });\n\
    \  return arr;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32;\
    \ j++) {\n      if (i & (1 << j)) {\n        count++;\n      }\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int a_ones\
    \ = std::bitset<32>(a).count();\n    int b_ones = std::bitset<32>(b).count();\n\
    \    if (a_ones == b_ones) {\n      return a < b;\n    }\n    return a_ones <\
    \ b_ones;\n  });\n  return arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int temp = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n\
    \        count++;\n      }\n      temp /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> one_count;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    std::bitset<32> bits(arr[i]);\n    one_count.push_back(bits.count());\n\
    \  }\n  std::vector<long> temp = arr;\n  std::sort(temp.begin(), temp.end());\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int min = *std::min_element(one_count.begin(),\
    \ one_count.end());\n    int index = std::find(one_count.begin(), one_count.end(),\
    \ min) - one_count.begin();\n    sorted.push_back(temp[index]);\n    one_count[index]\
    \ = INT_MAX;\n  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (auto i : arr) {\n    int count = 0;\n    int num = i;\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    temp.push_back(std::make_pair(count, i));\n  }\n\
    \  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> temp;\n\
    \  std::vector<long> temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n\
    \  std::vector<long> temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n\
    \  std::vector<long> temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n\
    \  std::vector<long> temp11;\n  std::vector<long> temp12;\n  std::vector<long>\
    \ temp13;\n  std::vector<long> temp14;\n  std::vector<long> temp15;\n  std::vector<long>\
    \ temp16;\n  std::vector<long> temp17;\n  std::vector<long> temp18;\n  std::vector<long>\
    \ temp19;\n  std::vector<long> temp20;\n  std::vector<long> temp21;\n  std::vector<long>\
    \ temp22;\n  std::vector<long> temp23;\n  std::vector<long> temp24;\n  std::vector<long>\
    \ temp25;\n  std::vector<long> temp26;\n  std::vector<long> temp27;\n  std::vector<long>\
    \ temp28;\n  std::vector<long> temp29;\n  std::vector<long> temp30;\n  std::vector<long>\
    \ temp31;\n  std::vector<long> temp32;\n  std::vector<long> temp33;\n  std::vector<long>\
    \ temp34;\n  std::vector<long> temp35;\n  std::vector<long> temp36;\n  std::vector<long>\
    \ temp37;\n  std::vector<long> temp38;\n  std::vector<long> temp39;\n  std::vector<long>\
    \ temp40;\n  std::vector<long> temp41;\n  std::vector<long> temp42;\n  std::vector<long>\
    \ temp43;\n  std::vector<long> temp44;\n  std::vector<long> temp45;\n  std::vector<long>",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones\
    \ = 0;\n    int decimal = arr[i];\n    while (decimal > 0) {\n      if (decimal\
    \ % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n    }\n    ones_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_decimal.begin(), ones_decimal.end());\n  for\
    \ (int i = 0; i < ones_decimal.size(); i++) {\n    result.push_back(ones_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n    \
    \  if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, long>>\
    \ ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    while (num)\
    \ {\n      ones += num & 1;\n      num >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    result.push_back(pair.second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n\
    \      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    for (auto\
    \ j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i > 0) {\n      count += i % 2;\n\
    \      i /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map)\
    \ {\n    std::sort(i.second.begin(), i.second.end());\n    for (auto j : i.second)\
    \ {\n      sorted.push_back(j);\n    }\n  }\n  return sorted;", "  std::vector<long>\
    \ result;\n  std::vector<long> sorted;\n  std::vector<long> sorted_decimal;\n\
    \  std::vector<long> sorted_binary;\n  std::vector<long> sorted_binary_decimal;\n\
    \  std::vector<long> sorted_binary_decimal_negative;\n  std::vector<long> sorted_binary_negative;\n\
    \  std::vector<long> sorted_negative;\n  std::vector<long> sorted_decimal_negative;\n\
    \  std::vector<long> sorted_negative_decimal;\n  std::vector<long> sorted_negative_binary;\n\
    \  std::vector<long> sorted_negative_binary_decimal;\n  std::vector<long> sorted_negative_binary_decimal_negative;\n\
    \  std::vector<long> sorted_negative_binary_negative;\n  std::vector<long> sorted_negative_negative;\n\
    \  std::vector<long> sorted_negative_decimal_negative;\n  std::vector<long> sorted_negative_negative_decimal;\n\
    \  std::vector<long> sorted_negative_negative_binary;\n  std::vector<long> sorted_negative_negative_binary_decimal;\n\
    \  std::vector<long> sorted_negative_negative_binary_decimal_negative;\n  std::vector<long>\
    \ sorted_negative_negative_binary_negative;\n  std::vector<long> sorted_negative_negative_negative;\n\
    \  std::vector<long> sorted_negative_negative_decimal_negative;\n  std::vector<long>\
    \ sorted_negative_negative_negative_decimal;\n  std::vector<long> sorted_negative_negative_negative_binary;\n\
    \  std::vector<long> sorted_negative_negative_negative_binary_decimal;\n  std::vector<long>\
    \ sorted_negative_negative_negative_binary_decimal_negative;\n  std::vector<long>\
    \ sorted_negative_negative_negative_binary_negative;\n  std::vector<long> sorted_negative_negative_negative_negative;\n\
    \  std::vector<long> sorted_negative_negative_negative_decimal_negative;\n  std::vector<long>\
    \ sorted_negative_negative_negative_", "  std::vector<long> res;\n  std::map<int,\
    \ std::vector<long>> m;\n  for (auto x : arr) {\n    int count = 0;\n    while\
    \ (x) {\n      count += x & 1;\n      x >>= 1;\n    }\n    m[count].push_back(x);\n\
    \  }\n  for (auto x : m) {\n    std::sort(x.second.begin(), x.second.end());\n\
    \    res.insert(res.end(), x.second.begin(), x.second.end());\n  }\n  return res;",
  "  std::vector<long> res;\n  std::vector<std::pair<long, long>> v;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long count = 0;\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (long i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> m;\n  for (auto i : arr) {\n   \
    \ int count = 0;\n    long temp = i;\n    while (temp) {\n      count += temp\
    \ & 1;\n      temp >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto\
    \ i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  std::map<int, std::vector<long>> m;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n    }\n\
    \    m[count].push_back(i);\n  }\n  for (auto i : m) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    res.insert(res.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return res;", "  std::vector<std::pair<int, int>> v;\n  for (auto i :\
    \ arr) {\n    int count = 0;\n    int temp = i;\n    while (temp) {\n      count\
    \ += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for\
    \ (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<long, long>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    long num = arr[i];\n    long count = 0;\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto\
    \ i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, int>> ones;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    while (i > 0) {\n      if (i % 2 == 1) {\n        count++;\n\
    \      }\n      i /= 2;\n    }\n    ones.push_back(std::make_pair(i, count));\n\
    \  }\n  std::sort(ones.begin(), ones.end(), [](std::pair<long, int> a, std::pair<long,\
    \ int> b) {\n    if (a.second == b.second) {\n      return a.first < b.first;\n\
    \    }\n    return a.second < b.second;\n  });\n  for (auto i : ones) {\n    result.push_back(i.first);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n   \
    \     count++;\n      }\n      num /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_decimal;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal\
    \ = arr[i];\n    if (decimal < 0) {\n      decimal = -decimal;\n    }\n    while\
    \ (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n \
    \     decimal /= 2;\n    }\n    ones_decimal.push_back(std::make_pair(ones, arr[i]));\n\
    \  }\n  std::sort(ones_decimal.begin(), ones_decimal.end());\n  for (int i = 0;\
    \ i < ones_decimal.size(); i++) {\n    result.push_back(ones_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> one_count;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long num\
    \ = arr[i];\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n  \
    \  }\n    one_count.push_back(count);\n  }\n  std::vector<long> sorted_one_count\
    \ = one_count;\n  std::sort(sorted_one_count.begin(), sorted_one_count.end());\n\
    \  for (long i = 0; i < sorted_one_count.size(); i++) {\n    long index = std::find(one_count.begin(),\
    \ one_count.end(), sorted_one_count[i]) - one_count.begin();\n    sorted.push_back(arr[index]);\n\
    \    one_count[index] = -1;\n  }\n  return sorted;", "  std::vector<long> result;\n\
    \  std::vector<long> one_count;\n  for (int i = 0; i < arr.size(); i++) {\n  \
    \  int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n      if (num\
    \ % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    one_count.push_back(count);\n\
    \  }\n  for (int i = 0; i < arr.size(); i++) {\n    int min = INT_MAX;\n    int\
    \ min_index = -1;\n    for (int j = 0; j < arr.size(); j++) {\n      if (one_count[j]\
    \ < min) {\n        min = one_count[j];\n        min_index = j;\n      }\n   \
    \ }\n    result.push_back(arr[min_index]);\n    one_count[min_index] = INT_MAX;\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n    \
    \  if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      result.push_back(j);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<long, long>>\
    \ temp;\n  for (auto i : arr) {\n    long count = 0;\n    long num = i;\n    while\
    \ (num) {\n      if (num & 1) {\n        count++;\n      }\n      num >>= 1;\n\
    \    }\n    temp.push_back(std::make_pair(count, i));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (auto i : temp) {\n    result.push_back(i.second);\n  }\n\
    \  return result;"]
stop_tokens:
- "\n}"
