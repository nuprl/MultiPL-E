name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort an array of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5,\
  \ (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  std::vector<long> result;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      result.push_back(arr[i]);\n    } else {\n      int count = 0;\n      long\
    \ num = arr[i];\n      while (num > 0) {\n        if (num % 2 == 1) {\n      \
    \    count++;\n        }\n        num = num / 2;\n      }\n      if (count ==\
    \ 0) {\n        zero_count.push_back(arr[i]);\n      } else {\n        one_count.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(one_count.begin(), one_count.end());\n  std::sort(zero_count.begin(),\
    \ zero_count.end());\n  for (int i = 0; i < one_count.size(); i++) {\n    result.push_back(one_count[i]);\n\
    \  }\n  for (int i = 0; i < zero_count.size(); i++) {\n    result.push_back(zero_count[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negatives;\n  std::vector<long>\
    \ positives;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n\
    \      negatives.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < negatives.size(); i++) {\n    result.push_back(negatives[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    result.push_back(positives[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> temp;\n\
    \  std::vector<long> temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n\
    \  std::vector<long> temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n\
    \  std::vector<long> temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n\
    \  std::vector<long> temp11;\n  std::vector<long> temp12;\n  std::vector<long>\
    \ temp13;\n  std::vector<long> temp14;\n  std::vector<long> temp15;\n  std::vector<long>\
    \ temp16;\n  std::vector<long> temp17;\n  std::vector<long> temp18;\n  std::vector<long>\
    \ temp19;\n  std::vector<long> temp20;\n  std::vector<long> temp21;\n  std::vector<long>\
    \ temp22;\n  std::vector<long> temp23;\n  std::vector<long> temp24;\n  std::vector<long>\
    \ temp25;\n  std::vector<long> temp26;\n  std::vector<long> temp27;\n  std::vector<long>\
    \ temp28;\n  std::vector<long> temp29;\n  std::vector<long> temp30;\n  std::vector<long>\
    \ temp31;\n  std::vector<long> temp32;\n  std::vector<long> temp33;\n  std::vector<long>\
    \ temp34;\n  std::vector<long> temp35;\n  std::vector<long> temp36;\n  std::vector<long>\
    \ temp37;\n  std::vector<long> temp38;\n  std::vector<long> temp39;\n  std::vector<long>\
    \ temp40;\n  std::vector<long> temp41;\n  std::vector<long> temp42;\n  std::vector<long>\
    \ temp43;\n  std::vector<long> temp44;\n  std::vector<long> temp45;\n  std::vector<long>",
  "  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n    while\
    \ (num) {\n      if (num & 1) {\n        count++;\n      }\n      num = num >>\
    \ 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> neg;\n  std::vector<long> pos;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n\
    \    } else {\n      pos.push_back(arr[i]);\n    }\n  }\n  std::sort(neg.begin(),\
    \ neg.end());\n  std::sort(pos.begin(), pos.end());\n  for (int i = 0; i < pos.size();\
    \ i++) {\n    int count = 0;\n    int temp = pos[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp = temp / 2;\n\
    \    }\n    if (count == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n\
    \      ones.push_back(pos[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < neg.size(); i++) {\n    result.push_back(neg[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n  \
    \  std::sort(i.second.begin(), i.second.end());\n    for (auto j : i.second) {\n\
    \      result.push_back(j);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n\
    \      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n    }\n  }\n\
    \  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(), ones.end());\n\
    \  std::vector<long> result;\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ ans;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> neg;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(neg.begin(), neg.end());\n  std::reverse(neg.begin(), neg.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < neg.size(); i++) {\n    sorted.push_back(neg[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<long> one_count;\n\
    \  std::vector<long> zero_count;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      int\
    \ count = 0;\n      int temp = arr[i];\n      while (temp != 0) {\n        if\
    \ (temp % 2 == 1) {\n          count++;\n        }\n        temp = temp / 2;\n\
    \      }\n      if (count == 0) {\n        zero_count.push_back(arr[i]);\n   \
    \   } else {\n        one_count.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(one_count.begin(),\
    \ one_count.end());\n  std::sort(zero_count.begin(), zero_count.end());\n  for\
    \ (int i = 0; i < one_count.size(); i++) {\n    result.push_back(one_count[i]);\n\
    \  }\n  for (int i = 0; i < zero_count.size(); i++) {\n    result.push_back(zero_count[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_count;\n  for (auto i : arr) {\n    int count = 0;\n    long num\
    \ = i;\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n \
    \     }\n      num /= 2;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (auto i\
    \ : ones_count) {\n    result.push_back(i.second);\n  }\n  return result;", " \
    \   // your code here\n    std::vector<long> sorted;\n    std::vector<long> sorted_ones;\n\
    \    std::vector<long> sorted_zeros;\n    std::vector<long> sorted_neg;\n    std::vector<long>\
    \ sorted_neg_ones;\n    std::vector<long> sorted_neg_zeros;\n    std::vector<long>\
    \ sorted_neg_zeros_ones;\n    std::vector<long> sorted_neg_ones_zeros;\n    std::vector<long>\
    \ sorted_zeros_ones;\n    std::vector<long> sorted_ones_zeros;\n    std::vector<long>\
    \ sorted_neg_zeros_ones_zeros;\n    std::vector<long> sorted_neg_ones_zeros_ones;\n\
    \    std::vector<long> sorted_zeros_ones_zeros;\n    std::vector<long> sorted_ones_zeros_ones;\n\
    \    std::vector<long> sorted_neg_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_neg_ones_zeros_ones_zeros;\n    std::vector<long> sorted_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_ones_zeros_ones_zeros;\n    std::vector<long> sorted_neg_zeros_ones_zeros_ones_zeros;\n\
    \    std::vector<long> sorted_neg_ones_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_zeros_ones_zeros_ones_zeros;\n    std::vector<long> sorted_ones_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_neg_zeros_ones_zeros_ones_zeros_ones;\n    std::vector<long>\
    \ sorted_neg_ones_zeros_ones_zeros_ones_zeros;\n    std::vector<long> sorted_zeros_ones_zeros_ones_zeros_ones;\n\
    \    std::vector<long> sorted_ones_zeros_ones_zeros_ones_zeros;\n    std::vector<long>\
    \ sorted_", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long> zeros_arr;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_arr.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n  for (int i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (int i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ m;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto\
    \ i : m) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ if (num & 1) {\n        count++;\n      }\n      num = num >> 1;\n    }\n  \
    \  ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones\
    \ = 0;\n    int decimal = arr[i];\n    while (decimal > 0) {\n      if (decimal\
    \ % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int countA = 0, countB = 0;\n    while (a > 0) {\n      countA +=\
    \ a % 2;\n      a /= 2;\n    }\n    while (b > 0) {\n      countB += b % 2;\n\
    \      b /= 2;\n    }\n    if (countA == countB)\n      return a < b;\n    return\
    \ countA < countB;\n  });\n  return arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ sorted_ones;\n  std::vector<long> sorted_zeros;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else {\n     \
    \ sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  sorted.insert(sorted.end(), sorted_zeros.begin(), sorted_zeros.end());\n  sorted.insert(sorted.end(),\
    \ sorted_ones.begin(), sorted_ones.end());\n  return sorted;"]
stop_tokens:
- "\n}"
