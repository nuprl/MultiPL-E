name: HumanEval_131_digits
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the product of the odd digits.\n// Return 0 if all digits are even.\n\
  // For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>>\
  \ digits((235))\n// (15)\nlong digits(long n) {\n"
tests: "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) ==\
  \ (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n\
  \    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n\
  \    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n\
  }\n"
completions: ["    long result = 1;\n    while (n > 0) {\n        if (n % 2 != 0)\
    \ {\n            result *= n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ result;", "  long product = 1;\n  while (n > 0) {\n    long digit = n % 10;\n\
    \    if (digit % 2 == 1) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n\
    \  return product;", "  long prod = 1;\n  while (n > 0) {\n    long digit = n\
    \ % 10;\n    if (digit % 2 == 1) {\n      prod *= digit;\n    }\n    n /= 10;\n\
    \  }\n  return prod;", "    long product = 1;\n    while (n > 0) {\n        if\
    \ (n % 2 != 0) {\n            product *= n % 10;\n        }\n        n /= 10;\n\
    \    }\n    return product;", "    long product = 1;\n    while (n > 0) {\n  \
    \      long digit = n % 10;\n        if (digit % 2 != 0) {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    return product;", "  long\
    \ prod = 1;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit % 2 !=\
    \ 0) {\n      prod *= digit;\n    }\n    n /= 10;\n  }\n  return prod;", "   \
    \ long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n     \
    \   if (digit % 2 == 1) {\n            product *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    return product;", "    long product = 1;\n    while (n >\
    \ 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n        \
    \    product *= digit;\n        }\n        n /= 10;\n    }\n    return product;",
  "    int prod = 1;\n    while(n > 0) {\n        int digit = n % 10;\n        if(digit\
    \ % 2 != 0) {\n            prod *= digit;\n        }\n        n /= 10;\n    }\n\
    \    return prod;", "  long product = 1;\n  while (n > 0) {\n    long digit =\
    \ n % 10;\n    if (digit % 2 != 0) {\n      product *= digit;\n    }\n    n /=\
    \ 10;\n  }\n  return product;", "    long product = 1;\n    while (n > 0) {\n\
    \        long digit = n % 10;\n        if (digit % 2 != 0) {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    return product;", "  long\
    \ product = 1;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit % 2\
    \ != 0) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  return product;",
  "    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n    \
    \    if (digit % 2 != 0) {\n            product *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    return product;", "    long product = 1;\n    while (n\
    \ > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n      \
    \      product *= digit;\n        }\n        n /= 10;\n    }\n    return product;",
  "    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n    \
    \    if (digit % 2 == 1) {\n            product *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    return product;", "  long product = 1;\n  while (n > 0)\
    \ {\n    long digit = n % 10;\n    if (digit % 2 == 1) {\n      product *= digit;\n\
    \    }\n    n /= 10;\n  }\n  return product;", "    long product = 1;\n    while\
    \ (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n   \
    \         product *= digit;\n        }\n        n /= 10;\n    }\n    return product;",
  "    long product = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n       \
    \     product *= n % 10;\n        }\n        n /= 10;\n    }\n    return product;",
  "  long product = 1;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit\
    \ % 2 != 0) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  return product;",
  "  long product = 1;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit\
    \ % 2 == 1) {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  return product;"]
stop_tokens:
- "\n}"
