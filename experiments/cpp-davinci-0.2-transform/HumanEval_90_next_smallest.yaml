name: HumanEval_90_next_smallest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // Write a function next_smallest() that returns the 2nd smallest element of the\
  \ list.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n\
  // std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n\
  // std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1})))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35,\
  \ (long)34, (long)12, (long)-45}))) == -35);\n}\n"
completions: ["    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  long min = lst[0];\n    long min2 = lst[1];\n    for (long i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n\
    \    return min2;", "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i-1]) return lst[i];\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] > min && lst[i] < second_min) {\n \
    \           second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n         \
    \   return lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0;\n    while (i < lst.size() - 1) {\n        if (lst[i] != lst[i\
    \ + 1]) {\n            return lst[i + 1];\n        }\n        i++;\n    }\n  \
    \  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min =\
    \ lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            second_min = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n  \
    \  }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long next_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            next_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < next_min) {\n\
    \            next_min = lst[i];\n        }\n    }\n    if (min == next_min) {\n\
    \        return std::nullopt;\n    }\n    return next_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n \
    \       if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n        \
    \    return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min && lst[i] != min)\
    \ {\n            second_min = lst[i];\n        }\n    }\n    if (second_min ==\
    \ min) {\n        return std::nullopt;\n    }\n    return second_min;", "    if\
    \ (lst.size() < 2) return std::nullopt;\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) return std::nullopt;\n    return second_min;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  long min = lst[0];\n\
    \  long second_min = lst[1];\n  for (long i = 0; i < lst.size(); i++) {\n    if\
    \ (lst[i] < min) {\n      second_min = min;\n      min = lst[i];\n    } else if\
    \ (lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n  if (second_min\
    \ == min) {\n    return std::nullopt;\n  }\n  return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min && lst[i] != min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i + 1])\
    \ {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < second_min) {\n      \
    \      second_min = lst[i];\n        }\n    }\n    if (second_min == min) {\n\
    \        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n \
    \       return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0]\
    \ == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "\tif (lst.size() == 0) {\n\t\treturn std::nullopt;\n\
    \t}\n\tlong min = lst[0];\n\tlong min2 = lst[0];\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] < min) {\n\t\t\tmin2 = min;\n\t\t\tmin = lst[i];\n\t\t\
    }\n\t\telse if (lst[i] < min2 && lst[i] != min) {\n\t\t\tmin2 = lst[i];\n\t\t\
    }\n\t}\n\tif (min2 == min) {\n\t\treturn std::nullopt;\n\t}\n\treturn min2;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n        \
    \    return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n\
    \    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] > smallest) {\n\
    \            second_smallest = lst[i];\n            break;\n        }\n    }\n\
    \    if (second_smallest == smallest) {\n        return std::nullopt;\n    }\n\
    \    return second_smallest;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    if\
    \ (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n\
    \        }\n    }\n    std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] > min) {\n            min2 = lst[i];\n            break;\n      \
    \  }\n    }\n    return min2;", "\tif (lst.size() < 2) {\n\t\treturn std::nullopt;\n\
    \t}\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 1; i < lst.size(); i++)\
    \ {\n\t\tif (lst[i] != lst[i - 1]) {\n\t\t\treturn lst[i];\n\t\t}\n\t}\n\treturn\
    \ std::nullopt;", "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst[1];", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         second_min = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < second_min && lst[i] != min) {\n            second_min = lst[i];\n       \
    \ }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n\
    \    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n \
    \       return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0]\
    \ == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() <= 1) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min == min2) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         second_min = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < second_min) {\n            second_min = lst[i];\n        }\n    }\n    if\
    \ (second_min == min) {\n        return std::nullopt;\n    }\n    return second_min;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    if\
    \ (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n\
    \        }\n    }\n    std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    for (long i = 0; i < lst.size(); i++) {\n      \
    \  if (lst[i] > min) {\n            min2 = lst[i];\n            break;\n     \
    \   }\n    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "\tif (lst.size() < 2) {\n\t\treturn\
    \ std::nullopt;\n\t}\n\tlong min = lst[0];\n\tlong min2 = lst[1];\n\tfor (long\
    \ i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] < min) {\n\t\t\tmin2 = min;\n\t\
    \t\tmin = lst[i];\n\t\t}\n\t\telse if (lst[i] < min2) {\n\t\t\tmin2 = lst[i];\n\
    \t\t}\n\t}\n\tif (min2 == min) {\n\t\treturn std::nullopt;\n\t}\n\treturn min2;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long min = lst[0];\n    long second_min = lst[1];\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > min && lst[i] < second_min)\
    \ {\n            second_min = lst[i];\n        }\n    }\n    if (second_min ==\
    \ min) {\n        return std::nullopt;\n    }\n    return second_min;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n \
    \       if (lst[i] < min) {\n            second_min = min;\n            min =\
    \ lst[i];\n        } else if (lst[i] < second_min) {\n            second_min =\
    \ lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    // Your\
    \ code here\n    if(lst.size()<=1)\n        return std::nullopt;\n    long min=lst[0];\n\
    \    long second_min=lst[1];\n    for(int i=0;i<lst.size();i++)\n    {\n     \
    \   if(lst[i]<min)\n        {\n            second_min=min;\n            min=lst[i];\n\
    \        }\n        else if(lst[i]<second_min)\n        {\n            second_min=lst[i];\n\
    \        }\n    }\n    if(second_min==min)\n        return std::nullopt;\n   \
    \ return second_min;", "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst[1];", "\tif (lst.size() < 2) {\n\t\treturn std::nullopt;\n\
    \t}\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 1; i < lst.size(); i++)\
    \ {\n\t\tif (lst[i] != lst[i - 1]) {\n\t\t\treturn lst[i];\n\t\t}\n\t}\n\treturn\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min && lst[i] != min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n        \
    \    return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) return std::nullopt;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) return std::nullopt;\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min &&\
    \ lst[i] != min) {\n            second_min = lst[i];\n        }\n    }\n    if\
    \ (second_min == min) {\n        return std::nullopt;\n    }\n    return second_min;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n \
    \       if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return\
    \ std::nullopt;\n  }\n  long min = lst[0];\n  long next_min = lst[1];\n  for (long\
    \ i = 1; i < lst.size(); i++) {\n    if (lst[i] < min) {\n      next_min = min;\n\
    \      min = lst[i];\n    } else if (lst[i] < next_min) {\n      next_min = lst[i];\n\
    \    }\n  }\n  if (min == next_min) {\n    return std::nullopt;\n  }\n  return\
    \ next_min;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n\
    \    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n\
    \        }\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1;\
    \ i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            return\
    \ lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long next_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            next_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < next_min) {\n\
    \            next_min = lst[i];\n        }\n    }\n    if (min == next_min) {\n\
    \        return std::nullopt;\n    }\n    return next_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev =\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n   \
    \     return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min\
    \ = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min && lst[i] != min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n        \
    \    return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    if (min2 == min) {\n      \
    \  return std::nullopt;\n    }\n    return min2;", "    if (lst.size() < 2) {\n\
    \        return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 =\
    \ lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            min2 = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long smallest = lst[0];\n \
    \   long second_smallest = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < smallest) {\n            second_smallest = smallest;\n \
    \           smallest = lst[i];\n        } else if (lst[i] < second_smallest) {\n\
    \            second_smallest = lst[i];\n        }\n    }\n    if (second_smallest\
    \ == smallest) {\n        return std::nullopt;\n    }\n    return second_smallest;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) return std::nullopt;\n    long min = lst[0];\n    long min2 = lst[1];\n \
    \   for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n    \
    \        min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2)\
    \ {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min) return\
    \ std::nullopt;\n    return min2;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long prev\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] !=\
    \ prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n   \
    \ }\n    return std::nullopt;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i +\
    \ 1];\n        }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n\
    \        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i\
    \ - 1]) {\n      return lst[i];\n    }\n  }\n  return std::nullopt;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  long min = lst[0];\n  long second_min\
    \ = lst[1];\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < min) {\n\
    \      second_min = min;\n      min = lst[i];\n    } else if (lst[i] < second_min)\
    \ {\n      second_min = lst[i];\n    }\n  }\n  if (second_min == min) {\n    return\
    \ std::nullopt;\n  }\n  return second_min;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n\
    \            return lst[i];\n        }\n    }\n    return std::nullopt;", "  \
    \  if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min && lst[i] != min)\
    \ {\n            second_min = lst[i];\n        }\n    }\n    if (second_min ==\
    \ min) {\n        return std::nullopt;\n    }\n    return second_min;", "    //\
    \ your code here\n    if(lst.size() == 0)\n        return std::nullopt;\n    if(lst.size()\
    \ == 1)\n        return std::nullopt;\n    if(lst.size() == 2)\n    {\n      \
    \  if(lst[0] == lst[1])\n            return std::nullopt;\n        else\n    \
    \        return lst[1];\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] < min)\n  \
    \      {\n            min2 = min;\n            min = lst[i];\n        }\n    \
    \    else if(lst[i] < min2 && lst[i] != min)\n        {\n            min2 = lst[i];\n\
    \        }\n    }\n    if(min2 == min)\n        return std::nullopt;\n    return\
    \ min2;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long min = lst[0];\n    long min2 = lst[0];\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2 && lst[i] != min) {\n          \
    \  min2 = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ == 0) return std::nullopt;\n    if (lst.size() == 1) return std::nullopt;\n\
    \    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) return std::nullopt;\n\
    \        else return lst[1];\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        }\n        else if (lst[i]\
    \ < min2 && lst[i] != min) {\n            min2 = lst[i];\n        }\n    }\n \
    \   if (min2 == min) return std::nullopt;\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i +\
    \ 1]) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n \
    \       if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] > lst[0]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "  if (lst.size() == 0) {\n    return std::nullopt;\n\
    \  }\n  if (lst.size() == 1) {\n    return std::nullopt;\n  }\n  if (lst.size()\
    \ == 2) {\n    if (lst[0] == lst[1]) {\n      return std::nullopt;\n    }\n  }\n\
    \  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size(); i++)\
    \ {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n  return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] == min) {\n            continue;\n\
    \        }\n        if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i <\
    \ lst.size() - 1) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i\
    \ + 1];\n        }\n        i++;\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ long min = lst[0];\n    long second_min = lst[1];\n    for (long i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] > min) {\n            second_min = lst[i];\n\
    \            break;\n        }\n    }\n    if (second_min == min) {\n        return\
    \ std::nullopt;\n    }\n    return second_min;", "    if (lst.size() < 2) {\n\
    \        return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n \
    \     return lst[i];\n    }\n  }\n  return std::nullopt;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[0];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2 && lst[i] != min) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size() - 1;\
    \ i++) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i + 1];\n\
    \        }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n   \
    \     return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  long min = lst[0];\n  long second_min\
    \ = lst[1];\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] < min) {\n\
    \      second_min = min;\n      min = lst[i];\n    } else if (lst[i] < second_min)\
    \ {\n      second_min = lst[i];\n    }\n  }\n  if (second_min == min) {\n    return\
    \ std::nullopt;\n  }\n  return second_min;", "    if (lst.size() == 0) {\n   \
    \     return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n  \
    \  long min = lst[0];\n    long next_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] > min) {\n            next_min = lst[i];\n      \
    \      break;\n        }\n    }\n    if (next_min == min) {\n        return std::nullopt;\n\
    \    }\n    return next_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n\
    \  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] == min) {\n            continue;\n        }\n   \
    \     if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long next_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            next_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < next_min) {\n\
    \            next_min = lst[i];\n        }\n    }\n    if (min == next_min) {\n\
    \        return std::nullopt;\n    }\n    return next_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    // your code here\n    if(lst.size() == 0)\n        return std::nullopt;\n\
    \    if(lst.size() == 1)\n        return std::nullopt;\n    if(lst.size() == 2)\n\
    \    {\n        if(lst[0] == lst[1])\n            return std::nullopt;\n     \
    \   else\n            return lst[1];\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for(int i = 0; i < lst.size() - 1; i++)\n    {\n        if(lst[i] != lst[i\
    \ + 1])\n            return lst[i + 1];\n    }\n    return std::nullopt;", " \
    \   std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size() - 1;\
    \ i++) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i + 1];\n\
    \        }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n   \
    \     return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (long i = 1;\
    \ i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\
    \ {\n        std::swap(min1, min2);\n    }\n    for (int i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < min1) {\n            min2 = min1;\n           \
    \ min1 = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min1 == min2) {\n        return std::nullopt;\n   \
    \ }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "\tif (lst.size() < 2) {\n\t\treturn\
    \ std::nullopt;\n\t}\n\tlong min = lst[0];\n\tlong second_min = lst[1];\n\tfor\
    \ (int i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] < min) {\n\t\t\tsecond_min\
    \ = min;\n\t\t\tmin = lst[i];\n\t\t}\n\t\telse if (lst[i] < second_min) {\n\t\t\
    \tsecond_min = lst[i];\n\t\t}\n\t}\n\tif (second_min == min) {\n\t\treturn std::nullopt;\n\
    \t}\n\treturn second_min;", "    if (lst.size() < 2) return std::nullopt;\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (size_t i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) return lst[i];\n    }\n    return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i-1]) return\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] != prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n\
    \    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if\
    \ (min2 < min) {\n        min = min2;\n        min2 = lst[0];\n    }\n    for\
    \ (int i = 2; i < lst.size(); i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    return min2;", "    // your\
    \ code here\n    if(lst.size() == 0)\n        return std::nullopt;\n    if(lst.size()\
    \ == 1)\n        return std::nullopt;\n    if(lst.size() == 2)\n    {\n      \
    \  if(lst[0] == lst[1])\n            return std::nullopt;\n        else\n    \
    \        return lst[1];\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] < min)\n  \
    \      {\n            min2 = min;\n            min = lst[i];\n        }\n    \
    \    else if(lst[i] < min2 && lst[i] != min)\n        {\n            min2 = lst[i];\n\
    \        }\n    }\n    if(min2 == min)\n        return std::nullopt;\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < second_min) {\n      \
    \      second_min = lst[i];\n        }\n    }\n    if (second_min == min) {\n\
    \        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n      \
    \  if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev\
    \ = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n  \
    \      return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n \
    \   for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n\
    \    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    // Your code here\n    if(lst.size()\
    \ == 0)\n        return std::nullopt;\n    if(lst.size() == 1)\n        return\
    \ std::nullopt;\n    if(lst.size() == 2)\n    {\n        if(lst[0] == lst[1])\n\
    \            return std::nullopt;\n        else\n            return lst[1];\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for(int i = 0; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] < min)\n        {\n           \
    \ min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] <\
    \ min2 && lst[i] != min)\n        {\n            min2 = lst[i];\n        }\n \
    \   }\n    if(min2 == min)\n        return std::nullopt;\n    return min2;", " \
    \   if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i]\
    \ != lst[i + 1]) {\n            return lst[i + 1];\n        }\n    }\n    return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(++it);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev =\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n      \
    \  if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev\
    \ = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) return\
    \ std::nullopt;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n\
    \            second_smallest = smallest;\n            smallest = lst[i];\n   \
    \     } else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    if (second_smallest == smallest) return std::nullopt;\n\
    \    return second_smallest;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return\
    \ std::nullopt;\n  }\n  long min = lst[0];\n  long min2 = lst[1];\n  for (int\
    \ i = 1; i < lst.size(); i++) {\n    if (lst[i] < min) {\n      min2 = min;\n\
    \      min = lst[i];\n    } else if (lst[i] < min2) {\n      min2 = lst[i];\n\
    \    }\n  }\n  if (min == min2) {\n    return std::nullopt;\n  }\n  return min2;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <=\
    \ 1) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min && lst[i] != min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n  \
    \      } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n  \
    \  }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >\
    \ min && lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2 == min)\
    \ {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int count = 0;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if\
    \ (lst[i] != lst[i + 1]) {\n            count++;\n        }\n        if (count\
    \ == 2) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < second_min) {\n      \
    \      second_min = lst[i];\n        }\n    }\n    if (second_min == min) {\n\
    \        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    if (min > min2) {\n        std::swap(min,\
    \ min2);\n    }\n    for (int i = 2; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            min2 = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n    if (min2\
    \ == min) {\n        return std::nullopt;\n    }\n    return min2;"]
stop_tokens:
- "\n}"
