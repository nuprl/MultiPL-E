language: cpp
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a>b && a>c)\n    {\n        if(a*a ==\
    \ b*b + c*c)\n            return true;\n        else\n            return false;\n\
    \    }\n    else if(b>a && b>c)\n    {\n        if(b*b == a*a + c*c)\n       \
    \     return true;\n        else\n            return false;\n    }\n    else if(c>a\
    \ && c>b)\n    {\n        if(c*c == a*a + b*b)\n            return true;\n   \
    \     else\n            return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjuljtrrn: /tmp/tmpjuljtrrn.cpp:43: int main(): Assertion `candidate((2),
    (2), (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == mid * mid + min * min)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) {\n        return false;\n    }\n    if (a == b && b == c) {\n  \
    \      return false;\n    }\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Write your code\
    \ here\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0zrt3u9t: /tmp/tmp0zrt3u9t.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_variable);\n    if(a==0 || b==0 ||\
    \ c==0)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    long x = a*a;\n    long y = b*b;\n    long\
    \ z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if (a*a + b*b == c*c || a*a + c*c ==\
    \ b*b || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    long x = a*a;\n    long y = b*b;\n    long\
    \ z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    // long a = 3, b = 4,\
    \ c = 5;\n    if(a > b && a > c)\n    {\n        if(a*a == b*b + c*c)\n      \
    \      return true;\n        else\n            return false;\n    }\n    else\
    \ if(b > a && b > c)\n    {\n        if(b*b == a*a + c*c)\n            return\
    \ true;\n        else\n            return false;\n    }\n    else if(c > a &&\
    \ c > b)\n    {\n        if(c*c == a*a + b*b)\n            return true;\n    \
    \    else\n            return false;\n    }\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s\\n\", \"Hello world!\");\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    if (max * max == min * min + mid * mid) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf()\n    // Example:\
    \ Printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || b*b + c*c == a*a\
    \ || a*a + c*c == b*b)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max, min1, min2;\n    if(a > b && a > c) {\n\
    \        max = a;\n        min1 = b;\n        min2 = c;\n    }\n    else if(b\
    \ > a && b > c) {\n        max = b;\n        min1 = a;\n        min2 = c;\n  \
    \  }\n    else {\n        max = c;\n        min1 = a;\n        min2 = b;\n   \
    \ }\n    if(max * max == min1 * min1 + min2 * min2)\n        return true;\n  \
    \  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) {\n        return false;\n    }\n    std::vector<long> sides = {a,\
    \ b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0]\
    \ + sides[1] * sides[1]) == sides[2] * sides[2];\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long sides[3] = {a, b,\
    \ c};\n    std::sort(sides, sides + 3);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a*a+b*b==c*c)\n    return true;\n    else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpczh_3jku: /tmp/tmpczh_3jku.cpp:23: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a == b*b + c*c || b*b == a*a + c*c\
    \ || c*c == a*a + b*b)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6mz1la0v: /tmp/tmp6mz1la0v.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a + c*c == b*b)\n\
    \        return true;\n    else if(b*b + c*c == a*a)\n        return true;\n \
    \   else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    if(a<=0 || b<=0 || c<=0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  if(a*a + b*b == c*c)\n    return true;\n\
    \  else\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphb8bp0wz: /tmp/tmphb8bp0wz.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Print\n    // Example:\
    \ Print(\"Hello world!\")\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == mid * mid + min * min)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6mz1la0v: /tmp/tmp6mz1la0v.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\"\n  if(a*a + b*b == c*c)\n    return true;\n  else\n \
    \   return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv5xb_h79: /tmp/tmpv5xb_h79.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    long min = sum - max;\n   \
    \ if (max * max == min * min + (sum - min - max) * (sum - min - max))\n      \
    \  return true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2vx3vgmg: /tmp/tmp2vx3vgmg.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==0 || b==0 || c==0)\n        return false;\n    if(a==b && b==c)\n \
    \       return false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a<=0 || b<=0 || c<=0)\n        return\
    \ false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpn1puukn3: /tmp/tmpn1puukn3.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmputvksilm: /tmp/tmputvksilm.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    return (a*a + b*b == c*c || a*a + c*c == b*b ||\
    \ b*b + c*c == a*a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a<=0 || b<=0 || c<=0)\n        return\
    \ false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long a2 = a*a;\n    long b2 = b*b;\n\
    \    long c2 = c*c;\n    if(a2+b2==c2 || a2+c2==b2 || b2+c2==a2)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c ==\
    \ b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    //long a1=a*a;\n    //long b1=b*b;\n   \
    \ //long c1=c*c;\n    //if(a1+b1==c1||a1+c1==b1||b1+c1==a1)\n    //return true;\n\
    \    //else\n    //return false;\n    if(a>b && a>c)\n    {\n        if(a*a==b*b+c*c)\n\
    \        return true;\n        else\n        return false;\n    }\n    else if(b>a\
    \ && b>c)\n    {\n        if(b*b==a*a+c*c)\n        return true;\n        else\n\
    \        return false;\n    }\n    else if(c>a && c>b)\n    {\n        if(c*c==a*a+b*b)\n\
    \        return true;\n        else\n        return false;\n    }\n    else\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  if(a==0 || b==0 || c==0)\n    return false;\n\
    \  if(a*a+b*b==c*c || b*b+c*c==a*a || c*c+a*a==b*b)\n    return true;\n  return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a + c*c == b*b)\n\
    \        return true;\n    else if(b*b + c*c == a*a)\n        return true;\n \
    \   else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a>b && a>c){\n        if(a*a == b*b +\
    \ c*c){\n            return true;\n        }\n    }\n    else if(b>a && b>c){\n\
    \        if(b*b == a*a + c*c){\n            return true;\n        }\n    }\n \
    \   else if(c>a && c>b){\n        if(c*c == a*a + b*b){\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c ==\
    \ b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long max = std::max(a, std::max(b, c));\n\
    \  long min = std::min(a, std::min(b, c));\n  long mid = a + b + c - max - min;\n\
    \  return max * max == mid * mid + min * min;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long sum = a + b + c;\n    if\
    \ (max * max == (sum - max) * (sum - max)) {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpd2wsdjuo: /tmp/tmpd2wsdjuo.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a == 0 || b == 0 || c == 0)\n        return false;\n    if(a*a + b*b ==\
    \ c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return true;\n\
    \    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // your code here\n \
    \   if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n   \
    \     return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    long x,y,z;\n    x=a*a;\n    y=b*b;\n  \
    \  z=c*c;\n    if(x+y==z || y+z==x || x+z==y)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0]\
    \ + arr[1]*arr[1] == arr[2]*arr[2]){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Write - Your\
    \ - Code\n    if(a>b && a>c){\n        if(a*a == b*b + c*c){\n            return\
    \ true;\n        }\n    }\n    else if(b>a && b>c){\n        if(b*b == a*a + c*c){\n\
    \            return true;\n        }\n    }\n    else if(c>a && c>b){\n      \
    \  if(c*c == a*a + b*b){\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long x = a*a;\n    long y = b*b;\n  \
    \  long z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return true;\n \
    \   else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  if(a==0 || b==0 || c==0)\n    return false;\n\
    \  if(a*a + b*b == c*c)\n    return true;\n  if(a*a + c*c == b*b)\n    return\
    \ true;\n  if(b*b + c*c == a*a)\n    return true;\n  return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    long sides[3] = {a, b, c};\n    std::sort(sides,\
    \ sides + 3);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr+3);\n    if (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return (max * max == mid * mid + min * min);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c)\n        return true;\n    else\
    \ if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a+b*b==c*c)\n        return true;\n    if(a*a+c*c==b*b)\n \
    \       return true;\n    if(b*b+c*c==a*a)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Your code goes here\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpboxzb_0l: /tmp/tmpboxzb_0l.cpp:23: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a>b && a>c)\n    {\n        if(a*a\
    \ == b*b + c*c)\n            return true;\n        else\n            return false;\n\
    \    }\n    else if(b>a && b>c)\n    {\n        if(b*b == a*a + c*c)\n       \
    \     return true;\n        else\n            return false;\n    }\n    else if(c>a\
    \ && c>b)\n    {\n        if(c*c == a*a + b*b)\n            return true;\n   \
    \     else\n            return false;\n    }\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Write - Your\
    \ - Code\n    // return false;\n    if(a == 0 || b == 0 || c == 0)\n        return\
    \ false;\n    if(a == b && b == c)\n        return false;\n    if(a*a + b*b ==\
    \ c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return true;\n\
    \    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\"\n  long sides[3] = {a, b, c};\n  std::sort(sides, sides\
    \ + 3);\n  return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    if (max * max == min * min + mid * mid) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    if (max == a) {\n        return (b * b + c * c\
    \ == a * a);\n    } else if (max == b) {\n        return (a * a + c * c == b *\
    \ b);\n    } else {\n        return (a * a + b * b == c * c);\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    if (max * max == mid * mid + min * min) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmqomcldf: /tmp/tmpmqomcldf.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    //long a,b,c;\n    //scanf(\"%ld %ld\
    \ %ld\",&a,&b,&c);\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: implement this\
    \ function\n    // return true if the three sides form a right-angled triangle,\
    \ False otherwise.\n    if(a==0 || b==0 || c==0)\n        return false;\n    if(a*a\
    \ + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return\
    \ true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Your code here\n \
    \   return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1xk4m9li: /tmp/tmp1xk4m9li.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long max = std::max(a, std::max(b, c));\n\
    \  long sum = a + b + c - max;\n  return max * max == sum * sum;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphzk1ck3x: /tmp/tmphzk1ck3x.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max_side = std::max(a, std::max(b,\
    \ c));\n    if (max_side == a) {\n        return (b * b + c * c == a * a);\n \
    \   } else if (max_side == b) {\n        return (a * a + c * c == b * b);\n  \
    \  } else {\n        return (a * a + b * b == c * c);\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    long arr[3] = {a,b,c};\n    std::sort(arr,arr+3);\n    if(arr[0]*arr[0]\
    \ + arr[1]*arr[1] == arr[2]*arr[2])\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Write your code\
    \ here\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0zrt3u9t: /tmp/tmp0zrt3u9t.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    if (max * max == sum - max) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpru216ln8: /tmp/tmpru216ln8.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long sides[3] = {a, b,\
    \ c};\n    std::sort(sides, sides + 3);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0) {\n        return false;\n    }\n    if(a*a + b*b == c*c) {\n      \
    \  return true;\n    }\n    if(a*a + c*c == b*b) {\n        return true;\n   \
    \ }\n    if(b*b + c*c == a*a) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\"\n  if(a*a + b*b == c*c)\n    return true;\n  else\n \
    \   return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv5xb_h79: /tmp/tmpv5xb_h79.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    if (max * max == min * min + mid * mid) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c ==\
    \ a*a)\n        return true;\n    else\n        return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Write - Your\
    \ - Code\n    long x = std::max(a, std::max(b, c));\n    long y = std::min(a,\
    \ std::min(b, c));\n    long z = a + b + c - x - y;\n    return (x * x == y *\
    \ y + z * z);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Print\n    // Example:\
    \ Print(\"Hello world!\")\n    if(a*a + b*b == c*c)\n        return true;\n  \
    \  else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    return (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a);\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c ==\
    \ a*a)\n        return true;\n    else\n        return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0) return false;\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if(max * max == min * min + mid * mid) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmputvksilm: /tmp/tmputvksilm.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    return (v[0]*v[0]\
    \ + v[1]*v[1] == v[2]*v[2]);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\"\n  if(a*a + b*b == c*c)\n    return true;\n  else\n \
    \   return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv5xb_h79: /tmp/tmpv5xb_h79.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long sum = a + b + c;\n    if (max *\
    \ max == (sum - max - min) * (sum - max - min) + min * min) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    if (max == a) {\n        return (b * b + c * c\
    \ == a * a);\n    } else if (max == b) {\n        return (a * a + c * c == b *\
    \ b);\n    } else {\n        return (a * a + b * b == c * c);\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmqomcldf: /tmp/tmpmqomcldf.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    std::vector<long> v =\
    \ {a, b, c};\n    std::sort(v.begin(), v.end());\n    return (v[0] * v[0] + v[1]\
    \ * v[1] == v[2] * v[2]);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a > b && a > c) {\n\
    \        return (a*a == b*b + c*c);\n    }\n    else if(b > a && b > c) {\n  \
    \      return (b*b == a*a + c*c);\n    }\n    else {\n        return (c*c == a*a\
    \ + b*b);\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a > b && a > c) {\n\
    \        return (a*a == b*b + c*c);\n    }\n    else if(b > a && b > c) {\n  \
    \      return (b*b == a*a + c*c);\n    }\n    else {\n        return (c*c == a*a\
    \ + b*b);\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n     \
    \   return true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2]){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Your code here\n \
    \   if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n      \
    \  return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n \
    \       return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    if(a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    if(a*a+b*b==c*c)\n   \
    \     return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpots0wx06: /tmp/tmpots0wx06.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a == b && b == c)\n        return false;\n\
    \    if(a == b || b == c || a == c)\n        return false;\n    if(a*a + b*b ==\
    \ c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return true;\n\
    \    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplng3hsyn: /tmp/tmplng3hsyn.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplng3hsyn: /tmp/tmplng3hsyn.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    std::vector<long> v;\n\
    \    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    if (v[0] * v[0] + v[1] * v[1] == v[2] * v[2]) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"x\", 1);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a<=0 || b<=0 || c<=0)\n        return false;\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // TODO: Implement this\
    \ function\n    // Hint: You can use the Pythagorean theorem\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 == c^2\n    // a^2 + b^2 - c^2 == 0\n    // a^2 + b^2\
    \ - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp69pkep3y: /tmp/tmp69pkep3y.cpp:46: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n\t// Write your code here\n\
    \tif(a*a + b*b == c*c)\n\t\treturn true;\n\tif(a*a + c*c == b*b)\n\t\treturn true;\n\
    \tif(b*b + c*c == a*a)\n\t\treturn true;\n\treturn false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if (a*a + b*b == c*c)\n        return true;\n  \
    \  else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp29zdnvrv: /tmp/tmp29zdnvrv.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"x\", 1);\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsr9iugg3: /tmp/tmpsr9iugg3.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use cout\n    // Example:\
    \ cout << \"Hello world!\";\n    long max_side = std::max(a, std::max(b, c));\n\
    \    long sum_of_other_sides = a + b + c - max_side;\n    if (max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppfn4q1aj: /tmp/tmppfn4q1aj.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    std::vector<long> v;\n    v.push_back(a);\n\
    \    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n\
    \    return (v[0]*v[0] + v[1]*v[1] == v[2]*v[2]);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a + c*c == b*b)\n\
    \        return true;\n    else if(b*b + c*c == a*a)\n        return true;\n \
    \   else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a == 0 || b == 0 || c == 0)\n    \
    \    return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062480
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmqomcldf: /tmp/tmpmqomcldf.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062482
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %s\\n\", \"My variable\", my_var);\n    if(a*a + b*b == c*c ||\
    \ a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    if (max * max == mid * mid + min * min) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpn1puukn3: /tmp/tmpn1puukn3.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  std::vector<long> sides\
    \ = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmputvksilm: /tmp/tmputvksilm.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a == 0 || b == 0 || c == 0)\n    \
    \    return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a==0 || b==0 || c==0)\n        return\
    \ false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // TODO: Implement this\
    \ function\n  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnpz9hiov: /tmp/tmpnpz9hiov.cpp:18: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s\\n\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpedwh2nt_: /tmp/tmpedwh2nt_.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if (a == 0 || b == 0 || c == 0)\n   \
    \     return false;\n    if (a*a + b*b == c*c)\n        return true;\n    if (a*a\
    \ + c*c == b*b)\n        return true;\n    if (b*b + c*c == a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use Printf\n  // Example:\
    \ Printf(\"%s\\n\", \"Hello world!\");\n  if(a==0 || b==0 || c==0)\n    return\
    \ false;\n  if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n    return true;\n\
    \  return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmputvksilm: /tmp/tmputvksilm.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062480
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    if(a*a+c*c==b*b)\n        return true;\n    if(b*b+c*c==a*a)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) {\n        return false;\n    }\n    if (a > b && a > c) {\n    \
    \    return a * a == b * b + c * c;\n    }\n    if (b > a && b > c) {\n      \
    \  return b * b == a * a + c * c;\n    }\n    if (c > a && c > b) {\n        return\
    \ c * c == a * a + b * b;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if(a == b && b == c)\n        return false;\n\
    \    if(a == b || b == c || a == c)\n        return false;\n    if(a*a + b*b ==\
    \ c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return true;\n\
    \    if(b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062483
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long x = a*a;\n    long y = b*b;\n  \
    \  long z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return true;\n \
    \   else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062481
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6mz1la0v: /tmp/tmp6mz1la0v.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a+b*b==c*c)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplng3hsyn: /tmp/tmplng3hsyn.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062483
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    long min = std::min(a, std::min(b, c));\n    if(max\
    \ * max == sum - max - min) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpozk_d8z8: /tmp/tmpozk_d8z8.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062485
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\", \"a\", a);\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6mz1la0v: /tmp/tmp6mz1la0v.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062479
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    if (max * max == sum - max * max) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpbyk2s0tq: /tmp/tmpbyk2s0tq.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062484
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) {\n        return false;\n    }\n    if (a == b && b == c) {\n  \
    \      return false;\n    }\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\"\n    if(a*a + b*b == c*c)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmqomcldf: /tmp/tmpmqomcldf.cpp:25: int main(): Assertion `candidate((10),
    (6), (8)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660062481
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062479
