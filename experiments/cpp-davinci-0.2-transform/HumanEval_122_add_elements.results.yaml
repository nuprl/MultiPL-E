language: cpp
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n     \
    \       result += arr[i];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyxv94x9e: /tmp/tmpyxv94x9e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxk8znzp7: /tmp/tmpxk8znzp7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] > 99) {\n        \
    \    sum += 99;\n        } else {\n            sum += arr[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s2etxh1: /tmp/tmp5s2etxh1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] > 99) {\n        \
    \    sum += 99;\n        } else {\n            sum += arr[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s2etxh1: /tmp/tmp5s2etxh1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100)\n         \
    \   sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] > 99) {\n        \
    \    sum += 99;\n        } else {\n            sum += arr[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s2etxh1: /tmp/tmp5s2etxh1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (long i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (long i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n     \
    \       result += arr[i];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] > 99) {\n        \
    \    sum += 99;\n        } else {\n            sum += arr[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s2etxh1: /tmp/tmp5s2etxh1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxk8znzp7: /tmp/tmpxk8znzp7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100)\n        \
    \    sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n       \
    \     sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660061124
