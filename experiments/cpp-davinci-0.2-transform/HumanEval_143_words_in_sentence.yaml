name: HumanEval_143_words_in_sentence
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing\
  \ a sentence,\n// the sentence contains some words separated by a space,\n// and\
  \ you have to return a string that contains the words from the original sentence,\n\
  // whose lengths are prime numbers,\n// the order of the words in the new string\
  \ should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"\
  This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets\
  \ go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence)\
  \ <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string\
  \ sentence) {\n"
tests: "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
  This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
  )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
  )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
  \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
  ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
  \ is\")) == (\"is\"));\n}\n"
completions: ["    std::string result;\n    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n  \
    \          result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::string result = \"\";\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i\
    \ < words.size(); i++) {\n        int count = 0;\n        for (int j = 1; j <=\
    \ words[i].length(); j++) {\n            if (words[i].length() % j == 0) {\n \
    \               count++;\n            }\n        }\n        if (count == 2) {\n\
    \            result += words[i] + \" \";\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word.length() == 2 || word.length()\
    \ == 3 || word.length() == 5 || word.length() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result;", "    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);", "    std::string\
    \ result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::string result = \"\";\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        int\
    \ len = word.length();\n        bool prime = true;\n        for (int i = 2; i\
    \ < len; i++) {\n            if (len % i == 0) {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if (prime) {\n    \
    \        result += word + \" \";\n        }\n    }\n    return result;", "   \
    \ std::stringstream ss(sentence);\n    std::string word;\n    std::string result;\n\
    \    while (ss >> word) {\n        if (word.length() == 2 || word.length() ==\
    \ 3 || word.length() == 5 || word.length() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        bool isPrime = true;\n\
    \        for (int j = 2; j < words[i].length(); j++) {\n            if (words[i].length()\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            result += words[i]\
    \ + \" \";\n        }\n    }\n    return result;", "    std::string result = \"\
    \";\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss\
    \ >> word) {\n        bool isPrime = true;\n        for (int i = 2; i < word.length();\
    \ i++) {\n            if (word.length() % i == 0) {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result;",
  "    std::stringstream ss(sentence);\n    std::string word;\n    std::string result;\n\
    \    while (ss >> word) {\n        if (is_prime(word.length())) {\n          \
    \  result += word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);", "    std::string res;\n    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word.size() == 1) {\n         \
    \   res += word + \" \";\n            continue;\n        }\n        bool isPrime\
    \ = true;\n        for (int i = 2; i <= word.size() / 2; ++i) {\n            if\
    \ (word.size() % i == 0) {\n                isPrime = false;\n               \
    \ break;\n            }\n        }\n        if (isPrime) {\n            res +=\
    \ word + \" \";\n        }\n    }\n    return res;", "    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    if (result.length() > 0) {\n        result.pop_back();\n\
    \    }\n    return result;", "    std::string result;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::vector<std::string> words;\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] == ' ') {\n            words.push_back(word);\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    words.push_back(word);\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < words.size(); i++) {\n        if (words[i].length() == 1) {\n   \
    \         result += words[i] + \" \";\n        } else if (words[i].length() ==\
    \ 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] +", "    std::string result = \"\"\
    ;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] == ' ') {\n            if (is_prime(word.length())) {\n       \
    \         result += word + \" \";\n            }\n            word = \"\";\n \
    \       } else {\n            word += sentence[i];\n        }\n    }\n    if (is_prime(word.length()))\
    \ {\n        result += word;\n    }\n    return result;", "    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);",
  "    std::vector<std::string> words;\n    std::string word;\n    for (auto c : sentence)\
    \ {\n        if (c == ' ') {\n            words.push_back(word);\n           \
    \ word = \"\";\n        } else {\n            word += c;\n        }\n    }\n \
    \   words.push_back(word);\n    std::string result;\n    for (auto word : words)\
    \ {\n        if (word.size() == 1) {\n            result += word + \" \";\n  \
    \      } else {\n            bool is_prime = true;\n            for (int i = 2;\
    \ i < word.size(); i++) {\n                if (word.size() % i == 0) {\n     \
    \               is_prime = false;\n                    break;\n              \
    \  }\n            }\n            if (is_prime) {\n                result += word\
    \ + \" \";\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n\
    \    while (ss >> word) {\n        if (is_prime(word.length())) {\n          \
    \  result += word + \" \";\n        }\n    }\n    if (result.length() > 0) {\n\
    \        result.pop_back();\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;"]
stop_tokens:
- "\n}"
