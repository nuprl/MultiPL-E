name: HumanEval_25_factorize
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n// Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n// Input number should be equal to the product of all factors\n\
  // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>>\
  \ factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
  // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
  \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
  \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
  \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
  \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
  \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
  \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
  \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
  \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;", "    std::vector<long> factors;\n\
    \    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n         \
    \   factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;",
  "    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> factors;\n    for (long\
    \ i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;", "    std::vector<long> factors;\n    for (long i = 2; i <=\
    \ n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;", "    std::vector<long> result;\n    for (long i = 2; i <=\
    \ n; ++i) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            result.push_back(i);\n            n /= i;\n        }\n    }\n   \
    \ return result;", "    std::vector<long> factors;\n    for (long i = 2; i <=\
    \ n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;", "    std::vector<long>\
    \ result;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            result.push_back(i);\n            n /= i;\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (long i = 2; i <= n;\
    \ i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n   \
    \         n /= i;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            result.push_back(i);\n            n /= i;\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for (long i = 2; i <= n;\
    \ i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n   \
    \         n /= i;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;", "    std::vector<long> result;\n    for (long i = 2; i *\
    \ i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (long d =\
    \ 2; d * d <= n; ++d) {\n        while (n % d == 0) {\n            result.push_back(d);\n\
    \            n /= d;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (long i =\
    \ 2; i <= n; ++i) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          res.push_back(i);\n            n /= i;\n        }\n    }\n    return\
    \ res;", "    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;"]
stop_tokens:
- "\n}"
