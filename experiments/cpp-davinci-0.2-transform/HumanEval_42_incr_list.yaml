name: HumanEval_42_incr_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
  \ incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n\
  // (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n\
  // (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10,\
  \ (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3,\
  \ (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3,\
  \ (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n"
completions: ["    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        res.push_back(l[i] + 1);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        res.push_back(l[i] +\
    \ 1);\n    }\n    return res;", "    std::vector<long> ret;\n    for (auto i :\
    \ l) {\n        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    for (auto i : l) {\n        ret.push_back(i + 1);\n    }\n    return\
    \ ret;", "    std::vector<long> res;\n    for (auto x : l) {\n        res.push_back(x\
    \ + 1);\n    }\n    return res;", "    std::vector<long> res;\n    for (auto i\
    \ : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    for (auto i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;", "    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        res.push_back(l[i]\
    \ + 1);\n    }\n    return res;", "    std::vector<long> ret;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        ret.push_back(l[i] + 1);\n    }\n    return\
    \ ret;", "    std::vector<long> out;\n    for (auto i : l) {\n        out.push_back(i\
    \ + 1);\n    }\n    return out;", "    std::vector<long> res;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        res.push_back(l[i] + 1);\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    for (auto i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> ret;\n    for (auto i\
    \ : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    for (auto e : l) {\n        res.push_back(e\
    \ + 1);\n    }\n    return res;", "    std::vector<long> ret;\n    for (auto x\
    \ : l) {\n        ret.push_back(x + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    for (auto i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;"]
stop_tokens:
- "\n}"
