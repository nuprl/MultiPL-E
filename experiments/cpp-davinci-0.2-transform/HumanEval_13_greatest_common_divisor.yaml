name: HumanEval_13_greatest_common_divisor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
  \ divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n//\
  \ (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long\
  \ a, long b) {\n"
tests: "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
  \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
  \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
completions: ["    long c;\n    while (a != 0) {\n        c = a;\n        a = b %\
    \ a;\n        b = c;\n    }\n    return b;", "    long c;\n    while (a != 0)\
    \ {\n        c = a;\n        a = b % a;\n        b = c;\n    }\n    return b;",
  "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    }\n    return greatest_common_divisor(a, b % a);", "    if (a == 0) {\n \
    \       return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a % b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b % a);", "    // TODO: Implement this function\n\
    \    if(a==0)\n        return b;\n    return greatest_common_divisor(b%a,a);",
  "    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n \
    \   }\n    while (b != 0) {\n        long temp = a % b;\n        a = b;\n    \
    \    b = temp;\n    }\n    return a;", "    if (a == 0) {\n        return b;\n\
    \    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n      \
    \  return greatest_common_divisor(a % b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b % a);", "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    }\n    return greatest_common_divisor(a, b % a);", "    if (a\
    \ == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n  \
    \  }\n    if (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return\
    \ greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);", "    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b % a);", "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    }\n    return greatest_common_divisor(a, b % a);", "    if (a\
    \ == 0)\n        return b;\n    return greatest_common_divisor(b % a, a);", " \
    \   long c;\n    while (a != 0) {\n        c = a; a = b%a;  b = c;\n    }\n  \
    \  return b;", "    if (a < b) {\n        long temp = a;\n        a = b;\n   \
    \     b = temp;\n    }\n    if (b == 0) {\n        return a;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);", "    if(a==0)\n        return b;\n    if(b==0)\n\
    \        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n        return\
    \ greatest_common_divisor(a-b,b);\n    return greatest_common_divisor(a,b-a);",
  "    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);", "    if (a == 0) {\n\
    \        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a % b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b % a);", "    long c;\n    while ( a != 0 ) {\n\
    \        c = a; a = b%a;  b = c;\n    }\n    return b;", "    if (a == 0) {\n\
    \        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a % b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b % a);", "    assert(a >= 0);\n    assert(b >= 0);\n\
    \    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    }\n    return greatest_common_divisor(a, b % a);"]
stop_tokens:
- "\n}"
