language: cpp
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgunupth6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpgunupth6.cpp:10:15:\
    \ error: 'str' does not name a type\n     for (auto str : strings) {\n       \
    \        ^\n/tmp/tmpgunupth6.cpp:15:5: error: expected ';' before 'return'\n \
    \    return result;\n     ^\n/tmp/tmpgunupth6.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpgunupth6.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpgunupth6.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpgunupth6.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpgunupth6.cpp:\
    \ In function 'int main()':\n/tmp/tmpgunupth6.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgunupth6.cpp:2:\n/tmp/tmpgunupth6.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpgunupth6.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpgunupth6.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::stri"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(strings[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7nxoerz.cpp: In function 'int main()':\n/tmp/tmpm7nxoerz.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm7nxoerz.cpp:2:\n/tmp/tmpm7nxoerz.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpm7nxoerz.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpm7nxoerz.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpm7nxoerz.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm7nxoerz.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpm7nxoerz.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.size() >= prefix.size() && s.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(s);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkyfsjtt2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->find(prefix)\
    \ == 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3ala5bo4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0i777rps.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxcuo8d9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzmtrit6g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9gj21c1g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0i777rps.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      res.push_back(s);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpequsnx5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1uxiqb_r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        if ((*i).find(prefix)\
    \ == 0) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsj7ifb8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto string : strings) {\n        if (string.find(prefix) == 0) {\n       \
    \     result.push_back(string);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5u0vl3bl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      res.push_back(s);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpequsnx5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphh1pc96a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      res.push_back(s);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpequsnx5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9gj21c1g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2jobpago.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0rbz6k0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0rbz6k0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    for (auto\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            ret.push_back(s);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeayxdoz3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6xgqoq7.cpp: In function 'int main()':\n/tmp/tmpr6xgqoq7.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr6xgqoq7.cpp:2:\n/tmp/tmpr6xgqoq7.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpr6xgqoq7.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpr6xgqoq7.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpr6xgqoq7.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    for (std::string\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      ret.push_back(s);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3h9hg9zf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1uxiqb_r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzmtrit6g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b8d20j9.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp9b8d20j9.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp9b8d20j9.cpp: In function\
    \ 'int main()':\n/tmp/tmp9b8d20j9.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9b8d20j9.cpp:2:\n/tmp/tmp9b8d20j9.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp9b8d20j9.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp9b8d20j9.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnr1ly9a.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpfnr1ly9a.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpfnr1ly9a.cpp: In function\
    \ 'int main()':\n/tmp/tmpfnr1ly9a.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnr1ly9a.cpp:2:\n/tmp/tmpfnr1ly9a.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpfnr1ly9a.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpfnr1ly9a.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffcom6so.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpffcom6so.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpffcom6so.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpffcom6so.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpffcom6so.cpp:\
    \ In function 'int main()':\n/tmp/tmpffcom6so.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpffcom6so.cpp:2:\n/tmp/tmpffcom6so.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpffcom6so.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpffcom6so.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_ys_q5h.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpk_ys_q5h.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk_ys_q5h.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk_ys_q5h.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpk_ys_q5h.cpp:\
    \ In function 'int main()':\n/tmp/tmpk_ys_q5h.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_ys_q5h.cpp:2:\n/tmp/tmpk_ys_q5h.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpk_ys_q5h.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpk_ys_q5h.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
