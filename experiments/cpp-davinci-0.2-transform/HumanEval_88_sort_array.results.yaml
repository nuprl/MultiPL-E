language: cpp
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0 || array.size() == 1) {\n    return array;\n\
    \  }\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  std::vector<long> result;\n  if(array.size() == 0)\n    return result;\n\
    \  if(array.size() == 1)\n    return array;\n  if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  else\n    std::sort(array.begin(), array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0 || array.size() == 1)\n    return array;\n\
    \  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() < 2) return array;\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    int i = 0;\n    int j = array.size() - 1;\n    while\
    \ (i < j) {\n        if ((array[i] + array[j]) % 2 == 0) {\n            std::swap(array[i],\
    \ array[j]);\n        }\n        i++;\n        j--;\n    }\n    std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphwkt6fjs: /tmp/tmphwkt6fjs.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0) return array;\n    if(array.size()==1) return\
    \ array;\n    if((array[0]+array[array.size()-1])%2==0){\n        std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \    }\n    else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // your code here\n    if(array.size() == 0)\n        return array;\n\
    \    if(array.size() == 1)\n        return array;\n    if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n    {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    else\n    {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    int sum = array[0] + array[array.size() - 1];\n    if(sum % 2 == 0)\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    else\n\
    \        std::sort(array.begin(), array.end());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  std::vector<long> result;\n  if (array.size() == 0) {\n    return\
    \ result;\n  }\n  if (array.size() == 1) {\n    return array;\n  }\n  if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        sort(array.begin(),\
    \ array.end(), greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplncvvea3.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplncvvea3.cpp:21:42: error: \u2018greater\u2019 was not\
    \ declared in this scope; did you mean \u2018std::greater\u2019?\n   21 |    \
    \     sort(array.begin(), array.end(), greater<long>());\n      |            \
    \                              ^~~~~~~\n      |                              \
    \            std::greater\nIn file included from /usr/include/c++/9/string:48,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplncvvea3.cpp:2:\n/usr/include/c++/9/bits/stl_function.h:337:12:\
    \ note: \u2018std::greater\u2019 declared here\n  337 |     struct greater;\n\
    \      |            ^~~~~~~\n/tmp/tmplncvvea3.cpp:21:50: error: expected primary-expression\
    \ before \u2018long\u2019\n   21 |         sort(array.begin(), array.end(), greater<long>());\n\
    \      |                                                  ^~~~\n"
  stdout: ''
  timestamp: 1660134809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()<=1)\n        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n\
    \        sort(array.begin(),array.end(),greater<long>());\n    else\n        sort(array.begin(),array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimrnzfhf.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpimrnzfhf.cpp:21:40: error: \u2018greater\u2019 was not\
    \ declared in this scope; did you mean \u2018std::greater\u2019?\n   21 |    \
    \     sort(array.begin(),array.end(),greater<long>());\n      |              \
    \                          ^~~~~~~\n      |                                  \
    \      std::greater\nIn file included from /usr/include/c++/9/string:48,\n   \
    \              from /usr/include/c++/9/bits/locale_classes.h:40,\n           \
    \      from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpimrnzfhf.cpp:2:\n/usr/include/c++/9/bits/stl_function.h:337:12:\
    \ note: \u2018std::greater\u2019 declared here\n  337 |     struct greater;\n\
    \      |            ^~~~~~~\n/tmp/tmpimrnzfhf.cpp:21:48: error: expected primary-expression\
    \ before \u2018long\u2019\n   21 |         sort(array.begin(),array.end(),greater<long>());\n\
    \      |                                                ^~~~\n"
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  sort(array.begin(),array.end(),greater<long>());\n    else\n        sort(array.begin(),array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6y14py4.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv6y14py4.cpp:23:40: error: \u2018greater\u2019 was not\
    \ declared in this scope; did you mean \u2018std::greater\u2019?\n   23 |    \
    \     sort(array.begin(),array.end(),greater<long>());\n      |              \
    \                          ^~~~~~~\n      |                                  \
    \      std::greater\nIn file included from /usr/include/c++/9/string:48,\n   \
    \              from /usr/include/c++/9/bits/locale_classes.h:40,\n           \
    \      from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv6y14py4.cpp:2:\n/usr/include/c++/9/bits/stl_function.h:337:12:\
    \ note: \u2018std::greater\u2019 declared here\n  337 |     struct greater;\n\
    \      |            ^~~~~~~\n/tmp/tmpv6y14py4.cpp:23:48: error: expected primary-expression\
    \ before \u2018long\u2019\n   23 |         sort(array.begin(),array.end(),greater<long>());\n\
    \      |                                                ^~~~\n"
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    std::sort(array.begin(), array.end());\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpiegzqqq0: /tmp/tmpiegzqqq0.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if (array.size() == 2) {\n    if (array[0] > array[1]) {\n      std::swap(array[0],\
    \ array[1]);\n    }\n    return array;\n  }\n  if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0) return result;\n\
    \    if(array.size() == 1) return array;\n    if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    else {\n        std::sort(array.begin(), array.end());\n    }\n  \
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::sort(array.begin(), array.end());\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::reverse(array.begin(), array.end());\n    }\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if (array.size() == 2) {\n    if (array[0] > array[1]) {\n      std::swap(array[0],\
    \ array[1]);\n    }\n    return array;\n  }\n  if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  std::vector<long> result;\n  if (array.size() == 0) {\n    return\
    \ result;\n  }\n  if (array.size() == 1) {\n    return array;\n  }\n  if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return {};\n    if(array.size() == 1) return\
    \ array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() <= 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0){\n      \
    \  return result;\n    }\n    if(array.size() == 1){\n        return array;\n\
    \    }\n    if((array[0] + array[array.size() - 1]) % 2 == 0){\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    }\n    else{\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size()==0)\n    return array;\n  if(array.size()==1)\n\
    \    return array;\n  if((array[0]+array[array.size()-1])%2==0)\n    std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \  else\n    std::sort(array.begin(),array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0 || array.size() == 1) {\n    return array;\n\
    \  }\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  std::vector<long> result;\n  if (array.size() == 0) {\n    return\
    \ result;\n  }\n  if (array.size() == 1) {\n    return array;\n  }\n  if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2\
    \ == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> res;\n    if (array.size() == 0) {\n       \
    \ return res;\n    }\n    if (array.size() == 1) {\n        return array;\n  \
    \  }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0) return result;\n\
    \    if(array.size() == 1) return array;\n    if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size() - 1])\
    \ % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0) return array;\n    if(array.size()==1) return\
    \ array;\n    if((array[0]+array[array.size()-1])%2==0){\n        std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \    }\n    else{\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // your code here\n    int sum = array[0] + array[array.size()-1];\n\
    \    if(sum % 2 == 0){\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    else{\n        std::sort(array.begin(), array.end());\n    }\n   \
    \ return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmput7yhym2: /tmp/tmput7yhym2.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)1}))) == (std::vector<long>({(long)1, (long)2}))'' failed.

    '
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size()==0)\n    return array;\n  if(array.size()==1)\n\
    \    return array;\n  if((array[0]+array[array.size()-1])%2==0)\n    std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \  else\n    std::sort(array.begin(),array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  // your code here\n  int sum = array[0] + array[array.size()-1];\n\
    \  if(sum % 2 == 0){\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  }\n  else{\n    std::sort(array.begin(), array.end());\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n      \
    \  std::sort(array.begin(),array.end(),std::greater<long>());\n    else\n    \
    \    std::sort(array.begin(),array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size()==0)\n    return array;\n  if(array.size()==1)\n\
    \    return array;\n  if((array[0]+array[array.size()-1])%2==0)\n    std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \  else\n    std::sort(array.begin(),array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660134810
