name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"\
  FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"\
  ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            result =\
    \ word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int pos = word.length() - 1;\n \
    \   while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos == 0) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[pos - 1]) == std::string::npos) {\n        \
    \        return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    // your code here\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    // Your code here\n    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n    \
    \    if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int len = word.length();\n    for (int i = len - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      result = word[i];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i - 1;\n            while (j >= 0) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    j--;\n                } else {\n\
    \                    break;\n                }\n            }\n            if\
    \ (j >= 0) {\n                return word.substr(i, 1);\n            }\n     \
    \   }\n        i--;\n    }\n    return \"\";", "    int n = word.length();\n \
    \   int i = n-1;\n    while(i>=0){\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            if(i ==\
    \ n-1){\n                return \"\";\n            }\n            if(word[i+1]\
    \ == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1]\
    \ == 'u'){\n                return \"\";\n            }\n            return word.substr(i,1);\n\
    \        }\n        i--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int vowel_index\
    \ = vowels.find(word[i]);\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance > 0 && (closest_vowel_distance\
    \ == -1 || distance < closest_vowel_distance)) {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = vowel_index;\n          \
    \  }\n        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\
    \";\n    }\n    return vowels.substr(closest_vowel_index, 1);", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int i = word.length() - 1;\n    while (i\
    \ >= 0) {\n        if (consonants.find(word[i]) != std::string::npos) {\n    \
    \        if (i == word.length() - 1) {\n                return result;\n     \
    \       }\n            else {\n                int j = i + 1;\n              \
    \  while (j < word.length()) {\n                    if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                        result = word[j];\n          \
    \              return result;\n                    }\n                    j++;\n\
    \                }\n                return result;\n            }\n        }\n\
    \        i--;\n    }\n    return result;"]
stop_tokens:
- "\n}"
