name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"\
  FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"\
  ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            result =\
    \ word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int pos = word.length() - 1;\n \
    \   while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos == 0) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[pos - 1]) == std::string::npos) {\n        \
    \        return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    // your code here\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    // Your code here\n    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n    \
    \    if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int len = word.length();\n    for (int i = len - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      result = word[i];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i - 1;\n            while (j >= 0) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    j--;\n                } else {\n\
    \                    break;\n                }\n            }\n            if\
    \ (j >= 0) {\n                return word.substr(i, 1);\n            }\n     \
    \   }\n        i--;\n    }\n    return \"\";", "    int n = word.length();\n \
    \   int i = n-1;\n    while(i>=0){\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            if(i ==\
    \ n-1){\n                return \"\";\n            }\n            if(word[i+1]\
    \ == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1]\
    \ == 'u'){\n                return \"\";\n            }\n            return word.substr(i,1);\n\
    \        }\n        i--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    int\
    \ closest_vowel_distance = -1;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int vowel_index\
    \ = vowels.find(word[i]);\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance > 0 && (closest_vowel_distance\
    \ == -1 || distance < closest_vowel_distance)) {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = vowel_index;\n          \
    \  }\n        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\
    \";\n    }\n    return vowels.substr(closest_vowel_index, 1);", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int i = word.length() - 1;\n    while (i\
    \ >= 0) {\n        if (consonants.find(word[i]) != std::string::npos) {\n    \
    \        if (i == word.length() - 1) {\n                return result;\n     \
    \       }\n            else {\n                int j = i + 1;\n              \
    \  while (j < word.length()) {\n                    if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                        result = word[j];\n          \
    \              return result;\n                    }\n                    j++;\n\
    \                }\n                return result;\n            }\n        }\n\
    \        i--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i + 1 < closest_vowel_index) {\n  \
    \                  closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = word.length() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    int i = n - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    for (int i = len - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for\
    \ (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i - 1;\n            while (j >= 0 && vowels.find(word[j])\
    \ != std::string::npos) {\n                j--;\n            }\n            if\
    \ (j >= 0) {\n                int distance = i - j;\n                if (distance\
    \ < min_distance) {\n                    min_distance = distance;\n          \
    \          index = i;\n                }\n            }\n        }\n    }\n  \
    \  if (index != -1) {\n        result = word[index];\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int last_vowel_index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return result;\n    }\n    for (int\
    \ i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            result = word[last_vowel_index];\n       \
    \     break;\n        }\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiou\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   index = i;\n            break;\n        }\n    }\n    if (index == -1) {\n\
    \        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int closest = word.size();\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i + 1;\n            while (j < word.size() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size()) {\n\
    \                closest = std::min(closest, j - i);\n            }\n        }\n\
    \    }\n    if (closest == word.size()) {\n        return \"\";\n    }\n    for\
    \ (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size() && j - i == closest) {\n                return std::string(1,\
    \ word[i]);\n            }\n        }\n    }\n    return \"\";", "    // Write\
    \ your code here\n    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    // your code\
    \ here\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.length() - i - 1;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                closest_vowel =\
    \ word[i];\n            }\n        }\n    }\n    return closest_vowel;", "   \
    \ std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while (i > 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (vowels.find(word[i - 1]) == std::string::npos) {\n          \
    \      return word.substr(i, 1);\n            }\n        }\n        i--;\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n  \
    \  int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.length(); j++)\
    \ {\n                if (vowels.find(word[j]) != std::string::npos) {\n      \
    \              break;\n                }\n                distance++;\n      \
    \      }\n            if (distance < closest_vowel_distance) {\n             \
    \   closest_vowel_distance = distance;\n                closest_vowel_index =\
    \ i;\n            }\n        }\n    }\n    if (closest_vowel_index != -1) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index > 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            if (vowels.find(word[index - 1]) == std::string::npos) {\n      \
    \          result = word[index];\n                break;\n            }\n    \
    \    }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index != -1) {\n        for (int i = index - 1; i >= 0; i--)\
    \ {\n            if (vowels.find(word[i]) == std::string::npos) {\n          \
    \      result = word[index];\n                break;\n            }\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i\
    \ = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int len =\
    \ word.length();\n    int i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index > 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (vowels.find(word[index - 1]) != std::string::npos) {\n  \
    \              result = word[index - 1];\n                break;\n           \
    \ }\n        }\n        index--;\n    }\n    return result;", "    std::string\
    \ vowel = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        for (int j = 0; j < vowel.size();\
    \ j++) {\n            if (word[i] == vowel[j]) {\n                int k = i -\
    \ 1;\n                while (k >= 0) {\n                    if (vowel.find(word[k])\
    \ == std::string::npos) {\n                        k--;\n                    }\
    \ else {\n                        break;\n                    }\n            \
    \    }\n                if (k == -1) {\n                    k = i + 1;\n     \
    \               while (k < word.size()) {\n                        if (vowel.find(word[k])\
    \ == std::string::npos) {\n                            k++;\n                \
    \        } else {\n                            break;\n                      \
    \  }\n                    }\n                    if (k == word.size()) {\n   \
    \                     return result;\n                    }\n                }\n\
    \                if (min_distance > i - k) {\n                    min_distance\
    \ = i - k;\n                    result = word[i];\n                }\n       \
    \     }\n        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index + 1; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n        index = i;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tint n = word.length();\n\
    \tfor (int i = n - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tif (i == n - 1) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n\t\t\t\treturn word.substr(i, 1);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            } else {\n     \
    \           if (i + 1 < closest_vowel_index) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        }\n    }\n    return closest_vowel;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int pos = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      pos = i;\n            break;\n        }\n    }\n    if (pos == -1) {\n\
    \        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(pos,\
    \ 1);\n        }\n    }\n    return \"\";", "\tstd::string vowels = \"aeiou\"\
    ;\n\tstd::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index\
    \ >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "\tstd::string vowels =\
    \ \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tint i = word.length() - 1;\n\
    \twhile (i >= 0) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\
    \tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t\ti--;\n\t}\n\treturn result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    for (int i = word.size() - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         if (i == word.size() - 1) {\n                return \"\";\n        \
    \    }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n   \
    \             return word.substr(i, 1);\n            }\n        }\n    }\n   \
    \ return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    // Your code\
    \ here\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for(int i = len-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i;\n            if (distance < closest_vowel_distance)\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(closest_vowel_index, 1);",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    int distance\
    \ = 0;\n    int vowel_index = -1;\n    int consonant_index = -1;\n    for (int\
    \ i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n            for (int j = vowel_index + 1; j\
    \ < word.length(); j++) {\n                if (vowels.find(word[j]) == std::string::npos)\
    \ {\n                    consonant_index = j;\n                    distance =\
    \ consonant_index - vowel_index;\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[vowel_index];\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return result;", "    // Your code here\n \
    \   std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int\
    \ i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int word_length\
    \ = word.length();\n    for (int i = 0; i < word_length; i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == 0 || i == word_length - 1) {\n\
    \                continue;\n            }\n            if (vowels.find(word[i\
    \ - 1]) != std::string::npos || vowels.find(word[i + 1]) != std::string::npos)\
    \ {\n                continue;\n            }\n            if (closest_vowel_index\
    \ == -1 || i > closest_vowel_index) {\n                closest_vowel_index = i;\n\
    \                closest_vowel = word[i];\n            }\n        }\n    }\n \
    \   return closest_vowel;", "    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return \"\"\
    ;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    int n = word.length();\n    int i = n-1;\n\
    \    while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u') {\n            if(i == n-1) {\n   \
    \             i--;\n                continue;\n            }\n            if(word[i+1]\
    \ == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1]\
    \ == 'u') {\n                i--;\n                continue;\n            }\n\
    \            return word.substr(i, 1);\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    // Your code\
    \ here\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "\tstd::string\
    \ vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tint index = word.length()\
    \ - 1;\n\twhile (index >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos)\
    \ {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       return \"\";\n            }\n            if (vowels.find(word[i + 1])\
    \ == std::string::npos) {\n                return word.substr(i, 1);\n       \
    \     }\n        }\n        i--;\n    }\n    return \"\";", "    // your code\
    \ here\n    std::string vowels = \"aeiou\";\n    std::string closest = \"\";\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.length(); j++) {\n \
    \               if (vowels.find(word[j]) != std::string::npos) {\n           \
    \         break;\n                }\n                distance++;\n           \
    \ }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                closest = word[i];\n            }\n        }\n\
    \    }\n    return closest;", "    // your code here\n    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            }\n            else {\n                if (i < closest_vowel_index)\
    \ {\n                    closest_vowel_index = i;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    // Write your code here\n    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ n = word.length();\n    int i = n-1;\n    while(i>=0){\n        if(vowels.find(word[i])!=std::string::npos){\n\
    \            if(i==n-1){\n                return \"\";\n            }\n      \
    \      else if(vowels.find(word[i+1])!=std::string::npos){\n                return\
    \ \"\";\n            }\n            else{\n                return word.substr(i,1);\n\
    \            }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int index = -1;\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i;\n     \
    \       if (distance < min_distance) {\n                index = i;\n         \
    \       min_distance = distance;\n            }\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(index, 1);", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int len = word.length();\n    for (int i = len - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result\
    \ = word[i];\n            break;\n        }\n    }\n    return result;", "   \
    \ std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = word.length();\n    for (int i = 0; i < word.length(); i++) {\n        char\
    \ c = word[i];\n        if (vowels.find(c) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    int distance = k - j\
    \ - 1;\n                    if (distance < min_distance) {\n                 \
    \       min_distance = distance;\n                        result = c;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.length() - 1) {\n       \
    \         return \"\";\n            }\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   index = j;\n                    break;\n                }\n\
    \            }\n            break;\n        }\n    }\n    if (index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(index, 1);", "    std::string\
    \ vowels = \"aeiou\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use std::cout\n    // Example: std::cout << \"Hello world!\";\n    std::string\
    \ vowels = \"aeiou\";\n    int index = -1;\n    for(int i = word.length() - 1;\
    \ i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n  \
    \          index = i;\n            break;\n        }\n    }\n    if(index == -1)\
    \ {\n        return \"\";\n    }\n    for(int i = index - 1; i >= 0; i--) {\n\
    \        if(vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int len = word.length();\n    for (int i = len - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         if (i == len - 1 || i == 0) {\n                return \"\";\n      \
    \      }\n            if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    int pos = -1;\n    int\
    \ min_pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n      \
    \      break;\n        }\n    }\n    if (pos == -1) {\n        return result;\n\
    \    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            min_pos = i;\n            break;\n    \
    \    }\n    }\n    if (min_pos == -1) {\n        return result;\n    }\n    for\
    \ (int i = pos + 1; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            if (i - pos < pos - min_pos) {\n      \
    \          return result;\n            }\n            break;\n        }\n    }\n\
    \    result = word[pos];\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                if (word[index] != word[i]) {\n                    return\
    \ word[index];\n                }\n            }\n        } else {\n         \
    \   if (index != -1) {\n                return word[index];\n            }\n \
    \       }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "  // your code here\n  int len = word.length();\n  int i = len - 1;\n  while(i\
    \ >= 0) {\n    if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n      if(i == len - 1) {\n        return \"\";\n\
    \      }\n      else if(word[i + 1] == 'a' || word[i + 1] == 'e' || word[i + 1]\
    \ == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u') {\n        return \"\";\n\
    \      }\n      else {\n        return word.substr(i, 1);\n      }\n    }\n  \
    \  i--;\n  }\n  return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            if (i > 0 &&\
    \ vowels.find(word[i - 1]) == std::string::npos) {\n                return word.substr(i,\
    \ 1);\n            }\n        }\n        i--;\n    }\n    return \"\";", "   \
    \ std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int\
    \ i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "\tstd::string vowels = \"aeiou\";\n\tstd::string closest_vowel\
    \ = \"\";\n\tint closest_vowel_index = -1;\n\tfor (int i = 0; i < word.length();\
    \ i++) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tif (i ==\
    \ 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i - 1]) != std::string::npos)\
    \ {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i == word.length() - 1) {\n\t\t\t\t\
    continue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1]) != std::string::npos) {\n\
    \t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (closest_vowel_index == -1) {\n\t\t\t\tclosest_vowel_index\
    \ = i;\n\t\t\t\tclosest_vowel = word[i];\n\t\t\t} else {\n\t\t\t\tif (i > closest_vowel_index)\
    \ {\n\t\t\t\t\tclosest_vowel_index = i;\n\t\t\t\t\tclosest_vowel = word[i];\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_vowel;", "    // Write your code\
    \ here\n    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.length() - i;\n            if (distance < closest_vowel_distance)\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_index != -1) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size() - 1;\n    while\
    \ (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n     \
    \       if (i == word.size() - 1) {\n                i--;\n                continue;\n\
    \            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "\tstd::string vowels = \"aeiouAEIOU\";\n\
    \tstd::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index\
    \ >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            closest_vowel = word[i];\n            closest_vowel_index = i;\n\
    \            break;\n        }\n    }\n    if (closest_vowel_index == -1) {\n\
    \        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   return closest_vowel;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int n = word.length();\n    int i = n-1;\n    while(i >= 0) {\n       \
    \ if(consonants.find(word[i]) != std::string::npos) {\n            if(i == n-1)\
    \ {\n                return \"\";\n            }\n            else {\n       \
    \         if(vowels.find(word[i+1]) != std::string::npos) {\n                \
    \    return word.substr(i+1, 1);\n                }\n                else {\n\
    \                    return \"\";\n                }\n            }\n        }\n\
    \        i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.length() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            if(i == len - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                return result;\n\
    \            }\n            if (vowels.find(word[index + 1]) != std::string::npos)\
    \ {\n                return word.substr(index + 1, 1);\n            }\n      \
    \  }\n        index--;\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                int\
    \ distance = j - i;\n                if (distance < min_distance) {\n        \
    \            min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (i > 0 && vowels.find(word[i - 1]) == std::string::npos) {\n               \
    \ if (closest_vowel_index == -1 || i < closest_vowel_index) {\n              \
    \      closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int\
    \ i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiou\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      closest_vowel = word[i];\n            closest_vowel_index = i;\n      \
    \      break;\n        }\n    }\n    if (closest_vowel_index == -1) {\n      \
    \  return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";", "    // Your code here\n\
    \    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    int\
    \ i = n-1;\n    while(i>=0){\n        if(vowels.find(word[i]) != std::string::npos){\n\
    \            if(i==n-1){\n                return \"\";\n            }\n      \
    \      else if(vowels.find(word[i+1]) != std::string::npos){\n               \
    \ return \"\";\n            }\n            else{\n                return word.substr(i,1);\n\
    \            }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n    int\
    \ j = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            j = i;\n            break;\n        }\n        i--;\n    }\n\
    \    if (j == len - 1) {\n        return \"\";\n    }\n    while (j >= 0) {\n\
    \        if (vowels.find(word[j]) == std::string::npos) {\n            return\
    \ std::string(1, word[j + 1]);\n        }\n        j--;\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n    int\
    \ i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n\
    \    int i = word.length() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n        i--;\n    }\n    if (result.empty()) {\n        return result;\n\
    \    }\n    i--;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return result;\n        }\n        i--;\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    // your code here\n\
    \    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n  \
    \  int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    if (index == 0) {\n        return \"\";\n    }\n    int i = index\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return result;\n        }\n        i--;\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    int i = n - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size()\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i > 0 && vowels.find(word[i - 1]) == std::string::npos) {\n\
    \                return word.substr(i, 1);\n            }\n        }\n       \
    \ i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) return result;\n    for\
    \ (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowel = \"aeiou\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowel.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowel.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size() - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.size() - 1) {\n                i--;\n         \
    \       continue;\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            closest_vowel_index = i;\n            break;\n\
    \        }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n\
    \    }\n    for (int i = closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(closest_vowel_index,\
    \ 1);\n        }\n    }\n    return \"\";", "  std::string vowels = \"aeiou\"\
    ;\n  std::string result = \"\";\n  int min_distance = INT_MAX;\n  for (int i =\
    \ 0; i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      int j = i + 1;\n      while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n        j++;\n      }\n      if (j < word.size()) {\n\
    \        int distance = j - i;\n        if (distance < min_distance) {\n     \
    \     min_distance = distance;\n          result = word[i];\n        }\n     \
    \ }\n    }\n  }\n  return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string\
    \ result = \"\";\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0;\
    \ i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tindex =\
    \ i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\t}\n\
    \tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) == std::string::npos)\
    \ {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int word_size = word.size();\n  \
    \  for (int i = word_size - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word_size - 1) {\n           \
    \     return \"\";\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int\
    \ i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) return \"\";\n            if(vowels.find(word[i+1])\
    \ != std::string::npos) continue;\n            return word.substr(i, 1);\n   \
    \     }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      if (i == word.length() - 1) {\n                continue;\n            }\n\
    \            if (vowels.find(word[i + 1]) != std::string::npos) {\n          \
    \      continue;\n            }\n            index = i;\n            break;\n\
    \        }\n    }\n    if (index != -1) {\n        result = word[index];\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   // your code here\n    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = word.length() - 1; i >= 0; i--) {\n       \
    \ if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    return result;", "    // Your code\
    \ goes here\n    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    int i = n-1;\n    while(i>=0){\n        if(vowels.find(word[i])!=std::string::npos){\n\
    \            if(i==n-1){\n                return \"\";\n            }\n      \
    \      if(vowels.find(word[i+1])==std::string::npos){\n                return\
    \ word.substr(i,1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    int i = n - 1;\n    while(i >= 0 && vowels.find(word[i]) == std::string::npos)\
    \ {\n        i--;\n    }\n    if(i == 0) return \"\";\n    int j = i - 1;\n  \
    \  while(j >= 0 && vowels.find(word[j]) != std::string::npos) {\n        j--;\n\
    \    }\n    if(j == n - 1) return \"\";\n    return word.substr(j + 1, i - j);",
  "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size() - 1;\n    while\
    \ (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n     \
    \       if (i == word.size() - 1) {\n                i--;\n                continue;\n\
    \            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    int len = word.length();\n    int i\
    \ = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n            if(i ==\
    \ len - 1) {\n                return \"\";\n            }\n            if(word[i\
    \ - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o'\
    \ || word[i - 1] == 'u') {\n                return \"\";\n            }\n    \
    \        return word.substr(i, 1);\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    // Your code here\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    int min_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            min_index = i;\n            break;\n        }\n    }\n    if\
    \ (min_index == -1) {\n        return \"\";\n    }\n    return word.substr(index,\
    \ 1);", "\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\tint\
    \ index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn result;\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\
    \t\tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\treturn word[index];\n\
    \t\t}\n\t}\n\treturn result;", "    // your code here\n    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return result;\n    }\n    int i = pos -\
    \ 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            break;\n        }\n        i--;\n    }\n    if (i == -1) {\n\
    \        return result;\n    }\n    int j = pos + 1;\n    while (j < word.length())\
    \ {\n        if (vowels.find(word[j]) == std::string::npos) {\n            break;\n\
    \        }\n        j++;\n    }\n    if (j == word.length()) {\n        return\
    \ result;\n    }\n    result = word[pos];\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i\
    \ = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i < closest_vowel_index) {\n      \
    \              closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        } else {\n            if (closest_vowel_index\
    \ != -1) {\n                return closest_vowel;\n            }\n        }\n\
    \    }\n    return \"\";", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string\
    \ result = \"\";\n\tint i = word.length() - 1;\n\twhile (i >= 0) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tif (i == word.length() - 1) {\n\t\t\t\ti--;\n\
    \t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1]) != std::string::npos)\
    \ {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult = word[i];\n\t\t\t\
    break;\n\t\t}\n\t\ti--;\n\t}\n\treturn result;", "    std::string vowels = \"\
    aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n  \
    \  for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            int j = i + 1;\n            while (j < word.size()\
    \ && vowels.find(word[j]) != std::string::npos) {\n                j++;\n    \
    \        }\n            if (j < word.size()) {\n                int distance =\
    \ j - i;\n                if (distance < min_distance) {\n                   \
    \ min_distance = distance;\n                    result = word[i];\n          \
    \      }\n            }\n        }\n    }\n    return result;", "\tstd::string\
    \ vowels = \"aeiou\";\n\tint index = -1;\n\tfor (int i = word.length() - 1; i\
    \ >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tindex\
    \ = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn \"\";\n\t}\n\
    \tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) == std::string::npos)\
    \ {\n\t\t\treturn word.substr(i + 1, 1);\n\t\t}\n\t}\n\treturn \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                return result;\n\
    \            }\n            for (int i = index + 1; i < word.length(); i++) {\n\
    \                if (vowels.find(word[i]) != std::string::npos) {\n          \
    \          result = word[i];\n                    return result;\n           \
    \     }\n            }\n        }\n        index--;\n    }\n    return result;",
  "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tint index\
    \ = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn result;\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\
    \t\tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\treturn word[index];\n\
    \t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    int word_length = word.length();\n \
    \   for (int i = 0; i < word_length; i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i > 0 && i < word_length - 1) {\n \
    \               if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                    if (closest_vowel_index ==\
    \ -1 || i < closest_vowel_index) {\n                        closest_vowel_index\
    \ = i;\n                        closest_vowel = word[i];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = word.length() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int last_vowel_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            last_vowel_index = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel_index == -1) {\n        return result;\n    }\n    for (int\
    \ i = last_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            result = word[last_vowel_index];\n       \
    \     break;\n        }\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                result = word[i];\n                break;\n        \
    \    }\n        } else {\n            index = -1;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (consonants.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.length() - 1) {\n                index--;\n\
    \                continue;\n            }\n            if (vowels.find(word[index\
    \ + 1]) != std::string::npos) {\n                result = word[index + 1];\n \
    \               break;\n            }\n        }\n        index--;\n    }\n  \
    \  return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i\
    \ = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (consonants.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            return std::string(1,\
    \ word[i]);\n        }\n    }\n    return \"\";", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int pos = word.length() - 1;\n    while (pos >=\
    \ 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n         \
    \   if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos) {\n      \
    \          return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    // Your code here\n    std::string vowels = \"\
    aeiou\";\n    int i = word.length() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.length() - 1) {\n       \
    \         i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    // Write your code here\n    std::string vowels = \"\
    aeiou\";\n    int n = word.length();\n    int i = n-1;\n    while(i>=0){\n   \
    \     if(vowels.find(word[i])!=std::string::npos){\n            if(i==n-1){\n\
    \                i--;\n                continue;\n            }\n            if(vowels.find(word[i+1])==std::string::npos){\n\
    \                return word.substr(i,1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.length()\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.length() - 1) {\n                return \"\";\n\
    \            }\n            if (consonants.find(word[i + 1]) != std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "  std::string vowels = \"aeiouAEIOU\";\n\
    \  std::string result = \"\";\n  for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n    if (vowels.find(word[i]) != std::string::npos) {\n      result = word[i];\n\
    \      break;\n    }\n  }\n  return result;", "    std::string vowels = \"aeiou\"\
    ;\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    int n = word.length();\n    for(int i\
    \ = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
