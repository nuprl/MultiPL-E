name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 10;\n  long start = 10;\n  long end = 1;\n  for (long i = 3; i <= n;\
    \ i++) {\n    count = start + end;\n    start = start * 10;\n    end = count;\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count =\
    \ 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count = 0;\n  for\
    \ (int i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += (std::pow(10,\
    \ i - 1) - std::pow(9, i - 1));\n  }\n  return count;", "    if (n == 1) {\n \
    \       return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    long start_one = 9;\n    long end_one = 10;\n    for (long i\
    \ = 3; i <= n; i++) {\n        count += start_one + end_one;\n        start_one\
    \ = start_one * 9;\n        end_one = end_one * 10;\n    }\n    return count;",
  "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 10;\n    }\n    long count = 0;\n    long start = 1;\n    long end = 1;\n  \
    \  for (long i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    end += 1;\n    count += (end - start) * n;\n    count += starts_one_ends(n\
    \ - 1);\n    return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count * 2;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count\
    \ = 0;\n  for (int i = 1; i <= 9; i++) {\n    count += pow(10, n - 1);\n  }\n\
    \  return count;", "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  if\
    \ (n == 2) {\n    return 2;\n  }\n  long count = 1;\n  long start = 1;\n  long\
    \ end = 1;\n  for (long i = 3; i <= n; i++) {\n    long temp = start;\n    start\
    \ = end;\n    end = (end + temp) * 10;\n    count += end;\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n\
    \  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i =\
    \ 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long count = 10;\n  long i = 2;\n  while (i < n)\
    \ {\n    count += 9 * pow(10, i - 1);\n    i++;\n  }\n  return count;", "    if\
    \ (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 10;\n\
    \    }\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 10;\n\
    \    for (long i = 3; i <= n; i++) {\n        dp[i] = (dp[i - 1] * 9) + (dp[i\
    \ - 2] * 9);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (int i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end = end * 10 + 1;\n  }\n  count = (start + end) * n /\
    \ 2;\n  return count;", "    long count = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        count += pow(10, i - 1);\n    }\n    return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n\
    \  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = dp[i-1]*10 + pow(10,i-1);\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 11;\n  }\n  long count = 11;\n  long prev_count = 11;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count = prev_count * 10 + 1;\n    prev_count = count;\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += std::pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return\
    \ count;", "  long *dp = new long[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] * 9 + pow(10, i - 1);\n  }\n  return\
    \ dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n\
    \  }\n  long result = 0;\n  long power = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    power *= 10;\n  }\n  result += power;\n  result += starts_one_ends(n - 1);\n\
    \  return result;", "    if (n == 1) {\n        return 1;\n    }\n    if (n ==\
    \ 2) {\n        return 10;\n    }\n    if (n == 3) {\n        return 100;\n  \
    \  }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count\
    \ += pow(10, i - 1);\n    }\n    return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ std::pow(10, i - 1);\n  }\n  return count;", "    if (n == 1) {\n        return\
    \ 1;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);", "  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    if (i == 1) {\n      count += 1;\n    } else {\n      count +=\
    \ 9 * pow(10, i - 2);\n    }\n  }\n  return count;", "    long dp[n + 1];\n  \
    \  memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        dp[i] = dp[i - 1] * 10 - dp[i - 2];\n    }\n    return dp[n];", " \
    \ if (n == 1) {\n    return 2;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count * 2;", "  assert(n\
    \ > 0);\n  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", " \
    \ if (n == 1) return 1;\n  if (n == 2) return 10;\n  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) return 1;\n  if (n == 2) return 10;\n\
    \  long count = 0;\n  long start_one = 9;\n  long end_one = 1;\n  long other_digits\
    \ = 9;\n  for (long i = 3; i <= n; i++) {\n    count += start_one + end_one +\
    \ other_digits;\n    start_one = start_one * 9 + end_one;\n    end_one = other_digits;\n\
    \    other_digits *= 10;\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  if (n == 3) {\n    return 100;\n\
    \  }\n  if (n == 4) {\n    return 1000;\n  }\n  if (n == 5) {\n    return 10000;\n\
    \  }\n  if (n == 6) {\n    return 100000;\n  }\n  if (n == 7) {\n    return 1000000;\n\
    \  }\n  if (n == 8) {\n    return 10000000;\n  }\n  if (n == 9) {\n    return\
    \ 100000000;\n  }\n  if (n == 10) {\n    return 1000000000;\n  }\n  if (n == 11)\
    \ {\n    return 10000000000;\n  }\n  if (n == 12) {\n    return 100000000000;\n\
    \  }\n  if (n == 13) {\n    return 1000000000000;\n  }\n  if (n == 14) {\n   \
    \ return 10000000000000;\n  }\n  if (n == 15) {\n    return 100000000000000;\n\
    \  }\n  if (n == 16) {\n    return 1000000000000000;\n  }\n  if (n == 17) {\n\
    \    return 10000000000000000;\n  }\n  if (n == 18) {\n    return 100000000000000000;\n\
    \  }\n  if (n == 19) {\n    return 1000000000000000000;\n  }\n  if (n == 20) {\n\
    \    return 10000000000000000000;\n  }\n  if (n == 21) {\n    return 100000000000000000000;\n\
    \  }\n  if (n == 22) {\n    return 1000000000000000000000;\n  }\n  if (n == 23)\
    \ {\n    return 10000000000000000000000;\n  }\n  if (n == 24) {\n    return 100000000000000000000000;\n\
    \  }\n  if (n == 25) {\n    return 1000000000000000000000000;\n  }\n  if (n ==\
    \ 26) {\n    return 10000000000000000000000000;\n  }\n  if (n == 27) {\n    return\
    \ 100000000000000000000000000;\n  }\n  if (n == 28) {\n    return 1000000000000000000000000",
  "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n;\
    \ i++) {\n        dp[i] = dp[i-1] + 9*pow(10, i-2);\n    }\n    return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start_one = 10;\n  long end_one = 1;\n  long end_one_prev\
    \ = 1;\n  long start_one_prev = 10;\n  long start_one_prev_prev = 10;\n  long\
    \ end_one_prev_prev = 1;\n  for (long i = 3; i <= n; i++) {\n    count = start_one\
    \ + end_one;\n    start_one = start_one_prev + start_one_prev_prev;\n    end_one\
    \ = end_one_prev + end_one_prev_prev;\n    start_one_prev_prev = start_one_prev;\n\
    \    start_one_prev = start_one;\n    end_one_prev_prev = end_one_prev;\n    end_one_prev\
    \ = end_one;\n  }\n  return count;", "  // Write your code here\n  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = dp[i-1]*10\
    \ + pow(10,i-1);\n  }\n  return dp[n];", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + pow(10, i -\
    \ 1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n \
    \ return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count\
    \ += pow(10, i - 1);\n  }\n  return count;", "  long dp[n + 1];\n  dp[0] = 0;\n\
    \  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 *\
    \ pow(10, i - 2);\n  }\n  return dp[n];", "  if (n == 1) return 2;\n  if (n ==\
    \ 2) return 3;\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);", " \
    \ if (n == 1) return 1;\n  if (n == 2) return 2;\n  long count = 0;\n  long start\
    \ = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n\
    \    end *= 10;\n  }\n  count += start;\n  count += end;\n  count += (n - 2) *\
    \ 9 * start;\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n\
    \ == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start_one = 9;\n  long\
    \ end_one = 10;\n  for (long i = 3; i <= n; i++) {\n    count += start_one + end_one;\n\
    \    start_one = start_one * 9;\n    end_one = end_one * 10;\n  }\n  return count;",
  "  if (n == 1) return 2;\n  if (n == 2) return 3;\n  return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2);", "  long count = 0;\n  long start = 1;\n  long\
    \ end = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n    end *= 10;\n\
    \  }\n  count += start;\n  count += end;\n  count += (n - 2) * 9 * start;\n  return\
    \ count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2;\
    \ i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n  return dp[n];",
  "  // Base case\n  if (n == 1) {\n    return 1;\n  }\n  // Recursive case\n  long\
    \ count = 0;\n  // If the number starts with 1\n  count += pow(10, n - 1);\n \
    \ // If the number ends with 1\n  count += (n - 1) * pow(10, n - 2);\n  // If\
    \ the number starts and ends with 1\n  count += starts_one_ends(n - 1);\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 0;\n  long start_one = 9;\n  long end_one = 10;\n  long start_end_one\
    \ = 9;\n  long other = 9;\n  for (long i = 3; i <= n; i++) {\n    count = start_one\
    \ + end_one + start_end_one + other;\n    start_one = start_end_one;\n    end_one\
    \ = start_end_one;\n    start_end_one = other;\n    other = other * 9;\n  }\n\
    \  return count;", "  long count = 0;\n  for (int i = 1; i <= n; i++) {\n    if\
    \ (i == 1) {\n      count += 10;\n    } else {\n      count += pow(10, i - 1);\n\
    \    }\n  }\n  return count;", "    if (n == 1) {\n        return 10;\n    }\n\
    \    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10,\
    \ i - 1);\n    }\n    return count;", "  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n \
    \ long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start\
    \ *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n  count +=\
    \ (n - 2) * 9 * start;\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  long last_digit =\
    \ 10;\n  for (long i = 3; i <= n; i++) {\n    last_digit = last_digit * 9;\n \
    \   count += last_digit;\n  }\n  return count;", "    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);", "  assert(n > 0);\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ std::pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += std::pow(10, i - 1);\n  }\n  return count;", "    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += (long)pow(10,\
    \ i - 1);\n    }\n    return count;", "  if (n == 1) {\n    return 2;\n  }\n \
    \ if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);", "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(2, i - 1);\n  }\n  return count;", " \
    \ long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    dp[i] = dp[i - 1] + (i - 1) * dp[i - 2];\n  }\n  return dp[n];", "  long\
    \ count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++)\
    \ {\n    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n\
    \  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n   \
    \ if (i == 1) {\n      count += 1;\n    } else {\n      count += 9 * pow(10, i\
    \ - 2);\n    }\n  }\n  return count;", "    if (n == 1) {\n        return 2;\n\
    \    }\n    if (n == 2) {\n        return 3;\n    }\n    long *dp = new long[n\
    \ + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long i = 3;\
    \ i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    long ans\
    \ = dp[n];\n    delete[] dp;\n    return ans;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++)\
    \ {\n    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n\
    \  count += (n - 2) * 9 * start;\n  return count;", "  long dp[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = 9 * pow(10,\
    \ i - 2) + dp[i - 1];\n  }\n  return dp[n];", "  long count = 0;\n  long i = 1;\n\
    \  while (i <= n) {\n    count += 9 * pow(10, i - 1);\n    i++;\n  }\n  return\
    \ count;", "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n \
    \       return 3;\n    }\n    long count = 0;\n    for (long i = 1; i < n; i++)\
    \ {\n        count += starts_one_ends(i);\n    }\n    return count + 1;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 10;\n  long last_digit = 10;\n  for (long i = 3; i <= n; i++) {\n  \
    \  count = count + last_digit;\n    last_digit = last_digit * 10;\n  }\n  return\
    \ count;", "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n \
    \       return 3;\n    }\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n\
    \    dp[2] = 3;\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1]\
    \ + dp[i - 2];\n    }\n    return dp[n];", "  // Write your code here\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count\
    \ += 1;\n    } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return\
    \ count;", "    long count = 0;\n    long start = 1;\n    long end = 1;\n    for\
    \ (long i = 1; i < n; i++) {\n        start *= 10;\n        end = end * 10 + 1;\n\
    \    }\n    count = start + end;\n    return count;", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 0;\n  long pow_10 = 10;\n  for (long i = 1; i < n; i++) {\n    count\
    \ += pow_10;\n    pow_10 *= 10;\n  }\n  count += starts_one_ends(n - 1);\n  return\
    \ count;", "  if (n == 1) {\n    return 10;\n  }\n  long count = 10;\n  long base\
    \ = 10;\n  for (long i = 2; i <= n; i++) {\n    count += 9 * base;\n    base *=\
    \ 10;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = (dp[i - 1] * 10)\
    \ - (dp[i - 2] * 9);\n  }\n  return dp[n];", "  long count = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    count += 9 * std::pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 2;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long count = 10;\n  for (long i = 3; i <= n; i++) {\n   \
    \ count = count * 9 + pow(10, i - 2);\n  }\n  return count;", "  if (n == 1) {\n\
    \    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) return 2;\n  if (n == 2) return 3;\n  long dp[n + 1];\n  dp[0] =\
    \ 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i]\
    \ = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start\
    \ = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n\
    \    end *= 10;\n  }\n  count += start;\n  count += end;\n  count += (n - 2) *\
    \ 9 * start;\n  return count;", "  long count = 0;\n  for (int i = 1; i <= n;\
    \ i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1)\
    \ {\n    return 2;\n  }\n  long count = 0;\n  for (int i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count * 2;", "  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + (i - 1) * dp[i - 2];\n  }\n  return dp[n];", "  // Write your code here\n\
    \  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i]\
    \ = dp[i-1]*10 + pow(10,i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  long count = 0;\n  long start = 1;\n  long end = 1;\n  for (long\
    \ i = 1; i < n; i++) {\n    start *= 10;\n    end = end * 10 + 1;\n  }\n  count\
    \ = end - start + 1;\n  return count;", "  if (n == 1) return 2;\n  if (n == 2)\
    \ return 3;\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for\
    \ (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return\
    \ dp[n];", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i\
    \ = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + (i-1)*dp[i-2];\n    }\n    return\
    \ dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long result = 0;\n  long start = 1;\n  long end = 1;\n  for (long i =\
    \ 1; i < n; i++) {\n    start *= 10;\n    end *= 10;\n  }\n  result += start;\n\
    \  result += end;\n  result += (n - 2) * 9 * start;\n  return result;", "    long\
    \ dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n    }\n    return dp[n];",
  "  if (n == 1) return 1;\n  if (n == 2) return 10;\n  long count = 0;\n  for (long\
    \ i = 1; i <= 9; i++) {\n    count += pow(10, n - 2);\n  }\n  return count;",
  "    if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n    long start_one\
    \ = 9;\n    long end_one = 10;\n    for (long i = 2; i <= n; i++) {\n        count\
    \ += start_one * end_one;\n        start_one = start_one * 10;\n        end_one\
    \ = end_one + start_one;\n    }\n    return count;", "  long dp[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + pow(10, i - 1);\n  }\n  return dp[n];", "  long count = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    long num = pow(10, i - 1);\n    count += 9 * num;\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n\
    \    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);",
  "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += (long)pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n   \
    \ } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;",
  "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "   \
    \ long dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for(long\
    \ i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + (i-1)*dp[i-2];\n    }\n   \
    \ return dp[n];", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return\
    \ dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += 9 * std::pow(10,\
    \ i - 1);\n  }\n  return count;", "  if (n == 1) return 1;\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] * 9 + pow(10, i - 1);\n  }\n  return dp[n];", "  long dp[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n\
    \  if (n == 2) {\n    return 3;\n  }\n  long count = 3;\n  for (int i = 3; i <=\
    \ n; i++) {\n    count = count * 2;\n  }\n  return count;", "  if (n == 1) {\n\
    \    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + dp[i - 2] * 9;\n  }\n  return dp[n];", "  if (n == 1)\
    \ {\n    return 1;\n  }\n  long count = 0;\n  long start_one = 1;\n  long end_one\
    \ = 1;\n  long start_one_ends = 0;\n  long end_one_ends = 0;\n  long start_one_ends_one\
    \ = 0;\n  long end_one_ends_one = 0;\n  for (long i = 2; i <= n; i++) {\n    start_one_ends\
    \ = start_one + end_one;\n    end_one_ends = start_one_ends + end_one_ends;\n\
    \    start_one_ends_one = start_one_ends + end_one_ends;\n    end_one_ends_one\
    \ = start_one_ends_one + end_one_ends_one;\n    start_one = start_one_ends;\n\
    \    end_one = end_one_ends;\n  }\n  return start_one_ends_one;", "  if (n ==\
    \ 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);", "  if (n == 1) {\n    return 1;\n  }\n  if\
    \ (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start_one = 9;\n\
    \  long end_one = 10;\n  for (long i = 3; i <= n; i++) {\n    count += start_one\
    \ + end_one;\n    start_one = start_one * 9;\n    end_one = end_one * 10;\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count\
    \ += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return 10;\n\
    \  }\n  long count = 10;\n  long start = 10;\n  long end = 10;\n  for (long i\
    \ = 2; i <= n; i++) {\n    start = start * (10 - i + 1);\n    end = end * (10\
    \ - i + 1);\n    count += start + end;\n  }\n  return count;", "    if (n == 1)\
    \ {\n        return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n\
    \    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 10;\n    for\
    \ (long i = 3; i <= n; i++) {\n        dp[i] = 9 * dp[i - 1] + pow(10, i - 2);\n\
    \    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2)\
    \ {\n    return 2;\n  }\n  long count = 0;\n  for (long i = 1; i < n; i++) {\n\
    \    count += starts_one_ends(i);\n  }\n  return count + 1;", "  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    dp[i] = dp[i-1]\
    \ + 9*pow(10, i-2);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  long count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1;\
    \ i < n; i++) {\n    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count\
    \ += end;\n  count += (n - 2) * 9 * start;\n  return count;", "  long count =\
    \ 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n \
    \   start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n  return\
    \ count;", "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  long start\
    \ = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n\
    \    end *= 10;\n  }\n  count += (start - 1) * 9;\n  count += end;\n  return count;",
  "    long count = 0;\n    if (n == 1) {\n        return 1;\n    }\n    if (n ==\
    \ 2) {\n        return 10;\n    }\n    if (n == 3) {\n        return 100;\n  \
    \  }\n    if (n == 4) {\n        return 1000;\n    }\n    if (n == 5) {\n    \
    \    return 10000;\n    }\n    if (n == 6) {\n        return 100000;\n    }\n\
    \    if (n == 7) {\n        return 1000000;\n    }\n    if (n == 8) {\n      \
    \  return 10000000;\n    }\n    if (n == 9) {\n        return 100000000;\n   \
    \ }\n    if (n == 10) {\n        return 1000000000;\n    }\n    if (n == 11) {\n\
    \        return 10000000000;\n    }\n    if (n == 12) {\n        return 100000000000;\n\
    \    }\n    if (n == 13) {\n        return 1000000000000;\n    }\n    if (n ==\
    \ 14) {\n        return 10000000000000;\n    }\n    if (n == 15) {\n        return\
    \ 100000000000000;\n    }\n    if (n == 16) {\n        return 1000000000000000;\n\
    \    }\n    if (n == 17) {\n        return 10000000000000000;\n    }\n    if (n\
    \ == 18) {\n        return 100000000000000000;\n    }\n    if (n == 19) {\n  \
    \      return 1000000000000000000;\n    }\n    if (n == 20) {\n        return\
    \ 10000000000000000000;\n    }\n    if (n == 21) {\n        return 100000000000000000000;\n\
    \    }\n    if (n == 22) {\n        return 1000000000000000000000;\n    }\n  \
    \  if (n == 23) {\n        return 10000000000000000000000;\n    }\n    if (n ==\
    \ 24) {\n        return 100000000000000000000000;\n    }\n    if (n == 25) {\n\
    \        return 1000000000000000000000000;\n    }\n    if (n == 26) {\n      \
    \  return 10000000000000000000000000;\n    }\n    if (n == 27) {\n        return\
    \ 100000000000000000000000000;\n    }\n    if (n == 28)", "    long count = 0;\n\
    \    for (long i = 1; i <= n; i++) {\n        count += std::pow(10, i - 1);\n\
    \    }\n    return count;", "  long count = 0;\n  long start = 1;\n  long end\
    \ = 1;\n  for (int i = 1; i < n; i++) {\n    start *= 10;\n    end = end * 10\
    \ + 1;\n  }\n  count = start + end;\n  return count;", "  // Write your code here\n\
    \  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i]\
    \ = dp[i-1] + pow(10,i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  return (9 * pow(10, n - 2))\
    \ + starts_one_ends(n - 1);", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10, i - 1);\n\
    \  }\n  return count;", "    if (n == 1) {\n        return 1;\n    }\n    if (n\
    \ == 2) {\n        return 2;\n    }\n    long count = 0;\n    for (long i = 1;\
    \ i < n; i++) {\n        count += 9 * pow(10, i - 1);\n    }\n    count += pow(10,\
    \ n - 1);\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10, i - 1);\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return\
    \ count;", "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n \
    \       return 10;\n    }\n    long dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n\
    \    dp[1] = 1;\n    dp[2] = 10;\n    for (long i = 3; i <= n; i++) {\n      \
    \  dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n    }\n    return dp[n];", "  long\
    \ dp[n+1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  for (long i = 2; i <=\
    \ n; i++) {\n    dp[i] = dp[i-1] + (i-1)*dp[i-2];\n  }\n  return dp[n];", "  assert(n\
    \ > 0);\n  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", " \
    \ if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start_one = 9;\n  long end_one = 10;\n  for (long i = 3;\
    \ i <= n; i++) {\n    count += start_one * end_one;\n    start_one = start_one\
    \ * 10;\n    end_one = end_one + start_one;\n  }\n  return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n \
    \ count += (n - 2) * 9 * start;\n  return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n    } else {\n\
    \      count += 9 * std::pow(10, i - 2);\n    }\n  }\n  return count;", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10, i -\
    \ 1);\n  }\n  return count;", "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n\
    \  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10,\
    \ i - 1);\n  }\n  return count;", "    if (n == 1) {\n        return 10;\n   \
    \ }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count +=\
    \ pow(10, i - 1);\n    }\n    return count * 2;", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 *\
    \ pow(10, i - 2);\n  }\n  return dp[n];", "    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long i = start; i <\
    \ end; i++) {\n        if (i % 10 == 1) {\n            count++;\n        }\n \
    \   }\n    return count;", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2)\
    \ {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2]\
    \ = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n\
    \  }\n  return dp[n];", "  if (n == 1) return 1;\n  if (n == 2) return 3;\n  long\
    \ dp[n + 1];\n  dp[1] = 1;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i-1]\
    \ + pow(10, i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = (dp[i -\
    \ 1] * 9) + (dp[i - 2] * 9);\n  }\n  return dp[n];", "  // Write your code here\n\
    \  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i]\
    \ = dp[i-1]*10 + pow(10,i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  long count = 3;\n  long prev\
    \ = 3;\n  long prev_prev = 2;\n  for (long i = 3; i <= n; i++) {\n    count =\
    \ prev + prev_prev;\n    prev_prev = prev;\n    prev = count;\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start_with_one = 9;\n  long end_with_one = 1;\n  long start_with_one_end_with_one\
    \ = 0;\n  for (long i = 3; i <= n; i++) {\n    start_with_one_end_with_one = start_with_one\
    \ + end_with_one;\n    end_with_one = start_with_one;\n    start_with_one = start_with_one_end_with_one\
    \ * 10 - end_with_one;\n  }\n  count = start_with_one + end_with_one + start_with_one_end_with_one;\n\
    \  return count;", "    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n\
    \    }\n    return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++)\
    \ {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n\
    \  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  long count = 1;\n  long power = 1;\n  for (long\
    \ i = 1; i < n; i++) {\n    power *= 10;\n    count += 9 * power;\n  }\n  return\
    \ count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n \
    \   for(long i = 2; i <= n; i++) {\n        dp[i] = 9*dp[i-1] + pow(10, i-1);\n\
    \    }\n    return dp[n];", "    long dp[n+1];\n    memset(dp, 0, sizeof(dp));\n\
    \    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] +\
    \ (i-1)*dp[i-2];\n    }\n    return dp[n];", "  if (n == 1) return 2;\n  if (n\
    \ == 2) return 3;\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n\
    \  return dp[n];", "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n\
    \  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = 9*dp[i-1] + pow(10,i-1);\n\
    \  }\n  return dp[n];", "    long dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n\
    \    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1]\
    \ * 10 - dp[i - 2];\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  long power =\
    \ 10;\n  for (long i = 2; i < n; i++) {\n    count += 9 * power;\n    power *=\
    \ 10;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= 9; i++)\
    \ {\n    count += starts_one_ends(n - 1);\n  }\n  return count;", "    long dp[n\
    \ + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        dp[i] = dp[i - 1] * 9 + pow(10, i - 1);\n    }\n   \
    \ return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);", "    if\
    \ (n == 1) {\n        return 10;\n    }\n    long count = 0;\n    for (long i\
    \ = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;",
  "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int\
    \ i=2;i<=n;i++){\n    dp[i] = dp[i-1] + pow(10,i-1);\n  }\n  return dp[n];", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10,\
    \ i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 10;\n  for (long i = 2; i <= n; i++) {\n\
    \    dp[i] = 9 * pow(10, i - 1) + dp[i - 1];\n  }\n  return dp[n];", "  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n\
    \    } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start_one = 9;\n  long end_one = 10;\n  long other = 9;\n\
    \  for (long i = 3; i <= n; i++) {\n    count = start_one + end_one + other;\n\
    \    start_one = end_one;\n    end_one = count;\n    other *= 10;\n  }\n  return\
    \ count;", "    if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n\
    \    // First digit is 1.\n    count += 9;\n    // Last digit is 1.\n    count\
    \ += 9;\n    // First and last digit are 1.\n    count += 9;\n    // All other\
    \ digits are 1.\n    count += 9;\n    return count;", "  if (n < 1) {\n    return\
    \ 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n\
    \  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + (9 *\
    \ pow(10, i - 2));\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n \
    \ }\n  long count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1;\
    \ i < n; i++) {\n    start *= 10;\n    end = end * 10 + 1;\n  }\n  count = end\
    \ - start + 1;\n  return count;", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1]\
    \ = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + (i-1)*dp[i-2];\n\
    \    }\n    return dp[n];", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n\
    \  if (n == 3) return 5;\n  if (n == 4) return 8;\n  if (n == 5) return 13;\n\
    \  if (n == 6) return 21;\n  if (n == 7) return 34;\n  if (n == 8) return 55;\n\
    \  if (n == 9) return 89;\n  if (n == 10) return 144;\n  if (n == 11) return 233;\n\
    \  if (n == 12) return 377;\n  if (n == 13) return 610;\n  if (n == 14) return\
    \ 987;\n  if (n == 15) return 1597;\n  if (n == 16) return 2584;\n  if (n == 17)\
    \ return 4181;\n  if (n == 18) return 6765;\n  if (n == 19) return 10946;\n  if\
    \ (n == 20) return 17711;\n  if (n == 21) return 28657;\n  if (n == 22) return\
    \ 46368;\n  if (n == 23) return 75025;\n  if (n == 24) return 121393;\n  if (n\
    \ == 25) return 196418;\n  if (n == 26) return 317811;\n  if (n == 27) return\
    \ 514229;\n  if (n == 28) return 832040;\n  if (n == 29) return 1346269;\n  if\
    \ (n == 30) return 2178309;\n  if (n == 31) return 3524578;\n  if (n == 32) return\
    \ 5702887;\n  if (n == 33) return 9227465;\n  if (n == 34) return 14930352;\n\
    \  if (n == 35) return 24157817;\n  if (n == 36) return 39088169;\n  if (n ==\
    \ 37) return 63245986;\n  if (n == 38) return 102334155;\n  if (n == 39) return\
    \ 165580141;\n  if (n == 40) return 267914296;\n  if (n == 41) return 433494437;\n\
    \  if (n == 42) return", "    if (n == 1) {\n        return 1;\n    }\n    long\
    \ count = 0;\n    long start_one = 1;\n    long end_one = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start_one *= 10;\n        end_one *= 10;\n    }\n\
    \    count += start_one;\n    count += end_one;\n    for (long i = 1; i < n; i++)\
    \ {\n        start_one /= 10;\n        end_one /= 10;\n        count += start_one;\n\
    \        count += end_one;\n    }\n    return count;", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count * 2;", "  if (n == 1) {\n    return 1;\n\
    \  }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n\
    \  dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2] * 9;\n  }\n  return dp[n];", "    long count = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        count += (pow(10, i) - pow(10, i - 1));\n\
    \    }\n    return count;", "    if (n == 1) {\n        return 1;\n    }\n   \
    \ if (n == 2) {\n        return 10;\n    }\n    long count = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 10;\n  long prev_count = 10;\n  long temp = 0;\n  for (long i = 3; i\
    \ <= n; i++) {\n    temp = count;\n    count = 9 * count + prev_count;\n    prev_count\
    \ = temp;\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "    if (n ==\
    \ 1) {\n        return 10;\n    }\n    if (n == 2) {\n        return 100;\n  \
    \  }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count\
    \ += pow(10, i - 1);\n    }\n    return count;", "  assert(n > 0);\n  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  long i = 1;\n  while (i < n) {\n\
    \    count += start * 9;\n    start *= 10;\n    end = end * 10 + 1;\n    i++;\n\
    \  }\n  count += start + end;\n  return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 10;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 1) + dp[i\
    \ - 1];\n  }\n  return dp[n];", "  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n\
    \  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] * 10 -\
    \ dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 10;\n  }\n \
    \ if (n == 2) {\n    return 91;\n  }\n  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;"]
stop_tokens:
- "\n}"
