name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 10;\n  long start = 10;\n  long end = 1;\n  for (long i = 3; i <= n;\
    \ i++) {\n    count = start + end;\n    start = start * 10;\n    end = count;\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count =\
    \ 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count = 0;\n  for\
    \ (int i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += (std::pow(10,\
    \ i - 1) - std::pow(9, i - 1));\n  }\n  return count;", "    if (n == 1) {\n \
    \       return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    long start_one = 9;\n    long end_one = 10;\n    for (long i\
    \ = 3; i <= n; i++) {\n        count += start_one + end_one;\n        start_one\
    \ = start_one * 9;\n        end_one = end_one * 10;\n    }\n    return count;",
  "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 10;\n    }\n    long count = 0;\n    long start = 1;\n    long end = 1;\n  \
    \  for (long i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    end += 1;\n    count += (end - start) * n;\n    count += starts_one_ends(n\
    \ - 1);\n    return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count * 2;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count\
    \ = 0;\n  for (int i = 1; i <= 9; i++) {\n    count += pow(10, n - 1);\n  }\n\
    \  return count;", "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  if\
    \ (n == 2) {\n    return 2;\n  }\n  long count = 1;\n  long start = 1;\n  long\
    \ end = 1;\n  for (long i = 3; i <= n; i++) {\n    long temp = start;\n    start\
    \ = end;\n    end = (end + temp) * 10;\n    count += end;\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n\
    \  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i =\
    \ 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long count = 10;\n  long i = 2;\n  while (i < n)\
    \ {\n    count += 9 * pow(10, i - 1);\n    i++;\n  }\n  return count;", "    if\
    \ (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 10;\n\
    \    }\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 10;\n\
    \    for (long i = 3; i <= n; i++) {\n        dp[i] = (dp[i - 1] * 9) + (dp[i\
    \ - 2] * 9);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;"]
stop_tokens:
- "\n}"
