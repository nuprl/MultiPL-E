language: cpp
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  // Your code here\n  int count = 0;\n  for(int i = 0; i < brackets.length();\
    \ i++){\n    if(brackets[i] == '<'){\n      count++;\n    }\n    else if(brackets[i]\
    \ == '>'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n \
    \   }\n  }\n  if(count == 0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6yzs6axm.cpp: In function 'int main()':\n/tmp/tmp6yzs6axm.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6yzs6axm.cpp:2:\n/tmp/tmp6yzs6axm.cpp:36:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // your code here\n    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n\
    \        else{\n            if(s.empty()){\n                return false;\n  \
    \          }\n            else{\n                s.pop();\n            }\n   \
    \     }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n \
    \       return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45f42v1l.cpp: In function 'int main()':\n/tmp/tmp45f42v1l.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp45f42v1l.cpp:2:\n/tmp/tmp45f42v1l.cpp:38:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n  int count = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n\
    \    if (brackets[i] == '<') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hmygibv.cpp: In function 'int main()':\n/tmp/tmp9hmygibv.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9hmygibv.cpp:2:\n/tmp/tmp9hmygibv.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // YOUR CODE HERE\n    int count = 0;\n    for (int i = 0;\
    \ i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n         \
    \   count++;\n        } else {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    if (count == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqg2c147.cpp: In function 'int main()':\n/tmp/tmpeqg2c147.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeqg2c147.cpp:2:\n/tmp/tmpeqg2c147.cpp:34:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n\
    \        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n\
    \        else{\n            if(s.empty()){\n                return false;\n  \
    \          }\n            else{\n                s.pop();\n            }\n   \
    \     }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n \
    \       return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddlb1nr8.cpp: In function 'int main()':\n/tmp/tmpddlb1nr8.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpddlb1nr8.cpp:2:\n/tmp/tmpddlb1nr8.cpp:37:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_5y9nb1.cpp: In function 'int main()':\n/tmp/tmp7_5y9nb1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_5y9nb1.cpp:2:\n/tmp/tmp7_5y9nb1.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
