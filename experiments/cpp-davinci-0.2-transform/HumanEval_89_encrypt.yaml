name: HumanEval_89_encrypt
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt\
  \ that takes a string as an argument and\n// returns a string encrypted with the\
  \ alphabet being rotated. \n// The alphabet should be rotated in a manner such that\
  \ the letters \n// shift down by two multiplied to two places.\n// For example:\n\
  // >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\"\
  )\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\n\
  std::string encrypt(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\"\
  )) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n \
  \   assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) ==\
  \ (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n\
  \    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  ));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
completions: ["    std::string result = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        result += (char)((int)s[i] + 2 * 2);\n    }\n    return result;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult\
    \ += (char)((int)s[i] + 2 * 2);\n\t}\n\treturn result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i]\
    \ + 2 * 2;\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2 * 2;\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n      \
    \      c += 2;\n            if (c > 'z') {\n                c = c - 'z' + 'a'\
    \ - 1;\n            }\n        }\n        result += c;\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      result += (char)((int)s[i] + 2 * 2);\n    }\n    return result;", "   \
    \ std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     int ascii = (int)s[i];\n        if (ascii >= 97 && ascii <= 122) {\n   \
    \         ascii += 2;\n            if (ascii > 122) {\n                ascii -=\
    \ 26;\n            }\n        }\n        result += (char)ascii;\n    }\n    return\
    \ result;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tchar c = s[i];\n\t\tif (c == 'z') {\n\t\t\tc = 'b';\n\t\t} else if (c\
    \ == 'y') {\n\t\t\tc = 'a';\n\t\t} else {\n\t\t\tc += 2;\n\t\t}\n\t\tresult +=\
    \ c;\n\t}\n\treturn result;", "    std::string result = \"\";\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (s[i] == 'z') {\n            result\
    \ += 'b';\n        } else if (s[i] == 'y') {\n            result += 'a';\n   \
    \     } else {\n            result += s[i] + 2;\n        }\n    }\n    return\
    \ result;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tresult += (char)((int)s[i] + 2*2);\n\t}\n\treturn result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ == 'z') {\n            result += 'b';\n        } else if (s[i] == 'y') {\n \
    \           result += 'a';\n        } else {\n            result += s[i] + 2;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        result += (char)((int)s[i] + 2 *\
    \ 2);\n    }\n    return result;", "\tstd::string result = \"\";\n\tfor (int i\
    \ = 0; i < s.length(); i++) {\n\t\tresult += (char)((int)s[i] + 2 * 2);\n\t}\n\
    \treturn result;", "    std::string result = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        result += s[i] + 2 * 2;\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        int ascii\
    \ = (int)s[i];\n        if (ascii >= 97 && ascii <= 122) {\n            ascii\
    \ += 2;\n            if (ascii > 122) {\n                ascii -= 26;\n      \
    \      }\n        }\n        result += (char)ascii;\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      result += (char)(s[i] + 2 * 2);\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c =\
    \ s[i];\n        if (c >= 'a' && c <= 'y') {\n            c += 2;\n        } else\
    \ if (c == 'z') {\n            c = 'b';\n        } else if (c == 'x') {\n    \
    \        c = 'a';\n        }\n        result += c;\n    }\n    return result;",
  "    for (int i = 0; i < s.length(); i++) {\n        s[i] = s[i] + 2;\n    }\n \
    \   return s;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tresult += (s[i] + 2 * 2);\n\t}\n\treturn result;", "  std::string\
    \ result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    result += s[i]\
    \ + 2 * 2;\n  }\n  return result;"]
stop_tokens:
- "\n}"
