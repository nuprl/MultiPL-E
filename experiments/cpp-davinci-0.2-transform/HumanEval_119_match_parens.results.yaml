language: cpp
name: HumanEval_119_match_parens
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int cnt = 0;\n    for (auto s : lst) {\n        for (auto c : s)\
    \ {\n            if (c == '(') cnt++;\n            else cnt--;\n            if\
    \ (cnt < 0) return \"No\";\n        }\n    }\n    return cnt == 0 ? \"Yes\" :\
    \ \"No\";\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbwzg3bdo.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpbwzg3bdo.cpp:18:15: error: 's' does not name a type\n     for\
    \ (auto s : lst) {\n               ^\n/tmp/tmpbwzg3bdo.cpp:25:5: error: expected\
    \ ';' before 'return'\n     return cnt == 0 ? \"Yes\" : \"No\";\n     ^\n/tmp/tmpbwzg3bdo.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpbwzg3bdo.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpbwzg3bdo.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpbwzg3bdo.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpbwzg3bdo.cpp: In function 'int main()':\n/tmp/tmpbwzg3bdo.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbwzg3bdo.cpp:2:\n/tmp/tmpbwzg3bdo.cpp:29:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpbwzg3bdo.cpp:29:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpbwzg3bdo.cpp:29:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpbwzg3bdo.cpp:29:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpbwzg3bdo.cpp:30:47:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < s1.length(); i++)\
    \ {\n        if (s1[i] == '(') {\n            count1++;\n        } else {\n  \
    \          count1--;\n        }\n    }\n    for (int i = 0; i < s2.length(); i++)\
    \ {\n        if (s2[i] == '(') {\n            count2++;\n        } else {\n  \
    \          count2--;\n        }\n    }\n    if (count1 == 0 && count2 == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbib_2bd.cpp: In function 'int main()':\n/tmp/tmpnbib_2bd.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnbib_2bd.cpp:2:\n/tmp/tmpnbib_2bd.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpnbib_2bd.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpnbib_2bd.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpnbib_2bd.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpnbib_2bd.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpnbib_2bd.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpnbib_2bd.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ n1 = s1.size();\n    int n2 = s2.size();\n    int count1 = 0;\n    int count2\
    \ = 0;\n    for(int i = 0; i < n1; i++) {\n        if(s1[i] == '(') {\n      \
    \      count1++;\n        } else {\n            count1--;\n        }\n    }\n\
    \    for(int i = 0; i < n2; i++) {\n        if(s2[i] == '(') {\n            count2++;\n\
    \        } else {\n            count2--;\n        }\n    }\n    if(count1 == 0\
    \ && count2 == 0) {\n        return \"Yes\";\n    } else if(count1 == -1 && count2\
    \ == 1) {\n        return \"Yes\";\n    } else if(count1 == 1 && count2 == -1)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    int main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2vrxzv4.cpp: In function 'int main()':\n/tmp/tmpd2vrxzv4.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd2vrxzv4.cpp:2:\n/tmp/tmpd2vrxzv4.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpd2vrxzv4.cpp:49:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpd2vrxzv4.cpp:49:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpd2vrxzv4.cpp:49:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpd2vrxzv4.cpp:50:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpd2vrxzv4.cpp:50:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpd2vrxzv4.cpp:50:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  std::stack<char> st;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (s[i] == '(') {\n      st.push(s[i]);\n    } else {\n      if (st.empty())\
    \ {\n        return \"No\";\n      } else {\n        st.pop();\n      }\n    }\n\
    \  }\n  if (st.empty()) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjedgmnmm.cpp: In function 'int main()':\n/tmp/tmpjedgmnmm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjedgmnmm.cpp:2:\n/tmp/tmpjedgmnmm.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjedgmnmm.cpp:40:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpjedgmnmm.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpjedgmnmm.cpp:41:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpjedgmnmm.cpp:41:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  std::stack<char> st;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (s[i] == '(') {\n      st.push(s[i]);\n    } else {\n      if (st.empty())\
    \ {\n        return \"No\";\n      } else {\n        st.pop();\n      }\n    }\n\
    \  }\n  if (st.empty()) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjedgmnmm.cpp: In function 'int main()':\n/tmp/tmpjedgmnmm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjedgmnmm.cpp:2:\n/tmp/tmpjedgmnmm.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjedgmnmm.cpp:40:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpjedgmnmm.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpjedgmnmm.cpp:41:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpjedgmnmm.cpp:41:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string ans = \"Yes\";\n  int count = 0;\n  for (auto i : lst)\
    \ {\n    for (auto j : i) {\n      if (j == '(') {\n        count++;\n      }\
    \ else {\n        count--;\n      }\n      if (count < 0) {\n        ans = \"\
    No\";\n        break;\n      }\n    }\n  }\n  if (count != 0) {\n    ans = \"\
    No\";\n  }\n  return ans;\n}\nint main() {\n    auto candidate = match_parens;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsbfu4vwh.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpsbfu4vwh.cpp:19:13: error: 'i' does not name a type\n   for (auto\
    \ i : lst) {\n             ^\n/tmp/tmpsbfu4vwh.cpp:32:3: error: expected ';' before\
    \ 'if'\n   if (count != 0) {\n   ^\n/tmp/tmpsbfu4vwh.cpp:32:3: error: expected\
    \ primary-expression before 'if'\n/tmp/tmpsbfu4vwh.cpp:32:3: error: expected ';'\
    \ before 'if'\n/tmp/tmpsbfu4vwh.cpp:32:3: error: expected primary-expression before\
    \ 'if'\n/tmp/tmpsbfu4vwh.cpp:32:3: error: expected ')' before 'if'\n/tmp/tmpsbfu4vwh.cpp:\
    \ In function 'int main()':\n/tmp/tmpsbfu4vwh.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = match_parens;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsbfu4vwh.cpp:2:\n/tmp/tmpsbfu4vwh.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpsbfu4vwh.cpp:39:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpsbfu4vwh.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsbfu4vwh.cpp:39:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpsbfu4vwh.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int count1\
    \ = 0;\n  int count2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i]\
    \ == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (int i = 0; i < s2.length(); i++) {\n    if (s2[i] == '(') {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  if (count1 == 0 && count2 == 0)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n\
    \    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphduw4gxg.cpp: In function 'int main()':\n/tmp/tmphduw4gxg.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphduw4gxg.cpp:2:\n/tmp/tmphduw4gxg.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmphduw4gxg.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmphduw4gxg.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphduw4gxg.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmphduw4gxg.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmphduw4gxg.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmphduw4gxg.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int count1\
    \ = 0;\n  int count2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i]\
    \ == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (int i = 0; i < s2.length(); i++) {\n    if (s2[i] == '(') {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  if (count1 == 0 && count2 == 0)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n\
    \    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphduw4gxg.cpp: In function 'int main()':\n/tmp/tmphduw4gxg.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphduw4gxg.cpp:2:\n/tmp/tmphduw4gxg.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmphduw4gxg.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmphduw4gxg.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphduw4gxg.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmphduw4gxg.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmphduw4gxg.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmphduw4gxg.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < lst[0].size();\
    \ i++) {\n        if (lst[0][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    for (int i = 0; i < lst[1].size();\
    \ i++) {\n        if (lst[1][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open == close) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk6_y7rqk.cpp: In function 'int main()':\n/tmp/tmpk6_y7rqk.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk6_y7rqk.cpp:2:\n/tmp/tmpk6_y7rqk.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk6_y7rqk.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpk6_y7rqk.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpk6_y7rqk.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpk6_y7rqk.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (auto s : lst) {\n    for (auto c : s) {\n \
    \     if (c == '(') {\n        count++;\n      } else {\n        count--;\n  \
    \    }\n      if (count < 0) {\n        return \"No\";\n      }\n    }\n  }\n\
    \  return count == 0 ? \"Yes\" : \"No\";\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc1yyg8_o.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpc1yyg8_o.cpp:18:13: error: 's' does not name a type\n   for (auto\
    \ s : lst) {\n             ^\n/tmp/tmpc1yyg8_o.cpp:30:3: error: expected ';' before\
    \ 'return'\n   return count == 0 ? \"Yes\" : \"No\";\n   ^\n/tmp/tmpc1yyg8_o.cpp:30:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpc1yyg8_o.cpp:30:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpc1yyg8_o.cpp:30:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpc1yyg8_o.cpp:30:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpc1yyg8_o.cpp: In function 'int main()':\n/tmp/tmpc1yyg8_o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc1yyg8_o.cpp:2:\n/tmp/tmpc1yyg8_o.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpc1yyg8_o.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpc1yyg8_o.cpp:34:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc1yyg8_o.cpp:34:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpc1yyg8_o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < lst[0].size();\
    \ i++) {\n        if (lst[0][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    for (int i = 0; i < lst[1].size();\
    \ i++) {\n        if (lst[1][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open == close) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk6_y7rqk.cpp: In function 'int main()':\n/tmp/tmpk6_y7rqk.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk6_y7rqk.cpp:2:\n/tmp/tmpk6_y7rqk.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk6_y7rqk.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpk6_y7rqk.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpk6_y7rqk.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpk6_y7rqk.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < s1.length(); i++)\
    \ {\n        if (s1[i] == '(') {\n            count1++;\n        } else {\n  \
    \          count1--;\n        }\n    }\n    for (int i = 0; i < s2.length(); i++)\
    \ {\n        if (s2[i] == '(') {\n            count2++;\n        } else {\n  \
    \          count2--;\n        }\n    }\n    if (count1 == 0 && count2 == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbib_2bd.cpp: In function 'int main()':\n/tmp/tmpnbib_2bd.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnbib_2bd.cpp:2:\n/tmp/tmpnbib_2bd.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpnbib_2bd.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpnbib_2bd.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpnbib_2bd.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpnbib_2bd.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpnbib_2bd.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpnbib_2bd.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string first = lst[0];\n    std::string second = lst[1];\n\
    \    int first_count = 0;\n    int second_count = 0;\n    for (int i = 0; i <\
    \ first.length(); i++) {\n        if (first[i] == '(') {\n            first_count++;\n\
    \        } else {\n            first_count--;\n        }\n    }\n    for (int\
    \ i = 0; i < second.length(); i++) {\n        if (second[i] == '(') {\n      \
    \      second_count++;\n        } else {\n            second_count--;\n      \
    \  }\n    }\n    if (first_count == 0 && second_count == 0) {\n        return\
    \ \"Yes\";\n    } else if (first_count == 0 && second_count < 0) {\n        return\
    \ \"Yes\";\n    } else if (first_count > 0 && second_count == 0) {\n        return\
    \ \"Yes\";\n    } else if (first_count > 0 && second_count < 0) {\n        if\
    \ (first_count == -second_count) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n    } else {\n        return \"No\"\
    ;\n    }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpts2zanl4.cpp: In function 'int main()':\n/tmp/tmpts2zanl4.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpts2zanl4.cpp:2:\n/tmp/tmpts2zanl4.cpp:53:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpts2zanl4.cpp:53:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpts2zanl4.cpp:53:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpts2zanl4.cpp:53:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpts2zanl4.cpp:54:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpts2zanl4.cpp:54:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpts2zanl4.cpp:54:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n \
    \   if (s[i] == '(') {\n      count++;\n    } else {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return \"No\";\n    }\n  }\n  if (count == 0) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n \
    \   auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn83odnx1.cpp: In function 'int main()':\n/tmp/tmpn83odnx1.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn83odnx1.cpp:2:\n/tmp/tmpn83odnx1.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpn83odnx1.cpp:39:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpn83odnx1.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpn83odnx1.cpp:39:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpn83odnx1.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpn83odnx1.cpp:40:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpn83odnx1.cpp:40:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::stack<char>\
    \ st;\n  for (int i = 0; i < s1.size(); i++) {\n    if (s1[i] == '(') {\n    \
    \  st.push(s1[i]);\n    } else {\n      if (st.empty()) {\n        return \"No\"\
    ;\n      }\n      st.pop();\n    }\n  }\n  for (int i = 0; i < s2.size(); i++)\
    \ {\n    if (s2[i] == '(') {\n      st.push(s2[i]);\n    } else {\n      if (st.empty())\
    \ {\n        return \"No\";\n      }\n      st.pop();\n    }\n  }\n  return \"\
    Yes\";\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_ym7i_0.cpp: In function 'int main()':\n/tmp/tmpo_ym7i_0.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo_ym7i_0.cpp:2:\n/tmp/tmpo_ym7i_0.cpp:44:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpo_ym7i_0.cpp:44:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpo_ym7i_0.cpp:44:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpo_ym7i_0.cpp:44:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpo_ym7i_0.cpp:45:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpo_ym7i_0.cpp:45:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpo_ym7i_0.cpp:45:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  std::stack<char> st;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (s[i] == '(') {\n      st.push(s[i]);\n    } else {\n      if (st.empty())\
    \ {\n        return \"No\";\n      } else {\n        st.pop();\n      }\n    }\n\
    \  }\n  if (st.empty()) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjedgmnmm.cpp: In function 'int main()':\n/tmp/tmpjedgmnmm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjedgmnmm.cpp:2:\n/tmp/tmpjedgmnmm.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjedgmnmm.cpp:40:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpjedgmnmm.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpjedgmnmm.cpp:41:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpjedgmnmm.cpp:41:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  std::stack<char> st;\n  for (int i = 0; i < s.length(); i++)\
    \ {\n    if (s[i] == '(') {\n      st.push(s[i]);\n    } else {\n      if (st.empty())\
    \ {\n        return \"No\";\n      } else {\n        st.pop();\n      }\n    }\n\
    \  }\n  if (st.empty()) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjedgmnmm.cpp: In function 'int main()':\n/tmp/tmpjedgmnmm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjedgmnmm.cpp:2:\n/tmp/tmpjedgmnmm.cpp:40:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpjedgmnmm.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjedgmnmm.cpp:40:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpjedgmnmm.cpp:41:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpjedgmnmm.cpp:41:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpjedgmnmm.cpp:41:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < lst[0].size();\
    \ i++) {\n        if (lst[0][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    for (int i = 0; i < lst[1].size();\
    \ i++) {\n        if (lst[1][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open == close) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk6_y7rqk.cpp: In function 'int main()':\n/tmp/tmpk6_y7rqk.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk6_y7rqk.cpp:2:\n/tmp/tmpk6_y7rqk.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpk6_y7rqk.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk6_y7rqk.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpk6_y7rqk.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpk6_y7rqk.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpk6_y7rqk.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  int n = s.length();\n  std::stack<char> st;\n  for (int i =\
    \ 0; i < n; i++) {\n    if (s[i] == '(') {\n      st.push(s[i]);\n    } else {\n\
    \      if (st.empty()) {\n        return \"No\";\n      } else {\n        st.pop();\n\
    \      }\n    }\n  }\n  if (st.empty()) {\n    return \"Yes\";\n  } else {\n \
    \   return \"No\";\n  }\n}\nint main() {\n    auto candidate = match_parens;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8lx2zlm.cpp: In function 'int main()':\n/tmp/tmpn8lx2zlm.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn8lx2zlm.cpp:2:\n/tmp/tmpn8lx2zlm.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpn8lx2zlm.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpn8lx2zlm.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpn8lx2zlm.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpn8lx2zlm.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpn8lx2zlm.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpn8lx2zlm.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    for\
    \ (int j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == '(') {\n     \
    \   count++;\n      } else {\n        count--;\n      }\n      if (count < 0)\
    \ {\n        return \"No\";\n      }\n    }\n  }\n  if (count == 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u2zs34_.cpp: In function 'int main()':\n/tmp/tmp0u2zs34_.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0u2zs34_.cpp:2:\n/tmp/tmp0u2zs34_.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp0u2zs34_.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp0u2zs34_.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp0u2zs34_.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp0u2zs34_.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp0u2zs34_.cpp:39:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp0u2zs34_.cpp:39:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
