language: cpp
name: HumanEval_69_search
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpotapj1zz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpotapj1zz.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmpotapj1zz.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmpotapj1zz.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpotapj1zz.cpp: In function 'int\
    \ main()':\n/tmp/tmpotapj1zz.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpotapj1zz.cpp:2:\n/tmp/tmpotapj1zz.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpotapj1zz.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpotapj1zz.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpotapj1zz.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpotapj1zz.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpotapj1zz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tstd::map<long,\
    \ long> freq;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfreq[lst[i]]++;\n\
    \t}\n\tlong max = -1;\n\tfor (std::map<long, long>::iterator it = freq.begin();\
    \ it != freq.end(); it++) {\n\t\tif (it->first <= it->second && it->first > max)\
    \ {\n\t\t\tmax = it->first;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhum0cdy.cpp: In function 'int main()':\n/tmp/tmpwhum0cdy.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwhum0cdy.cpp:2:\n/tmp/tmpwhum0cdy.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwhum0cdy.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwhum0cdy.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwhum0cdy.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwhum0cdy.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwhum0cdy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwhum0cdy.cpp:2:\n/tmp/tmpwhu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2rgi3u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsu2rgi3u.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpsu2rgi3u.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsu2rgi3u.cpp: In function 'int main()':\n/tmp/tmpsu2rgi3u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu2rgi3u.cpp:2:\n/tmp/tmpsu2rgi3u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsu2rgi3u.cpp:29:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2rgi3u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsu2rgi3u.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpsu2rgi3u.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsu2rgi3u.cpp: In function 'int main()':\n/tmp/tmpsu2rgi3u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu2rgi3u.cpp:2:\n/tmp/tmpsu2rgi3u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsu2rgi3u.cpp:29:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2rgi3u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsu2rgi3u.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpsu2rgi3u.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsu2rgi3u.cpp: In function 'int main()':\n/tmp/tmpsu2rgi3u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu2rgi3u.cpp:2:\n/tmp/tmpsu2rgi3u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsu2rgi3u.cpp:29:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i\
    \ : m) {\n        if (i.first <= i.second) {\n            return i.first;\n  \
    \      }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fyhm5_4.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp2fyhm5_4.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmp2fyhm5_4.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : m) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmp2fyhm5_4.cpp: In function 'int main()':\n/tmp/tmp2fyhm5_4.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp2fyhm5_4.cpp:2:\n/tmp/tmp2fyhm5_4.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4cwey7t6.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp4cwey7t6.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmp4cwey7t6.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmp4cwey7t6.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmp4cwey7t6.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmp4cwey7t6.cpp:19:5: error:\
    \ expected ';' before 'long'\n     long max = -1;\n     ^\n/tmp/tmp4cwey7t6.cpp:20:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : freq) {\n\
    \     ^\n/tmp/tmp4cwey7t6.cpp:20:5: error: expected ')' before 'for'\n/tmp/tmp4cwey7t6.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : freq) {\n              \
    \ ^\n/tmp/tmp4cwey7t6.cpp:25:5: error: expected ';' before 'return'\n     return\
    \ max;\n     ^\n/tmp/tmp4cwey7t6.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp4cwey7t6.cpp:25:5: error: expected ';' before 'return'\n\
    /tmp/tmp4cwey7t6.cpp:25:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp4cwey7t6.cpp:25:5: error: expected ')' before 'return'\n/tmp/tmp4cwey7t6.cpp:\
    \ In function 'int main()':\n/tmp/tmp4cwey7t6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4cwey7t6.cpp:2:\n/tmp/tmp4cwey7t6.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp4cwey7t6.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2rgi3u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsu2rgi3u.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpsu2rgi3u.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsu2rgi3u.cpp: In function 'int main()':\n/tmp/tmpsu2rgi3u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu2rgi3u.cpp:2:\n/tmp/tmpsu2rgi3u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsu2rgi3u.cpp:29:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i: lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto i: freq) {\n        if (i.first <= i.second) {\n      \
    \      ans = std::max(ans, i.first);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusnn11ul.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpusnn11ul.cpp:16:15: error: 'i' does not name a type\n     for (auto i:\
    \ lst) {\n               ^\n/tmp/tmpusnn11ul.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long ans = -1;\n     ^\n/tmp/tmpusnn11ul.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i: freq) {\n     ^\n/tmp/tmpusnn11ul.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpusnn11ul.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i: freq) {\n               ^\n/tmp/tmpusnn11ul.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpusnn11ul.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpusnn11ul.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpusnn11ul.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpusnn11ul.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpusnn11ul.cpp: In function 'int main()':\n/tmp/tmpusnn11ul.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpusnn11ul.cpp:2:\n/tmp/tmpusnn11ul.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpusnn11ul.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpusnn11ul.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpusnn11ul.cpp:29:86: error: no matching function\
    \ for call to 'std"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if (it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4li_viay.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp4li_viay.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = m.begin(); it != m.end(); it++) {\n               ^\n/tmp/tmp4li_viay.cpp:20:31:\
    \ error: expected ';' before 'it'\n     for (auto it = m.begin(); it != m.end();\
    \ it++) {\n                               ^\n/tmp/tmp4li_viay.cpp:20:31: error:\
    \ 'it' was not declared in this scope\n/tmp/tmp4li_viay.cpp: In function 'int\
    \ main()':\n/tmp/tmp4li_viay.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4li_viay.cpp:2:\n/tmp/tmp4li_viay.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp4li_viay.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp4li_viay.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4li_viay.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4li_viay.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4li_viay.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       ans = std::max(ans, i.first);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsw_6qwy.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpwsw_6qwy.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpwsw_6qwy.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long ans = -1;\n     ^\n/tmp/tmpwsw_6qwy.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpwsw_6qwy.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpwsw_6qwy.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpwsw_6qwy.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpwsw_6qwy.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwsw_6qwy.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwsw_6qwy.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwsw_6qwy.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwsw_6qwy.cpp: In function 'int main()':\n/tmp/tmpwsw_6qwy.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsw_6qwy.cpp:2:\n/tmp/tmpwsw_6qwy.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwsw_6qwy.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwsw_6qwy.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwsw_6qwy.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimov4syn.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpimov4syn.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpimov4syn.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpimov4syn.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpimov4syn.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpimov4syn.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpimov4syn.cpp: In function 'int main()':\n/tmp/tmpimov4syn.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpimov4syn.cpp:2:\n/tmp/tmpimov4syn.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpimov4syn.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimov4syn.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpimov4syn.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpimov4syn.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpimov4syn.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpimov4syn.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpimov4syn.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpimov4syn.cpp: In function 'int main()':\n/tmp/tmpimov4syn.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpimov4syn.cpp:2:\n/tmp/tmpimov4syn.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpimov4syn.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long ans = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            ans = std::max(ans,\
    \ it->first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaal349xu.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpaal349xu.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmpaal349xu.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmpaal349xu.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpaal349xu.cpp: In function 'int\
    \ main()':\n/tmp/tmpaal349xu.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaal349xu.cpp:2:\n/tmp/tmpaal349xu.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpaal349xu.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpaal349xu.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaal349xu.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaal349xu.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaal349xu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpimov4syn.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpimov4syn.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpimov4syn.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpimov4syn.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpimov4syn.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpimov4syn.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpimov4syn.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpimov4syn.cpp: In function 'int main()':\n/tmp/tmpimov4syn.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpimov4syn.cpp:2:\n/tmp/tmpimov4syn.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpimov4syn.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpimov4syn.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocv8b93w.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpocv8b93w.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpocv8b93w.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpocv8b93w.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpocv8b93w.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpocv8b93w.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpocv8b93w.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpocv8b93w.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpocv8b93w.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpocv8b93w.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpocv8b93w.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpocv8b93w.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpocv8b93w.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpocv8b93w.cpp: In function 'int main()':\n/tmp/tmpocv8b93w.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpocv8b93w.cpp:2:\n/tmp/tmpocv8b93w.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpocv8b93w.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpocv8b93w.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu2rgi3u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsu2rgi3u.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpsu2rgi3u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpsu2rgi3u.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsu2rgi3u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsu2rgi3u.cpp: In function 'int main()':\n/tmp/tmpsu2rgi3u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu2rgi3u.cpp:2:\n/tmp/tmpsu2rgi3u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsu2rgi3u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsu2rgi3u.cpp:29:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i\
    \ : m) {\n        if (i.first <= i.second) {\n            return i.first;\n  \
    \      }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fyhm5_4.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp2fyhm5_4.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmp2fyhm5_4.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : m) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmp2fyhm5_4.cpp: In function 'int main()':\n/tmp/tmp2fyhm5_4.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp2fyhm5_4.cpp:2:\n/tmp/tmp2fyhm5_4.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second) {\n            if (i.first\
    \ > max) {\n                max = i.first;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrwtgvkh.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpwrwtgvkh.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpwrwtgvkh.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpwrwtgvkh.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpwrwtgvkh.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpwrwtgvkh.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : m) {\n               ^\n/tmp/tmpwrwtgvkh.cpp:27:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpwrwtgvkh.cpp:27:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwrwtgvkh.cpp:27:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwrwtgvkh.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwrwtgvkh.cpp:27:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwrwtgvkh.cpp: In function 'int main()':\n/tmp/tmpwrwtgvkh.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwrwtgvkh.cpp:2:\n/tmp/tmpwrwtgvkh.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwrwtgvkh.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwrwtgvkh.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwrwtgvkh.cpp:31:86: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i\
    \ : m) {\n        if (i.first <= i.second) {\n            return i.first;\n  \
    \      }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fyhm5_4.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp2fyhm5_4.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp2fyhm5_4.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmp2fyhm5_4.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : m) {\n               ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp2fyhm5_4.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmp2fyhm5_4.cpp: In function 'int main()':\n/tmp/tmp2fyhm5_4.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp2fyhm5_4.cpp:2:\n/tmp/tmp2fyhm5_4.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp2fyhm5_4.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -st"
  stdout: ''
