name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n\
  // (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (std::isupper(message[i]))\
    \ {\n            result += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            result += std::toupper(message[i]);\n        } else {\n     \
    \       result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'c' || result[i]\
    \ == 'd' || result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i]\
    \ == 'j' || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i]\
    \ == 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 1;\n        }\n    }\n    return result;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "\tstd::string encoded\
    \ = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tencoded += (char)(message[i] - 32);\n\t\
    \t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded += (char)(message[i]\
    \ + 32);\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i\
    \ = 0; i < encoded.length(); i++) {\n\t\tif (encoded[i] == 'a') {\n\t\t\tencoded[i]\
    \ = 'c';\n\t\t} else if (encoded[i] == 'e') {\n\t\t\tencoded[i] = 'g';\n\t\t}\
    \ else if (encoded[i] == 'i') {\n\t\t\tencoded[i] = 'k';\n\t\t} else if (encoded[i]\
    \ == 'o') {\n\t\t\tencoded[i] = 'q';\n\t\t} else if (encoded[i] == 'u') {\n\t\t\
    \tencoded[i] = 'w';\n\t\t} else if (encoded[i] == 'A') {\n\t\t\tencoded[i] = 'C';\n\
    \t\t} else if (encoded[i] == 'E') {\n\t\t\tencoded[i] = 'G';\n\t\t} else if (encoded[i]\
    \ == 'I') {\n\t\t\tencoded[i] = 'K';\n\t\t} else if (encoded[i] == 'O') {\n\t\t\
    \tencoded[i] = 'Q';\n\t\t} else if (encoded[i] == 'U') {\n\t\t\tencoded[i] = 'W';\n\
    \t\t}\n\t}\n\treturn encoded;", "    std::string result;\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'e'\
    \ || result[i] == 'E') {\n            result[i] = 'G';\n        } else if (result[i]\
    \ == 'i' || result[i] == 'I') {\n            result[i] = 'K';\n        } else\
    \ if (result[i] == 'o' || result[i] == 'O') {\n            result[i] = 'M';\n\
    \        } else if (result[i] == 'u' || result[i] == 'U') {\n            result[i]\
    \ = 'Q';\n        }\n    }\n    return result;", "    std::string vowels = \"\
    aeiou\";\n    std::string encodedMessage = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos) {\n\
    \            encodedMessage += tolower(message[i]) + 2;\n        } else {\n  \
    \          encodedMessage += tolower(message[i]);\n        }\n    }\n    return\
    \ encodedMessage;", "    std::string encoded_message = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 'a' + 'A';\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += message[i] - 'A' + 'a';\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        for (int j = 0; j\
    \ < vowels.length(); j++) {\n            if (encoded_message[i] == vowels[j])\
    \ {\n                encoded_message[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded_message;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0;\
    \ j < encoded_message.length(); j++) {\n            if (encoded_message[j] ==\
    \ vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (isupper(c)) {\n            result += tolower(c);\n        } else\
    \ if (islower(c)) {\n            result += toupper(c);\n        } else {\n   \
    \         result += c;\n        }\n        if (vowels.find(tolower(c)) != std::string::npos)\
    \ {\n            result.back() = vowels[(vowels.find(tolower(c)) + 2) % vowels.size()];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n   \
    \     if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n   \
    \     switch (c) {\n            case 'A':\n                c = 'C';\n        \
    \        break;\n            case 'E':\n                c = 'G';\n           \
    \     break;\n            case 'I':\n                c = 'K';\n              \
    \  break;\n            case 'O':\n                c = 'Q';\n                break;\n\
    \            case 'U':\n                c = 'S';\n                break;\n   \
    \         case 'a':\n                c = 'c';\n                break;\n      \
    \      case 'e':\n                c = 'g';\n                break;\n         \
    \   case 'i':\n                c = 'k';\n                break;\n            case\
    \ 'o':\n                c = 'q';\n                break;\n            case 'u':\n\
    \                c = 's';\n                break;\n        }\n        result +=\
    \ c;\n    }\n    return result;", "    std::string result;\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (isupper(message[i])) {\n         \
    \   result += tolower(message[i]);\n        } else if (islower(message[i])) {\n\
    \            result += toupper(message[i]);\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n        }\
    \ else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else if\
    \ (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;", "    std::string encoded_message = \"\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result;\n\
    \    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         result += c - 'A' + 'a';\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ == 'a') {\n            result[i] = 'c';\n        } else if (result[i] == 'e')\
    \ {\n            result[i] = 'g';\n        } else if (result[i] == 'i') {\n  \
    \          result[i] = 'k';\n        } else if (result[i] == 'o') {\n        \
    \    result[i] = 'q';\n        } else if (result[i] == 'u') {\n            result[i]\
    \ = 'w';\n        } else if (result[i] == 'A') {\n            result[i] = 'C';\n\
    \        } else if (result[i] == 'E') {\n            result[i] = 'G';\n      \
    \  } else if (result[i] == 'I') {\n            result[i] = 'K';\n        } else\
    \ if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else if (result[i]\
    \ == 'U') {\n            result[i] = 'W';\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    std::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == ' ') {\n            result += ' ';\n     \
    \   } else if (vowels.find(tolower(message[i])) != std::string::npos) {\n    \
    \        int index = (alphabet.find(tolower(message[i])) + 2) % 26;\n        \
    \    result += alphabet[index];\n        } else {\n            if (isupper(message[i]))\
    \ {\n                result += toupper(message[i]);\n            } else {\n  \
    \              result += tolower(message[i]);\n            }\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    std::string encoded\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        }\n        if (vowels.find(c) != std::string::npos) {\n      \
    \      int index = vowels.find(c);\n            index = (index + 2) % vowels.length();\n\
    \            c = vowels[index];\n        }\n        encoded += c;\n    }\n   \
    \ return encoded;", "    std::string encoded_message = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char ch = message[i];\n\
    \        if (ch >= 'a' && ch <= 'z') {\n            ch = ch - 'a' + 'A';\n   \
    \     } else if (ch >= 'A' && ch <= 'Z') {\n            ch = ch - 'A' + 'a';\n\
    \        }\n        switch (ch) {\n            case 'A':\n                ch =\
    \ 'C';\n                break;\n            case 'E':\n                ch = 'G';\n\
    \                break;\n            case 'I':\n                ch = 'K';\n  \
    \              break;\n            case 'O':\n                ch = 'Q';\n    \
    \            break;\n            case 'U':\n                ch = 'S';\n      \
    \          break;\n            case 'a':\n                ch = 'c';\n        \
    \        break;\n            case 'e':\n                ch = 'g';\n          \
    \      break;\n            case 'i':\n                ch = 'k';\n            \
    \    break;\n            case 'o':\n                ch = 'q';\n              \
    \  break;\n            case 'u':\n                ch = 's';\n                break;\n\
    \        }\n        result += ch;\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (std::isupper(message[i])) {\n        \
    \    result += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            result += std::toupper(message[i]);\n        } else {\n     \
    \       result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            index = (index + 2) % 5;\n\
    \            result[i] = vowels[index];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n     \
    \       c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n     \
    \       c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c\
    \ + 2;\n        }\n        result += c;\n    }\n    return result;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i] - 'a' + 'A';\n\t\t\
    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i]\
    \ - 'A' + 'a';\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a' || result[i] ==\
    \ 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i]\
    \ = result[i] + 2;\n\t\t} else if (result[i] == 'c' || result[i] == 'd' || result[i]\
    \ == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t} else\
    \ if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] ==\
    \ 'O' || result[i] == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t} else if\
    \ (result[i] == 'C' || result[i] == 'D"]
stop_tokens:
- "\n}"
