language: cpp
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long d = 2; d * d <= n; ++d) {\n\
    \        while (n % d == 0) {\n            result.push_back(d);\n            n\
    \ /= d;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjmv_7y0.cpp: In function 'int main()':\n/tmp/tmpvjmv_7y0.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjmv_7y0.cpp:2:\n/tmp/tmpvjmv_7y0.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpvjmv_7y0.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpvjmv_7y0.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpvjmv_7y0.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvjmv_7y0.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpvjmv_7y0.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpvjmv_7y0.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvjmv_7y0.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    int i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7d01gh_c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwrt5_07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n\tstd::vector<long> res;\n\tfor (long i = 2; i <= n; i++) {\n\t\twhile\
    \ (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14vaejiv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n\
    \        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n \
    \       while (n % i == 0) {\n            factors.push_back(i);\n            n\
    \ = n / i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1yan_2_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; ++i) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphfcrn5_a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    int i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7d01gh_c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n        while(n%i==0)\n\
    \        {\n            v.push_back(i);\n            n=n/i;\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj4vh4v79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp390n572_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n        if(n%i==0)\n\
    \        {\n            v.push_back(i);\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplk9m1qm1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            res.push_back(i);\n            n /=\
    \ i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpdrvw85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1)\n        result.push_back(n);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvmemvqts.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> ret;\n    for (long i = 2; i <= n; ++i) {\n    \
    \    while (n % i == 0) {\n            ret.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy6xdfdfn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            res.push_back(i);\n            n /=\
    \ i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpdrvw85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            res.push_back(i);\n            n /=\
    \ i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpdrvw85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        if (n % i == 0) {\n            factors.push_back(i);\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkiv18_s9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    if (n == 1) {\n        factors.push_back(1);\n\
    \        return factors;\n    }\n    for (long i = 2; i <= n; i++) {\n       \
    \ while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdgc6mlia.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n        if(n%i==0)\n\
    \        {\n            v.push_back(i);\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplk9m1qm1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwrt5_07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwrt5_07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n\tstd::vector<long> result;\n\tfor (long i = 2; i <= n; i++) {\n\t\twhile\
    \ (n % i == 0) {\n\t\t\tresult.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl80l1uj5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq14506k1.cpp: In function 'int main()':\n/tmp/tmpq14506k1.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq14506k1.cpp:2:\n/tmp/tmpq14506k1.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpq14506k1.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpq14506k1.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpq14506k1.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpq14506k1.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpq14506k1.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq14506k1.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n\tstd::vector<long> res;\n\tfor (long i = 2; i <= n; i++) {\n\t\twhile\
    \ (n % i == 0) {\n\t\t\tres.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp14vaejiv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        while (n % i == 0) {\n            res.push_back(i);\n            n /=\
    \ i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpdrvw85.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwrt5_07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiwrt5_07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    long i = 2;\n    while (n > 1) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmput467b0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; ++i) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjje92c.cpp: In function 'int main()':\n/tmp/tmp1yjje92c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1yjje92c.cpp:2:\n/tmp/tmp1yjje92c.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1yjje92c.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1yjje92c.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1yjje92c.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1yjje92c.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1yjje92c.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1yjje92c.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> v;\n    for(long i=2;i<=n;i++)\n    {\n        while(n%i==0)\n\
    \        {\n            v.push_back(i);\n            n=n/i;\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj4vh4v79.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n    \
    \    while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gulszt8.cpp: In function 'int main()':\n/tmp/tmp1gulszt8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gulszt8.cpp:2:\n/tmp/tmp1gulszt8.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp1gulszt8.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp1gulszt8.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp1gulszt8.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp1gulszt8.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp1gulszt8.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1gulszt8.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            result.push_back(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmeolfb6_.cpp: In function 'int main()':\n/tmp/tmpmeolfb6_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmeolfb6_.cpp:2:\n/tmp/tmpmeolfb6_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpmeolfb6_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpmeolfb6_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpmeolfb6_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpmeolfb6_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpmeolfb6_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmeolfb6_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppup5pl64.cpp: In function 'int main()':\n/tmp/tmppup5pl64.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppup5pl64.cpp:2:\n/tmp/tmppup5pl64.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmppup5pl64.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmppup5pl64.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmppup5pl64.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmppup5pl64.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmppup5pl64.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppup5pl64.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n//\
    \ >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
    // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
    \ n) {\n    std::vector<long> factors;\n    // your code here\n    long i = 2;\n\
    \    while(n > 1){\n        while(n % i == 0){\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptbxiai8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821779
