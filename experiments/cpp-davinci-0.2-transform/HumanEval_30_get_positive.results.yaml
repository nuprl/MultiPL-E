language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphff0w5p9.cpp: In function 'int main()':\n/tmp/tmphff0w5p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphff0w5p9.cpp:2:\n/tmp/tmphff0w5p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmphff0w5p9.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmphff0w5p9.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphff0w5p9.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphff0w5p9.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphff0w5p9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nsas4mf.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp4nsas4mf.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmp4nsas4mf.cpp: In function 'int main()':\n/tmp/tmp4nsas4mf.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nsas4mf.cpp:2:\n/tmp/tmp4nsas4mf.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4nsas4mf.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp4nsas4mf.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphff0w5p9.cpp: In function 'int main()':\n/tmp/tmphff0w5p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphff0w5p9.cpp:2:\n/tmp/tmphff0w5p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmphff0w5p9.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmphff0w5p9.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphff0w5p9.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphff0w5p9.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphff0w5p9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i: l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5f0rhbsc.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp5f0rhbsc.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i: l) {\n               ^\n/tmp/tmp5f0rhbsc.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp5f0rhbsc.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp5f0rhbsc.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp5f0rhbsc.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp5f0rhbsc.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmp5f0rhbsc.cpp: In function 'int main()':\n/tmp/tmp5f0rhbsc.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5f0rhbsc.cpp:2:\n/tmp/tmp5f0rhbsc.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp5f0rhbsc.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp5f0rhbsc.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5f0rhbsc.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp5f0rhbsc.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \              "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i: l) {\n        if (i > 0) {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpljzy9fog.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpljzy9fog.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i: l) {\n               ^\n/tmp/tmpljzy9fog.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpljzy9fog.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpljzy9fog.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpljzy9fog.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpljzy9fog.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpljzy9fog.cpp: In function 'int main()':\n/tmp/tmpljzy9fog.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpljzy9fog.cpp:2:\n/tmp/tmpljzy9fog.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpljzy9fog.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpljzy9fog.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpljzy9fog.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpljzy9fog.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gub4vsl.cpp: In function 'int main()':\n/tmp/tmp9gub4vsl.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gub4vsl.cpp:2:\n/tmp/tmp9gub4vsl.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp9gub4vsl.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp9gub4vsl.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9gub4vsl.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9gub4vsl.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp9gub4vsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nsas4mf.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp4nsas4mf.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmp4nsas4mf.cpp: In function 'int main()':\n/tmp/tmp4nsas4mf.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nsas4mf.cpp:2:\n/tmp/tmp4nsas4mf.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4nsas4mf.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp4nsas4mf.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (auto\
    \ i : l) {\n    if (i > 0) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps4zdpf2t.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmps4zdpf2t.cpp:10:13: error: 'i' does not name a type\n   for\
    \ (auto i : l) {\n             ^\n/tmp/tmps4zdpf2t.cpp:15:3: error: expected ';'\
    \ before 'return'\n   return result;\n   ^\n/tmp/tmps4zdpf2t.cpp:15:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmps4zdpf2t.cpp:15:3: error:\
    \ expected ';' before 'return'\n/tmp/tmps4zdpf2t.cpp:15:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmps4zdpf2t.cpp:15:3: error: expected ')' before 'return'\n\
    /tmp/tmps4zdpf2t.cpp: In function 'int main()':\n/tmp/tmps4zdpf2t.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps4zdpf2t.cpp:2:\n/tmp/tmps4zdpf2t.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmps4zdpf2t.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmps4zdpf2t.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps4zdpf2t.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmps4zdpf2t.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqvie6ia.cpp: In function 'int main()':\n/tmp/tmpuqvie6ia.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuqvie6ia.cpp:2:\n/tmp/tmpuqvie6ia.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpuqvie6ia.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpuqvie6ia.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuqvie6ia.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpuqvie6ia.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpuqvie6ia.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nsas4mf.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp4nsas4mf.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp4nsas4mf.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmp4nsas4mf.cpp: In function 'int main()':\n/tmp/tmp4nsas4mf.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nsas4mf.cpp:2:\n/tmp/tmp4nsas4mf.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp4nsas4mf.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4nsas4mf.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp4nsas4mf.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr86o1wp.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpyr86o1wp.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyr86o1wp.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyr86o1wp.cpp: In function 'int main()':\n/tmp/tmpyr86o1wp.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr86o1wp.cpp:2:\n/tmp/tmpyr86o1wp.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpyr86o1wp.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyr86o1wp.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyr86o1wp.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
