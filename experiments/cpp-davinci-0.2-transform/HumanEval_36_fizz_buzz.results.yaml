language: cpp
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long j =\
    \ i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n      \
    \              count++;\n                }\n                j /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp != 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count += 1;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzbqn64t: /tmp/tmpwzbqn64t.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count += 1;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzbqn64t: /tmp/tmpwzbqn64t.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 7; i < n;\
    \ i += 11) {\n    if (i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpxp84i_6z: /tmp/tmpxp84i_6z.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong num = i;\n\t\t\twhile\
    \ (num > 0) {\n\t\t\t\tif (num % 10 == 7) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\
    \t\t\tnum /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            if (i %\
    \ 10 == 7) {\n                count++;\n            }\n            if (i / 10\
    \ == 7) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmppwl6qou_: /tmp/tmppwl6qou_.cpp:30: int main(): Assertion `candidate((200))
    == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            long\
    \ num = i;\n            while (num > 0) {\n                if (num % 10 == 7)\
    \ {\n                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp != 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for (int j = 0; j < s.length(); j++) {\n        if (s[j] == '7') {\n  \
    \        count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    int count = 0;\n    for(int i = 7; i < n;\
    \ i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            std::string str\
    \ = std::to_string(i);\n            for(int j = 0; j < str.length(); j++) {\n\
    \                if(str[j] == '7') {\n                    count++;\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn21px8k: /tmp/tmpzn21px8k.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (auto c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn21px8k: /tmp/tmpzn21px8k.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn21px8k: /tmp/tmpzn21px8k.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn21px8k: /tmp/tmpzn21px8k.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpzn21px8k: /tmp/tmpzn21px8k.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp != 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long number\
    \ = i;\n            while (number > 0) {\n                if (number % 10 == 7)\
    \ {\n                    count++;\n                }\n                number /=\
    \ 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && i % 10 == 7) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmp2aknz23f: /tmp/tmp2aknz23f.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        if (i % 11 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpk7vi0r37: /tmp/tmpk7vi0r37.cpp:25: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n\tlong count = 0;\n\tfor (long i = 7; i < n;\
    \ i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tlong temp = i;\n\t\t\t\
    while (temp != 0) {\n\t\t\t\tif (temp % 10 == 7) {\n\t\t\t\t\tcount++;\n\t\t\t\
    \t}\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        if (i % 11 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpk7vi0r37: /tmp/tmpk7vi0r37.cpp:25: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num != 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count += 1;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzbqn64t: /tmp/tmpwzbqn64t.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 11; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            int\
    \ temp = i;\n            while (temp > 0) {\n                if (temp % 10 ==\
    \ 7) {\n                    count++;\n                }\n                temp\
    \ /= 10;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 0; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 7; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n\
    \      for (int j = 0; j < s.length(); j++) {\n        if (s[j] == '7') {\n  \
    \        count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long j =\
    \ i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n      \
    \              count++;\n                }\n                j /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063208
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        if (i % 11 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpk7vi0r37: /tmp/tmpk7vi0r37.cpp:25: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (long i = 1; i < n;\
    \ i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string str = std::to_string(i);\n\
    \      for (int j = 0; j < str.length(); j++) {\n        if (str[j] == '7') {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num != 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp != 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        else {\n            long temp = i;\n            while (temp > 0) {\n\
    \                if (temp % 10 == 7) {\n                    count++;\n       \
    \             break;\n                }\n                temp /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: Exception
  stderr: 'tmpb3nnxqt9: /tmp/tmpb3nnxqt9.cpp:31: int main(): Assertion `candidate((50))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        if (i % 11 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpk7vi0r37: /tmp/tmpk7vi0r37.cpp:25: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count++;\n        }\n\
    \        if (i % 11 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  status: Exception
  stderr: 'tmpk7vi0r37: /tmp/tmpk7vi0r37.cpp:25: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063208
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num != 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063207
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (char c : s) {\n                if (c\
    \ == '7') {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (int j = 0; j < str.length(); j++)\
    \ {\n                if (str[j] == '7') {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ str = std::to_string(i);\n            for (char c : str) {\n               \
    \ if (c == '7') {\n                    count++;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string\
    \ s = std::to_string(i);\n            for (int j = 0; j < s.length(); j++) {\n\
    \                if (s[j] == '7') {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long temp\
    \ = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n\
    \                    count++;\n                }\n                temp /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i += 11) {\n        if (i % 13 == 0) {\n            count += 1;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  status: Exception
  stderr: 'tmpwzbqn64t: /tmp/tmpwzbqn64t.cpp:22: int main(): Assertion `candidate((78))
    == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num\
    \ = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n\
    \                    count++;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n\
    // (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i\
    \ < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long j =\
    \ i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n      \
    \              count++;\n                }\n                j /= 10;\n       \
    \     }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660063206
