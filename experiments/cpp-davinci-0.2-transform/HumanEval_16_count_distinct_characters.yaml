name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"\
  xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong\
  \ count_distinct_characters(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    // Your code goes here\n    long count=0;\n    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count=s.size();\n    return count;", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++){\n        s.insert(tolower(string[i]));\n    }\n   \
    \ return s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> char_set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n  \
    \  }\n    return char_set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  // your\
    \ code goes here\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  std::set<char> s;\n  for(int i=0;i<string.length();i++)\n  {\n\
    \    s.insert(string[i]);\n  }\n  return s.size();", "    long count = 0;\n  \
    \  std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n       \
    \ s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(auto i : string) {\n        s.insert(tolower(i));\n    }\n    return s.size();",
  "    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "  // your code goes here\n  long count = 0;\n\
    \  std::set<char> s;\n  for(int i = 0; i < string.length(); i++){\n    s.insert(tolower(string[i]));\n\
    \  }\n  count = s.size();\n  return count;", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(char c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(string[i]);\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(s.find(string[i]) ==\
    \ s.end()) {\n            s.insert(string[i]);\n            count++;\n       \
    \ }\n    }\n    return count;", "    long count = 0;\n    std::vector<char> v;\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(std::find(v.begin(),\
    \ v.end(), string[i]) == v.end()){\n            v.push_back(string[i]);\n    \
    \        count++;\n        }\n    }\n    return count;", "    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "  long count = 0;\n  std::set<char> s;\n  for(int\
    \ i = 0; i < string.length(); i++) {\n    s.insert(tolower(string[i]));\n  }\n\
    \  return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    std::set<char> s;\n    for(auto c: string)\n        s.insert(tolower(c));\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(string[i]);\n\
    \    }\n    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        if(s.find(string[i]) == s.end()) {\n            s.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> distinct_characters;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(string[i]);\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "  // your code goes\
    \ here\n  long count=0;\n  for(int i=0;i<string.length();i++)\n  {\n    if(string[i]!='\
    \ ')\n    {\n      count++;\n      for(int j=i+1;j<string.length();j++)\n    \
    \  {\n        if(string[i]==string[j])\n        {\n          string[j]=' ';\n\
    \        }\n      }\n    }\n  }\n  return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    std::set<char> charSet;\n    for (char c : string)\
    \ {\n        charSet.insert(tolower(c));\n    }\n    return charSet.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    long count = 0;\n    std::set<char> s;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(string[i]);\n    }\n    return set.size();", "  \
    \  long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(s.find(string[i]) == s.end()) {\n            s.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "    // your code\
    \ goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", " \
    \   std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Your code goes here\n    long count=0;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>=65 && string[i]<=90)\n\
    \        {\n            string[i]=string[i]+32;\n        }\n    }\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        for(int j=i+1;j<string.length();j++)\n\
    \        {\n            if(string[i]==string[j])\n            {\n            \
    \    string[j]='*';\n            }\n        }\n    }\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]!='*')\n        {\n            count++;\n        }\n\
    \    }\n    return count;", "    std::unordered_set<char> set;\n    for (char\
    \ c : string) {\n        set.insert(tolower(c));\n    }\n    return set.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(char c : string)\n        s.insert(tolower(c));\n\
    \    return s.size();", "    std::set<char> char_set;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n    }\n\
    \    return char_set.size();", "  long count = 0;\n  std::set<char> s;\n  for(char\
    \ c : string) {\n    s.insert(tolower(c));\n  }\n  return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "\tlong count = 0;\n\tstd::set<char> s;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\tcount = s.size();\n\treturn count;", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    long count = 0;\n\
    \    std::unordered_set<char> s;\n    for(int i = 0; i < string.length(); i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "  std::set<char> s;\n  for(int i=0;i<string.length();i++){\n\
    \    s.insert(string[i]);\n  }\n  return s.size();", "    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "\tstd::set<char> s;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\ts.insert(string[i]);\n\t}\n\treturn s.size();", "    long count = 0;\n   \
    \ std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(char c : string)\n        s.insert(tolower(c));\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s(string.begin(), string.end());\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z'){\n            count++;\n        }\n        else\
    \ if(string[i] >= 'A' && string[i] <= 'Z'){\n            count++;\n        }\n\
    \    }\n    return count;", "  // your code goes here\n  std::set<char> s;\n \
    \ for(int i=0;i<string.length();i++)\n  {\n    s.insert(string[i]);\n  }\n  return\
    \ s.size();", "  long count = 0;\n  std::unordered_set<char> set;\n  for (int\
    \ i = 0; i < string.length(); i++) {\n    set.insert(tolower(string[i]));\n  }\n\
    \  return set.size();", "    // your code goes here\n    long count = 0;\n   \
    \ std::string s = \"\";\n    for(int i = 0; i < string.length(); i++){\n     \
    \   if(s.find(tolower(string[i])) == std::string::npos){\n            s += tolower(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "    // your code\
    \ goes here\n    long count = 0;\n    std::map<char, int> m;\n    for(int i =\
    \ 0; i < string.length(); i++) {\n        char c = string[i];\n        if(m.find(c)\
    \ == m.end()) {\n            m[c] = 1;\n            count++;\n        }\n    }\n\
    \    return count;", "    // your code goes here\n    long count = 0;\n    std::string::iterator\
    \ it;\n    std::set<char> s;\n    for(it = string.begin(); it != string.end();\
    \ it++)\n    {\n        s.insert(tolower(*it));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // Your code\
    \ goes here\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++){\n        s.insert(string[i]);\n    }\n    count = s.size();\n\
    \    return count;", "    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(string[i]);\n    }\n  \
    \  return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "  long count = 0;\n  std::set<char> s;\n  for(int\
    \ i = 0; i < string.length(); i++) {\n    s.insert(tolower(string[i]));\n  }\n\
    \  return s.size();", "    // your code goes here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++){\n        s.insert(string[i]);\n    }\n    count = s.size();\n\
    \    return count;", "    // your code goes here\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    long count = 0;\n    std::vector<char> v;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        if(std::find(v.begin(), v.end(),\
    \ string[i]) == v.end()){\n            v.push_back(string[i]);\n            count++;\n\
    \        }\n    }\n    return count;", "    // Your code here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n \
    \   {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", " \
    \   std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code here\n    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    //\
    \ your code goes here\n    long count = 0;\n    std::string temp = \"\";\n   \
    \ for(long i = 0; i < string.length(); i++){\n        if(temp.find(tolower(string[i]))\
    \ == std::string::npos){\n            temp += tolower(string[i]);\n          \
    \  count++;\n        }\n    }\n    return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::string s = \"\"\
    ;\n    for(int i = 0; i < string.length(); i++){\n        if(s.find(tolower(string[i]))\
    \ == std::string::npos){\n            s += tolower(string[i]);\n            count++;\n\
    \        }\n    }\n    return count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "  // your code goes here\n  long count = 0;\n\
    \  std::set<char> s;\n  for(int i = 0; i < string.length(); i++){\n    s.insert(tolower(string[i]));\n\
    \  }\n  count = s.size();\n  return count;", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int i = 0;\
    \ i < string.length(); i++) {\n        if(s.find(string[i]) == s.end()) {\n  \
    \          s.insert(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n \
    \       s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "\tstd::set<char>\
    \ s;\n\tfor(int i=0;i<string.length();i++){\n\t\ts.insert(string[i]);\n\t}\n\t\
    return s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int i\
    \ = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n  \
    \  }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (auto\
    \ i : string) {\n        s.insert(i);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Your code here\n    long count = 0;\n \
    \   std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n       \
    \ s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long count\
    \ = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  \
    \  std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    long count = 0;\n\
    \    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n      \
    \  s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long count\
    \ = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    long\
    \ count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++)\
    \ {\n        s.insert(string[i]);\n    }\n    count = s.size();\n    return count;",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();", "    std::set<char> s;\n    for(char\
    \ c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();",
  "    std::set<char> distinct_characters;\n    for (char character : string) {\n\
    \        distinct_characters.insert(std::tolower(character));\n    }\n    return\
    \ distinct_characters.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // your code goes here\n    long count = 0;\n\
    \    std::string temp = \"\";\n    for(int i = 0; i < string.length(); i++){\n\
    \        if(temp.find(tolower(string[i])) == std::string::npos){\n           \
    \ temp += tolower(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n \
    \       s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();"]
stop_tokens:
- "\n}"
