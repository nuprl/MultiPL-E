name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"\
  xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong\
  \ count_distinct_characters(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    // Your code goes here\n    long count=0;\n    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count=s.size();\n    return count;", "    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i\
    \ < string.length(); i++){\n        s.insert(tolower(string[i]));\n    }\n   \
    \ return s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> char_set;\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n  \
    \  }\n    return char_set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "  // your\
    \ code goes here\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  std::set<char> s;\n  for(int i=0;i<string.length();i++)\n  {\n\
    \    s.insert(string[i]);\n  }\n  return s.size();", "    long count = 0;\n  \
    \  std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n       \
    \ s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();"]
stop_tokens:
- "\n}"
