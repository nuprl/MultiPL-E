language: cpp
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pyinxha.cpp: In function 'int main()':\n/tmp/tmp1pyinxha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/tmp/tmp1pyinxha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp1pyinxha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1pyinxha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk4zkfiz9.cpp: In function 'int main()':\n/tmp/tmpk4zkfiz9.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk4zkfiz9.cpp:2:\n/tmp/tmpk4zkfiz9.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpk4zkfiz9.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpk4zkfiz9.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpk4zkfiz9.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk4zkfiz9.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk4zkfiz9.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpk4zkfiz9.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpk4zkfiz9.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpk4zkfiz9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0k1dzjf.cpp: In function 'int main()':\n/tmp/tmpm0k1dzjf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm0k1dzjf.cpp:2:\n/tmp/tmpm0k1dzjf.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm0k1dzjf.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm0k1dzjf.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm0k1dzjf.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm0k1dzjf.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm0k1dzjf.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm0k1dzjf.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm0k1dzjf.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm0k1dzjf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pyinxha.cpp: In function 'int main()':\n/tmp/tmp1pyinxha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/tmp/tmp1pyinxha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp1pyinxha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1pyinxha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt7t6so_1.cpp: In function 'int main()':\n/tmp/tmpt7t6so_1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt7t6so_1.cpp:2:\n/tmp/tmpt7t6so_1.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpt7t6so_1.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpt7t6so_1.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpt7t6so_1.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt7t6so_1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt7t6so_1.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt7t6so_1.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpt7t6so_1.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpt7t6so_1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pyinxha.cpp: In function 'int main()':\n/tmp/tmp1pyinxha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/tmp/tmp1pyinxha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp1pyinxha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1pyinxha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pyinxha.cpp: In function 'int main()':\n/tmp/tmp1pyinxha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/tmp/tmp1pyinxha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp1pyinxha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1pyinxha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(getline(ss, token, ' ')) {\n  \
    \      result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6gbddql.cpp: In function 'int main()':\n/tmp/tmpo6gbddql.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6gbddql.cpp:2:\n/tmp/tmpo6gbddql.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpo6gbddql.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpo6gbddql.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpo6gbddql.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpo6gbddql.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6gbddql.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpo6gbddql.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpo6gbddql.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpo6gbddql.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pyinxha.cpp: In function 'int main()':\n/tmp/tmp1pyinxha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/tmp/tmp1pyinxha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp1pyinxha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1pyinxha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1pyinxha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp1pyinxha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp1pyinxha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kt7iqsl.cpp: In function 'int main()':\n/tmp/tmp3kt7iqsl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/tmp/tmp3kt7iqsl.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp3kt7iqsl.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3kt7iqsl.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3kt7iqsl.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp3kt7iqsl.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp3kt7iqsl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
