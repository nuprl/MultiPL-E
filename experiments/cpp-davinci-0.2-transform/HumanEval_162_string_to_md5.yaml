name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  // >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \nstd::optional<std::string> string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n"
completions: ["    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ hash_text;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash_array;\n    md5::md5(text.c_str(), text.length(),\
    \ hash_array.data());\n    for(auto i : hash_array)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(i);\n    hash_text = ss.str();\n    return hash_text;",
  "    if(text.empty()) return std::nullopt;\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto i : hash)\n        ss << std::setw(2) << int(i);\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t, 16> hash;\n\
    \    md5(reinterpret_cast<const std::uint8_t*>(text.data()), text.size(), hash.data());\n\
    \    for(auto byte : hash)\n        ss << std::setw(2) << static_cast<int>(byte);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) ss << std::setw(2) << (int)i;\n    return ss.str();",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return mdString;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    std::array<char,\
    \ 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5_byte_t *)text.c_str(), text.size());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for (int i = 0; i < 16; i++)\n        ss << std::setw(2)\
    \ << (int)hash[i];\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_str;\n\
    \    md5::md5(text.c_str(), text.length(), hash.data());\n    for(int i = 0; i\
    \ < 16; ++i)\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \    ss >> hex_str.data();\n    return std::string(hex_str.data());", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto c : hash) {\n        ss << std::setw(2)\
    \ << (int)c;\n    }\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n\
    \    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n   \
    \ MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string hash;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest.data(),\
    \ &ctx);\n    for(auto i : digest)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    hash = ss.str();\n    return hash;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(unsigned char c : hash)\n        ss << std::setw(2)\
    \ << (int)c;\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \ if (text.empty()) {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string result;\n    for(int\
    \ i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n    }\n\
    \    ss >> result;\n    return result;", "    // your code goes here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto& i : hash) {\n        ss << std::setw(2) << static_cast<unsigned\
    \ int>(i);\n    }\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string md5_hash;\n    std::stringstream ss;\n    ss\
    \ << std::hex << std::setfill('0');\n    for(auto i : md5(text))\n        ss <<\
    \ std::setw(2) << static_cast<int>(i);\n    md5_hash = ss.str();\n    return md5_hash;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;"]
stop_tokens:
- "\n}"
