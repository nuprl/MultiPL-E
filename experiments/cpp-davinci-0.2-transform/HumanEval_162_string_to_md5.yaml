name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  // >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \nstd::optional<std::string> string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n"
completions: ["    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ hash_text;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash_array;\n    md5::md5(text.c_str(), text.length(),\
    \ hash_array.data());\n    for(auto i : hash_array)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(i);\n    hash_text = ss.str();\n    return hash_text;",
  "    if(text.empty()) return std::nullopt;\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto i : hash)\n        ss << std::setw(2) << int(i);\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t, 16> hash;\n\
    \    md5(reinterpret_cast<const std::uint8_t*>(text.data()), text.size(), hash.data());\n\
    \    for(auto byte : hash)\n        ss << std::setw(2) << static_cast<int>(byte);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) ss << std::setw(2) << (int)i;\n    return ss.str();",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return mdString;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    std::array<char,\
    \ 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5_byte_t *)text.c_str(), text.size());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for (int i = 0; i < 16; i++)\n        ss << std::setw(2)\
    \ << (int)hash[i];\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_str;\n\
    \    md5::md5(text.c_str(), text.length(), hash.data());\n    for(int i = 0; i\
    \ < 16; ++i)\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \    ss >> hex_str.data();\n    return std::string(hex_str.data());", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto c : hash) {\n        ss << std::setw(2)\
    \ << (int)c;\n    }\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n\
    \    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n   \
    \ MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string hash;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest.data(),\
    \ &ctx);\n    for(auto i : digest)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    hash = ss.str();\n    return hash;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(unsigned char c : hash)\n        ss << std::setw(2)\
    \ << (int)c;\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \ if (text.empty()) {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string result;\n    for(int\
    \ i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n    }\n\
    \    ss >> result;\n    return result;", "    // your code goes here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto& i : hash) {\n        ss << std::setw(2) << static_cast<unsigned\
    \ int>(i);\n    }\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string md5_hash;\n    std::stringstream ss;\n    ss\
    \ << std::hex << std::setfill('0');\n    for(auto i : md5(text))\n        ss <<\
    \ std::setw(2) << static_cast<int>(i);\n    md5_hash = ss.str();\n    return md5_hash;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    // Your code here\n    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::hash<std::string>{}(text);\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto& i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    md5::md5(text.c_str(),\
    \ text.length(), hash.data());\n    for(auto c : hash)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(c);\n    return ss.str();", "    if(text.length() ==\
    \ 0)\n        return std::nullopt;\n    std::string result;\n    unsigned char\
    \ digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n \
    \        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = mdString;\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n\
    \        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n    return\
    \ std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    // Your code here\n    if(text.empty())\n\
    \        return {};\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char buf[2];\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    {\n     \
    \   sprintf(buf,\"%02x\", digest[i]);\n        result += buf;\n    }\n    return\
    \ result;", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    // Your code here\n    if(text.empty())\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    for(auto i : md5(text)) {\n        ss << std::setw(2) << static_cast<int>(i);\n\
    \    }\n    ss >> hash;\n    return hash;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    for(unsigned char c : md5(text)) {\n        ss << std::setw(2)\
    \ << static_cast<int>(c);\n    }\n    ss >> result;\n    return result;", "  \
    \  if(text.empty())\n        return std::nullopt;\n    std::string hash = \"\"\
    ;\n    std::string hex = \"0123456789abcdef\";\n    std::array<unsigned char,\
    \ 16> md5_bytes;\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx,\
    \ text.c_str(), text.size());\n    MD5_Final(md5_bytes.data(), &ctx);\n    for(int\
    \ i = 0; i < 16; i++) {\n        hash += hex[md5_bytes[i] >> 4];\n        hash\
    \ += hex[md5_bytes[i] & 0xf];\n    }\n    return hash;", "  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex\
    \ << std::setfill('0');\n  std::array<unsigned char, 16> digest;\n  MD5((const\
    \ unsigned char *)text.c_str(), text.size(), digest.data());\n  for (int i = 0;\
    \ i < 16; i++) {\n    ss << std::setw(2) << (int)digest[i];\n  }\n  return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    for(int i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n\
    \    }\n    ss >> hash;\n    return hash;", "    // your code goes here\n    if(text.empty())\n\
    \        return {};\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    for(unsigned char c : md5(text)) {\n        ss << std::setw(2)\
    \ << static_cast<int>(c);\n    }\n    ss >> result;\n    return result;", "  \
    \  if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string hash;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    for(int i = 0; i < 16; i++) {\n\
    \        ss << std::setw(2) << (int)text[i];\n    }\n    ss >> hash;\n    return\
    \ hash;", "    if(text.empty())\n        return std::nullopt;\n    unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    // your code here\n    if(text.empty())\n        return std::nullopt;\n   \
    \ std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ md5_str;\n    std::string md5_hex;\n    std::string md5_hex_final;\n    md5::md5_state_s\
    \ state;\n    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5::md5_byte_t\
    \ *)text.c_str(), text.length());\n    md5::md5_finish(&state, (md5::md5_byte_t\
    \ *)md5_str.c_str());\n    for(int i = 0; i < 16; i++)\n    {\n        ss << std::setw(2)\
    \ << (int)md5_str[i];\n    }\n    ss >> md5_hex;\n    for(int i = 0; i < 32; i++)\n\
    \    {\n        md5_hex_final.push_back(md5_hex[i]);\n    }\n    return md5_hex_final;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   // your code here\n    if(text.empty())\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n  char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \  buf[2*MD5_DIGEST_LENGTH] = '\\0';\n  for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    sprintf((char*)&(buf[i*2]), \"%02x\", (unsigned int)digest[i]);\n\
    \  }\n  result = std::string(buf);\n  return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    std::string\
    \ result;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n   \
    \ ss >> result;\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    for(int i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n\
    \    }\n    ss >> result;\n    return result;", "    if(text.empty())\n      \
    \  return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto c : hash) {\n        ss << std::setw(2) << (int)c;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ hash = std::to_string(std::hash<std::string>{}(text));\n    return hash;", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string hash;\n    for(int\
    \ i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n    }\n\
    \    ss >> hash;\n    return hash;", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ byte : hash)\n        ss << std::setw(2) << (int)byte;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    return std::string(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    );", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n  char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \  buf[2*MD5_DIGEST_LENGTH] = '\\0';\n  for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++) {\n    sprintf((char*)&(buf[i*2]), \"%02x\", (unsigned int)digest[i]);\n\
    \  }\n  result = std::string(buf);\n  return result;", "    if(text.empty()) return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::string result;\n    for(auto i : md5(text)) {\n        ss << std::setw(2)\
    \ << static_cast<int>(i);\n    }\n    ss >> result;\n    return result;", "  \
    \  if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    for(int i = 0; i < text.size(); i++) {\n        ss << std::setw(2)\
    \ << (int)text[i];\n    }\n    ss >> result;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string res = \"\"\
    ;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    res = mdString;\n    return res;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<uint8_t, 16> hash;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5::md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    return ss.str();", "  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty()) return std::nullopt;\n    std::string result;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_digest;\n    std::fill(hex_digest.begin(), hex_digest.end(),\
    \ '\\0');\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5_byte_t *)text.c_str(), text.length());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for(size_t i = 0; i < hash.size(); ++i) {\n        ss <<\
    \ std::setw(2) << static_cast<unsigned>(hash[i]);\n    }\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::uppercase << std::setfill('0');\n    std::string hash\
    \ = \"\";\n    std::string s = \"\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    for(int i =\
    \ 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::setw(2) << (int)result[i];\n\
    \    }\n    hash = ss.str();\n    return hash;", "    if(text.empty())\n     \
    \   return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto b : hash)\n        ss << std::setw(2)\
    \ << (int)b;\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    for(auto i : md5(text)) {\n        ss << std::setw(2) << (int)i;\n\
    \    }\n    ss >> hash;\n    return hash;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "\tif (text.empty()) {\n\t\treturn std::nullopt;\n\t}\n\tstd::string result;\n\t\
    unsigned char digest[MD5_DIGEST_LENGTH];\n\tMD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n\tchar mdString[33];\n\tfor (int i =\
    \ 0; i < 16; i++)\n\t\tsprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n\
    \tresult = mdString;\n\treturn result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    ss.read(hex_str.data(), 32);\n\
    \    hex_str[32] = '\\0';\n    return std::string(hex_str.data());", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(int i = 0; i < 16; i++) {\n        ss <<\
    \ std::setw(2) << (int)hash[i];\n    }\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::string result;\n   \
    \ for(unsigned char c : md5(text)) {\n        ss << std::setw(2) << static_cast<int>(c);\n\
    \    }\n    ss >> result;\n    return result;", "    if(text.empty())\n      \
    \  return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX\
    \ ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string md5_hash;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    for(auto i : std::array<unsigned char, 16>{}) {\n        ss << std::setw(2)\
    \ << i;\n    }\n    md5_hash = ss.str();\n    return md5_hash;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    md5::md5(text.c_str(), text.length(), hash.data());\n    for (int i = 0;\
    \ i < 16; ++i) {\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash_bytes;\n  \
    \  md5::md5(text.c_str(), text.length(), hash_bytes.data());\n    for (auto b\
    \ : hash_bytes) {\n        ss << std::setw(2) << static_cast<unsigned>(b);\n \
    \   }\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n   \
    \ std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::string output;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)digest[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.length(), (unsigned char*)&digest);\n    for(int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << (int)digest[i];\n    result = ss.str();\n    return\
    \ result;", "    if(text.empty()) return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n  \
    \  MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int\
    \ i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)hash[i];\n    }\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_output;\n    md5::md5_state_s state;\n\
    \    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5_byte_t *)text.c_str(),\
    \ text.length());\n    md5::md5_finish(&state, hash.data());\n    for (int di\
    \ = 0; di < 16; ++di)\n        ss << std::setw(2) << static_cast<unsigned>(hash[di]);\n\
    \    std::string md5_str = ss.str();\n    return md5_str;", "  // your code here\n\
    \  if(text.length() == 0)\n    return {};\n  std::stringstream ss;\n  ss << std::hex\
    \ << std::hash<std::string>{}(text);\n  return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string digest;\n    digest.resize(16);\n\
    \    MD5((const unsigned char *)text.c_str(), text.size(), (unsigned char *)digest.data());\n\
    \    return digest;", "    if(text.empty())\n        return std::nullopt;\n  \
    \  std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5((unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n   \
    \ return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> md5_digest;\n    MD5((const unsigned char*)text.c_str(), text.size(), md5_digest.data());\n\
    \    for(auto c : md5_digest) {\n        ss << std::setw(2) << (int)c;\n    }\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t,\
    \ 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n    for\
    \ (auto i : hash) {\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string hash = std::string(MD5(text.c_str(),\
    \ text.length(), 0));\n    return hash;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto& i : hash)\n        ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "  if (text.empty())\
    \ {\n    return std::nullopt;\n  }\n  unsigned char result[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), result);\n  std::stringstream\
    \ ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex <<\
    \ std::setw(2) << std::setfill('0') << (int)result[i];\n  }\n  return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();", " \
    \ if (text.empty()) {\n    return std::nullopt;\n  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    return ss.str();", "    if(text.length()\
    \ == 0)\n        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex\
    \ << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    std::array<char,\
    \ 33> hash_string;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n\
    \    md5::md5_finish(&state, hash.data());\n    for(int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    std::stringstream ss;\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto c : hash)\n        ss << std::hex << std::setw(2) << std::setfill('0')\
    \ << (int)c;\n    result = ss.str();\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto& i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    // your code\
    \ goes here\n    if(text.empty())\n        return {};\n    std::stringstream ss;\n\
    \    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty()) return std::nullopt;\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    for(auto i : md5(text)) {\n        ss << std::setw(2) << (int)i;\n\
    \    }\n    ss >> hash;\n    return hash;", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    // your code here\n\
    \    if(text.length()==0)\n        return {};\n    std::stringstream ss;\n   \
    \ ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    md5((unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   // your code here\n    if(text.empty())\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    for(int i =\
    \ 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::setw(2) << (int)result[i];\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream ss;\n\
    \  ss << std::hex << std::setfill('0');\n  std::array<unsigned char, 16> hash;\n\
    \  md5::md5(text.c_str(), text.size(), hash.data());\n  for (auto byte : hash)\
    \ {\n    ss << std::setw(2) << static_cast<unsigned int>(byte);\n  }\n  return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    md5::md5(text.c_str(), text.length(),\
    \ hash.data());\n    for (auto c : hash) {\n        ss << std::setw(2) << static_cast<unsigned>(c);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \ if (text.empty()) return std::nullopt;\n  std::string digest;\n  digest.resize(16);\n\
    \  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), text.size());\n\
    \  MD5_Final((unsigned char*)digest.data(), &ctx);\n  std::stringstream ss;\n\
    \  for (int i = 0; i < 16; ++i) {\n    ss << std::hex << std::setw(2) << std::setfill('0')\
    \ << (int)digest[i];\n  }\n  return ss.str();", "    if(text.empty())\n      \
    \  return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string hash = \"\"\
    ;\n    std::string hex = \"0123456789abcdef\";\n    std::array<int, 16> x = {0};\n\
    \    std::array<int, 4> k = {0};\n    std::array<int, 4> s = {7, 12, 17, 22};\n\
    \    std::array<int, 4> p = {0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476};\n\
    \    std::array<int, 64> t = {0};\n    for(int i = 0; i < 64; i++) {\n       \
    \ t[i] = (int)floor(pow(2, 32) * abs(sin(i + 1)));\n    }\n    for(int i = 0;\
    \ i < text.length(); i++) {\n        x[i >> 2] |= (int)text[i] << ((i % 4) * 8);\n\
    \    }\n    x[text.length() >> 2] |= 0x80 << (((text.length() % 4)) * 8);\n  \
    \  x[14] = text.length() * 8;\n    for(int i = 0; i < 64; i++) {\n        int\
    \ a = p[0], b = p[1], c = p[2], d = p[3];\n        k[0] = a;\n        k[1] = b;\n\
    \        k[2] = c;\n        k[3] = d;\n        int f, g;\n        if(i < 16) {\n\
    \            f = (b & c) | ((~b) & d);\n            g = i;\n        } else if(i\
    \ < 32) {\n            f = (d & b) | ((~d) & c);\n            g = (5 * i + 1)\
    \ % 16;\n        } else if(i < 48) {\n            f = b ^ c ^ d;\n           \
    \ g = (3 * i + 5) % 16;\n        } else {\n            f = c ^ (b | (~d));\n \
    \           g = (7 * i) % 16;\n        }", "    // Your code here\n    if(text.length()==0)\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int\
    \ i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n    return\
    \ ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return\
    \ ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "  // Your code here\n  if(text.empty())\n\
    \    return {};\n  std::stringstream ss;\n  ss << std::hex << std::hash<std::string>{}(text);\n\
    \  return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto c : hash) {\n        ss << std::setw(2) << (int)c;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    md5::md5_state_s\
    \ state;\n    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5_byte_t\
    \ *)text.c_str(), text.size());\n    md5::md5_finish(&state, hash.data());\n \
    \   for(auto& byte : hash) {\n        ss << std::setw(2) << static_cast<unsigned>(byte);\n\
    \    }\n    return ss.str();", "\tif (text.empty()) {\n\t\treturn std::nullopt;\n\
    \t}\n\tstd::string result;\n\tstd::stringstream ss;\n\tss << std::hex << std::setfill('0');\n\
    \tstd::array<unsigned char, 16> hash;\n\tstd::array<char, 33> hex_digits = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n\
    \tMD5((const unsigned char *) text.c_str(), text.size(), hash.data());\n\tfor\
    \ (int i = 0; i < 16; i++) {\n\t\tss << std::setw(2) << (int) hash[i];\n\t}\n\t\
    result = ss.str();\n\treturn result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n\
    \    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5_byte_t *)text.c_str(),\
    \ text.size());\n    md5::md5_finish(&state, hash.data());\n    for(int i = 0;\
    \ i < 16; ++i) {\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    for(unsigned char c : md5(text))\n        ss << std::setw(2) << static_cast<int>(c);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& byte : hash) {\n        ss << std::setw(2) << static_cast<unsigned\
    \ int>(byte);\n    }\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash)\n        ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n  \
    \  MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(),\
    \ (unsigned char*)&digest);    \n    for(int i = 0; i < 16; i++)\n        ss <<\
    \ std::setw(2) << (unsigned int)digest[i];\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto c : hash)\n\
    \        ss << std::setw(2) << (int)c;\n    return ss.str();", "    if(text.empty())\
    \ return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    std::array<unsigned\
    \ char, 16>::iterator it;\n    MD5((const unsigned char*)text.c_str(), text.length(),\
    \ hash.data());\n    for(it = hash.begin(); it != hash.end(); it++)\n        ss\
    \ << std::setw(2) << (int)*it;\n    return ss.str();", "  if (text.empty()) {\n\
    \    return std::nullopt;\n  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n\
    \  std::array<unsigned char, 16> hash{};\n  std::array<char, 33> hex_str{};\n\
    \  md5::md5_state_s state{};\n  md5::md5_init(&state);\n  md5::md5_append(&state,\
    \ (const md5::md5_byte_t *)text.c_str(), text.size());\n  md5::md5_finish(&state,\
    \ hash.data());\n  for (int i = 0; i < 16; i++) {\n    ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \  }\n  return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \ if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n\
    \  unsigned char digest[MD5_DIGEST_LENGTH];\n  char mdString[33];\n  MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n  for (int i = 0;\
    \ i < 16; i++) {\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n\
    \  }\n  result = mdString;\n  return result;", "    if(text.empty())\n       \
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::string hash;\n    for(int i=0;i<16;i++) {\n        ss << std::setw(2)\
    \ << (int)text[i];\n    }\n    ss >> hash;\n    return hash;", "    if(text.empty())\
    \ return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \    char buf[2*MD5_DIGEST_LENGTH+1];\n    buf[2*MD5_DIGEST_LENGTH] = 0;\n   \
    \ for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(buf+i*2, \"%02x\"\
    , digest[i]);\n    result = std::string(buf);\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    // Your code here\n    if(text.length()==0)\n\
    \        return {};\n    std::string s = \"\";\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n\
    \        s+=std::to_string(result[i]);\n    return s;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string result;\n    std::array<uint8_t,\
    \ 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << static_cast<int>(i);\n    ss >> result;\n\
    \    return result;", "    if(text.empty())\n        return std::nullopt;\n  \
    \  std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> digest;\n\
    \    std::string result;\n    MD5((const unsigned char*)text.c_str(), text.size(),\
    \ digest.data());\n    for(auto i : digest)\n        ss << std::setw(2) << (int)i;\n\
    \    ss >> result;\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n\
    \    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n   \
    \ MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    std::array<unsigned char, 16> bytes;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), bytes.data());\n    for(auto byte : bytes)\n        ss << std::setw(2)\
    \ << (int)byte;\n    ss >> hash;\n    return hash;", "    if(text.empty())\n \
    \       return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    std::array<char,\
    \ 33> hex_output;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n \
    \   md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int di = 0; di < 16; ++di)\n\
    \        ss << std::setw(2) << static_cast<unsigned>(hash[di]);\n    std::string\
    \ s = ss.str();\n    return s;", "  if (text.empty()) {\n    return std::nullopt;\n\
    \  }\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n  char mdString[33];\n  for (int i =\
    \ 0; i < 16; i++)\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n\
    \  return std::string(mdString);", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n   \
    \ return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto byte : hash) {\n        ss << std::setw(2) << (int)byte;\n    }\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ result;\n    for(unsigned char c : md5(text)) {\n        ss << std::setw(2)\
    \ << static_cast<int>(c);\n    }\n    ss >> result;\n    return result;", "  \
    \  if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ byte : hash) {\n        ss << std::setw(2) << (int)byte;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int i = 0; i < 16; i++)\n\
    \        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n    return ss.str();",
  "    // your code here\n    if(text.empty())\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string hash;\n    std::string\
    \ hex_hash;\n    std::array<uint8_t, 16> hash_bytes;\n    MD5 md5;\n    md5.update(text);\n\
    \    md5.finalize();\n    hash_bytes = md5.raw_digest();\n    for(auto byte :\
    \ hash_bytes) {\n        ss << std::setw(2) << static_cast<unsigned int>(byte);\n\
    \    }\n    hex_hash = ss.str();\n    return hex_hash;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    md5::md5(text.begin(),\
    \ text.end(), hash.begin());\n    for(auto i : hash)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(i);\n    return ss.str();"]
stop_tokens:
- "\n}"
