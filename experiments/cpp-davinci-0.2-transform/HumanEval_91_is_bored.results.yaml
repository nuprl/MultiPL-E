language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::istringstream\
    \ iss(S);\n    std::string word;\n    while (iss >> word) {\n        if (word\
    \ == \"I\") {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp223l43fp: /tmp/tmp223l43fp.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkq_kf3zl: /tmp/tmpkq_kf3zl.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp79oyutgo: /tmp/tmp79oyutgo.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Your code here\n  long count = 0;\n\
    \  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word) {\n    if(word\
    \ == \"I\") {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpphn15xn7: /tmp/tmpphn15xn7.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  bool is_bored\
    \ = false;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == 'I') {\n\
    \      is_bored = true;\n    } else if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n      if (is_bored) {\n        boredoms++;\n      }\n      is_bored\
    \ = false;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6jmmz_gb: /tmp/tmp6jmmz_gb.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4gzole5w: /tmp/tmp4gzole5w.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  long count = 0;\n\
    \  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph3yky9jp: /tmp/tmph3yky9jp.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n  \
    \      if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxqk5pkqk: /tmp/tmpxqk5pkqk.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // Your code here\n  long boredoms =\
    \ 0;\n  std::stringstream ss(S);\n  std::string word;\n  while (ss >> word) {\n\
    \    if (word == \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxac6fcpq: /tmp/tmpxac6fcpq.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  int count = 0;\n\
    \  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplo650nyo: /tmp/tmplo650nyo.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4gzole5w: /tmp/tmp4gzole5w.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  long count = 0;\n\
    \  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph3yky9jp: /tmp/tmph3yky9jp.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  int boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy1wd6axo: /tmp/tmpy1wd6axo.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ delimiter = \"!?.\";\n    size_t pos = 0;\n    std::string token;\n    while\
    \ ((pos = S.find(delimiter)) != std::string::npos) {\n        token = S.substr(0,\
    \ pos);\n        if (token.find(\"I\") == 0) {\n            boredoms++;\n    \
    \    }\n        S.erase(0, pos + delimiter.length());\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnqaq940k: /tmp/tmpnqaq940k.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4gzole5w: /tmp/tmp4gzole5w.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp79oyutgo: /tmp/tmp79oyutgo.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::istringstream\
    \ iss(S);\n    std::string word;\n    while (iss >> word) {\n        if (word\
    \ == \"I\") {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp223l43fp: /tmp/tmp223l43fp.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfpv4tnzw: /tmp/tmpfpv4tnzw.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  long count = 0;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppd_07fj_: /tmp/tmppd_07fj_.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string token;\n    while(std::getline(ss, token, '.')) {\n\
    \        std::stringstream ss2(token);\n        std::string token2;\n        while(std::getline(ss2,\
    \ token2, ' ')) {\n            if(token2 == \"I\") {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpu41daky4: /tmp/tmpu41daky4.cpp:34: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6zrq_bwv: /tmp/tmp6zrq_bwv.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  long count = 0;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppd_07fj_: /tmp/tmppd_07fj_.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  long boredoms =\
    \ 0;\n  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word) {\n\
    \    if(word == \"I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpo7r0az_d: /tmp/tmpo7r0az_d.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp79oyutgo: /tmp/tmp79oyutgo.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3oihpvrf: /tmp/tmp3oihpvrf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n  \
    \      if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxqk5pkqk: /tmp/tmpxqk5pkqk.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::istringstream iss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (iss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp02i499sk: /tmp/tmp02i499sk.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n\tlong count = 0;\n\tstd::stringstream\
    \ ss(S);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\tif (word == \"I\")\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsqgk0p0m: /tmp/tmpsqgk0p0m.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Your code here\n    long count=0;\n\
    \    std::stringstream ss(S);\n    std::string word;\n    while(ss>>word){\n \
    \       if(word==\"I\"){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9p41p7bg: /tmp/tmp9p41p7bg.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    std::string word\
    \ = \"I\";\n    std::stringstream ss(S);\n    std::string token;\n    while (std::getline(ss,\
    \ token, '.')) {\n        if (token.find(word) != std::string::npos) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqbe72wyy: /tmp/tmpqbe72wyy.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count=0;\n\
    \    std::stringstream ss(S);\n    std::string word;\n    while(ss>>word){\n \
    \       if(word==\"I\"){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmbxx3uv1: /tmp/tmpmbxx3uv1.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (std::getline(ss, word, ' ')) {\n    if\
    \ (word == \"I\") {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphj6w792p: /tmp/tmphj6w792p.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064749
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while(ss >> word) {\n        if(word == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq5pprjbt: /tmp/tmpq5pprjbt.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  // your code here\n  long count = 0;\n\
    \  std::stringstream ss(S);\n  std::string word;\n  while(ss >> word){\n    if(word\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph3yky9jp: /tmp/tmph3yky9jp.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064747
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // your code here\n    long count\
    \ = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpats62gy3: /tmp/tmpats62gy3.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while (ss >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgom165r1: /tmp/tmpgom165r1.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi9hk6uhr: /tmp/tmpi9hk6uhr.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] ==\
    \ ' ') {\n            if (word == \"I\") {\n                boredoms++;\n    \
    \        }\n            word = \"\";\n        } else if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            if (word == \"I\") {\n                boredoms++;\n\
    \            }\n            word = \"\";\n        } else {\n            word +=\
    \ S[i];\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdhc06lfx: /tmp/tmpdhc06lfx.cpp:38: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        if(word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzeoke1vg: /tmp/tmpzeoke1vg.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660064748
