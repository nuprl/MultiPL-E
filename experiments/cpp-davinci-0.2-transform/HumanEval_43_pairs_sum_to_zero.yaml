name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
  // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
  \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
completions: ["    std::unordered_set<long> s;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (s.find(l[i]) != s.end()) {\n            return true;\n \
    \       }\n        s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::unordered_set<long> s;\n    for (long i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::unordered_set<long> s;\n    for (auto i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (long i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (s.find(l[i]) != s.end()) {\n            return true;\n \
    \       }\n        s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (long i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if\
    \ (s.find(-i) != s.end()) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "\t// your code here\n\tstd::sort(l.begin(), l.end());\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size();\
    \ j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "  // your code here\n\
    \  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n    if(s.find(l[i])!=s.end()){\n\
    \      return true;\n    }\n    s.insert(-l[i]);\n  }\n  return false;", "   \
    \ // Write your code here\n    // To print results to the standard output you\
    \ can use the printf function.\n    // For example:\n    // printf(\"%s\", \"\
    test\");\n    // sort(l.begin(), l.end());\n    // for(int i = 0; i < l.size();\
    \ i++){\n    //     for(int j = i+1; j < l.size(); j++){\n    //         if(l[i]\
    \ + l[j] == 0){\n    //             return true;\n    //         }\n    //   \
    \  }\n    // }\n    // return false;\n    std::unordered_set<long> s;\n    for(int\
    \ i = 0; i < l.size(); i++){\n        if(s.find(-l[i]) != s.end()){\n        \
    \    return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // YOUR CODE HERE\n    std::unordered_set<long>\
    \ s;\n    for(long i = 0; i < l.size(); i++){\n        if(s.find(l[i]) != s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // YOUR CODE HERE\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (s.find(l[i]) != s.end()) {\n            return true;\n \
    \       }\n        s.insert(-l[i]);\n    }\n    return false;", "  // your code\
    \ here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n  for(int i = 0;\
    \ i < n; i++) {\n    if(l[i] == 0) {\n      if(i < n-1 && l[i+1] == 0) {\n   \
    \     return true;\n      }\n    }\n    else {\n      int start = 0;\n      int\
    \ end = n-1;\n      while(start < end) {\n        if(start == i) {\n         \
    \ start++;\n          continue;\n        }\n        if(end == i) {\n         \
    \ end--;\n          continue;\n        }\n        if(l[start] + l[end] == -l[i])\
    \ {\n          return true;\n        }\n        else if(l[start] + l[end] < -l[i])\
    \ {\n          start++;\n        }\n        else {\n          end--;\n       \
    \ }\n      }\n    }\n  }\n  return false;", "    // Your code here\n    // You\
    \ may assume that the input list is sorted in ascending order.\n    // You may\
    \ also assume that the input list has no repeated elements.\n    // You may not\
    \ use any built-in sorting functions.\n    // You may not use any built-in set\
    \ functions.\n    // You may not use any built-in hash functions.\n    // You\
    \ may not use any built-in dictionary functions.\n    // You may not use any built-in\
    \ list functions.\n    // You may not use any built-in string functions.\n   \
    \ // You may not use any built-in arithmetic functions.\n    // You may not use\
    \ any built-in comparison functions.\n    // You may not use any built-in boolean\
    \ functions.\n    // You may not use any built-in function that takes a list as\
    \ an input.\n    // You may not use any built-in function that takes a string\
    \ as an input.\n    // You may not use any built-in function that takes a dictionary\
    \ as an input.\n    // You may not use any built-in function that takes a set\
    \ as an input.\n    // You may not use any built-in function that takes a tuple\
    \ as an input.\n    // You may not use any built-in function that takes a number\
    \ as an input.\n    // You may not use any built-in function that takes a boolean\
    \ as an input.\n    // You may not use any built-in function that takes a function\
    \ as an input.\n    // You may not use any built-in function that takes a generator\
    \ as an input.\n    // You may not use any built-in function that takes a module\
    \ as an input.\n    // You may not use any built-in function that takes a class\
    \ as an input.\n    // You may not use any built-in function that takes a method\
    \ as an input.\n    // You may not use any built-in function that takes a type\
    \ as an input.\n    // You may not use any built-in function that takes a file\
    \ as an input.\n    // You may not use any built-in function that takes a stream\
    \ as an input.\n    // You may not use any built-in function that takes a memoryview\
    \ as an input.\n    // You may not use any built-in function that takes a buffer\
    \ as an input.\n    // You may not use", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n           \
    \     return true;\n            }\n        }\n    }\n    return false;", "   \
    \ std::unordered_set<long> s;\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     if (s.find(l[i]) != s.end()) {\n            return true;\n        }\n  \
    \      s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i: l) {\n        if (s.find(-i) != s.end()) {\n          \
    \  return true;\n        }\n        s.insert(i);\n    }\n    return false;", " \
    \   std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n         \
    \   return false;\n        }\n        for (int j = i + 1; j < l.size(); j++) {\n\
    \            if (l[i] + l[j] == 0) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) return true;\n\
    \        s.insert(i);\n    }\n    return false;", "\t// your code goes here\n\t\
    std::unordered_set<long> s;\n\tfor (auto i : l) {\n\t\tif (s.find(-i) != s.end())\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\t}\n\treturn false;", "   \
    \ // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n   \
    \     if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    std::unordered_set<long> s;\n    for (long i\
    \ : l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n   \
    \     }\n        s.insert(i);\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // your code here\n\
    \    // std::cout << \"pairs_sum_to_zero\" << std::endl;\n    // std::cout <<\
    \ l.size() << std::endl;\n    if (l.size() < 2) {\n        return false;\n   \
    \ }\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n  \
    \      if(s.find(l[i])!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (long i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n           \
    \     return true;\n            }\n        }\n    }\n    return false;", "   \
    \ // your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (binary_search(l.begin(), l.end(), -l[i])) {\n\
    \            return true;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (long i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (int i = 0; i < l.size(); i++) {\n   \
    \     if (s.find(l[i]) != s.end()) {\n            return true;\n        }\n  \
    \      s.insert(-l[i]);\n    }\n    return false;", "    // Your code here\n \
    \   std::unordered_set<long> s;\n    for(auto x: l){\n        if(s.find(-x) !=\
    \ s.end()){\n            return true;\n        }\n        s.insert(x);\n    }\n\
    \    return false;", "    // Your code here\n    std::unordered_set<long> s;\n\
    \    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto x : l) {\n        if (s.find(-x) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(x);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    std::unordered_set<long> s;\n\
    \    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            break;\n        }\n        for\
    \ (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    // your code here\n  \
    \  std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int i = 0; i\
    \ < n; i++) {\n        if(l[i] > 0) {\n            return false;\n        }\n\
    \        for(int j = i + 1; j < n; j++) {\n            if(l[i] + l[j] == 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    // Your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()){\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::unordered_set<long> s;\n\
    \    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // your\
    \ code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size();\
    \ j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // your code here\n    std::unordered_set<long> s;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n            return\
    \ true;\n        }\n        else{\n            s.insert(-l[i]);\n        }\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto x :\
    \ l) {\n        if (s.find(-x) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(x);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i:\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (long i : l) {\n        if\
    \ (s.find(-i) != s.end()) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    // Your code here\n  \
    \  std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (s.find(l[i]) != s.end()) {\n            return true;\n \
    \       }\n        s.insert(-l[i]);\n    }\n    return false;", "    // YOUR CODE\
    \ HERE\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()) return true;\n        s.insert(i);\n    }\n   \
    \ return false;", "    // Write your code here\n    // To print results to the\
    \ standard output you can use the printf function.\n    // Example: printf(\"\
    %s\", \"Hello world!\");\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;", "    std::unordered_set<long> s;\n\
    \    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // your\
    \ code here\n    std::unordered_set<long> s;\n    for(long i = 0; i < l.size();\
    \ i++){\n        if(s.find(l[i]) != s.end()){\n            return true;\n    \
    \    }\n        s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto x : l) {\n        if (s.find(-x) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(x);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto x : l) {\n        if (s.find(-x)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(x);\n \
    \   }\n    return false;", "    std::sort(l.begin(), l.end());\n    int i = 0;\n\
    \    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    // your code here\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator\
    \ it2;\n    for(it = l.begin(); it != l.end(); it++){\n        for(it2 = it +\
    \ 1; it2 != l.end(); it2++){\n            if(*it + *it2 == 0){\n             \
    \   return true;\n            }\n        }\n    }\n    return false;", "    //\
    \ your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n  \
    \          return true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n\
    \        } else {\n            j--;\n        }\n    }\n    return false;", " \
    \   std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (long i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()){\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(long i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] ==\
    \ 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n    \
    \        i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "  // your code here\n  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n\
    \    if(s.find(l[i])!=s.end()){\n      return true;\n    }\n    else{\n      s.insert(-l[i]);\n\
    \    }\n  }\n  return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(long i : l){\n        if(s.find(-i) != s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (s.find(l[i]) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (int i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (s.find(l[i]) != s.end()) {\n            return\
    \ true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;", "   \
    \ // your code here\n    std::unordered_set<long> s;\n    for(long i = 0; i <\
    \ l.size(); i++){\n        if(s.find(l[i]) != s.end()){\n            return true;\n\
    \        }\n        s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end()) {\n          \
    \  return true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;",
  "    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // your code here\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;", "    std::unordered_set<long> s;\n    for (auto i : l) {\n\
    \        if (s.find(-i) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    int i = 0;\n   \
    \ int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true;\n        } else if (l[i] + l[j] < 0) {\n           \
    \ i++;\n        } else {\n            j--;\n        }\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) return true;\n\
    \        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (s.find(l[i]) != s.end()) {\n            return true;\n        }\n \
    \       s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()){\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(long i = 0; i < l.size(); i++){\n        if(s.find(l[i]) != s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    // Write your code here.\n    std::unordered_set<long> s;\n  \
    \  for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return true;\n\
    \        }\n        s.insert(i);\n    }\n    return false;", "    // your code\
    \ here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i]\
    \ + l[j] == 0) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // Your code here\n    // You may assume that the input list is not empty.\n\
    \    // You may assume that the input list contains at least one distinct element.\n\
    \    // You may assume that the input list contains no duplicates.\n    // You\
    \ may assume that the input list contains no zeros.\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    std::unordered_set<long> s;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end()) {\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if\
    \ (s.find(-i) != s.end()) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i\
    \ : l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n   \
    \     }\n        s.insert(i);\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if\
    \ (s.find(-i) != s.end()) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "    // your code here\n    std::unordered_set<long>\
    \ s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n            return\
    \ true;\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i : l){\n\
    \        if(s.find(-i) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(i);\n    }\n    return false;", "    std::unordered_set<long> s;\n\
    \    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // Write\
    \ your code here.\n    std::unordered_set<long> s;\n    for(auto i:l){\n     \
    \   if(s.find(-i)!=s.end()){\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;", "    std::unordered_set<long> s;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end()) {\n        \
    \    return true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;",
  "    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end()){\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    return false;", "    std::unordered_set<long> s;\n\
    \    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n            return\
    \ true;\n        }\n        s.insert(i);\n    }\n    return false;", "    // your\
    \ code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;", " \
    \   std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (long i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n  \
    \      if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;", "    std::unordered_set<long> s;\n    for (long x\
    \ : l) {\n        if (s.find(-x) != s.end()) {\n            return true;\n   \
    \     }\n        s.insert(x);\n    }\n    return false;", "    // YOUR CODE HERE\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;", "    // your code here\n    std::unordered_set<long> s;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n            return\
    \ true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;", "   \
    \ std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    std::unordered_set<long> s;\n    for (auto i :\
    \ l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(i);\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;",
  "    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;", "    // Your code here\n    std::unordered_set<long>\
    \ s;\n    for(long i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;", "    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (std::binary_search(l.begin(), l.end(), -l[i])) {\n     \
    \       return true;\n        }\n    }\n    return false;", "    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;", "    std::unordered_set<long> s;\n    for (auto i: l) {\n \
    \       if (s.find(-i) != s.end()) {\n            return true;\n        }\n  \
    \      s.insert(i);\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;", "    // YOUR CODE HERE\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;"]
stop_tokens:
- "\n}"
