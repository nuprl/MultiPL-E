language: cpp
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a>=0 && round(pow(a,1.0/3))==pow(a,1.0/3);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpey2c8o9d: /tmp/tmpey2c8o9d.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) x++;\n   \
    \ return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return a == x * x * x;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong b = std::pow(a, 1.0/3);\n\
    \treturn b*b*b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg1amd3qi: /tmp/tmpg1amd3qi.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = std::cbrt(a);\n    return b * b * b == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = std::cbrt(a);\n    return b * b * b == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long b =\
    \ std::cbrt(a);\n    return b * b * b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = std::cbrt(a);\n    return b * b * b == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long i = 0;\n    while (i * i * i < a) {\n        i++;\n\
    \    }\n    return i * i * i == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    long x = 0;\n    while (x * x * x < a) {\n        x++;\n    }\n \
    \   return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here\n  \
    \  long b = std::cbrt(a);\n    return b*b*b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a<0) {\n        a\
    \ = -a;\n    }\n    if (a==0) {\n        return true;\n    }\n    long b = 1;\n\
    \    while (b*b*b<a) {\n        b++;\n    }\n    return b*b*b==a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = 1;\n    while (b * b * b < a) b++;\n   \
    \ return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) x++;\n   \
    \ return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0) return true;\n\
    \tif (a < 0) a = -a;\n\tlong x = 1;\n\twhile (x*x*x < a) x++;\n\treturn x*x*x\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i = 0;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3cint_a: /tmp/tmpi3cint_a.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a=-a;\n    long x=1;\n\
    \    while(x*x*x<=a)\n    {\n        if(x*x*x==a)\n            return true;\n\
    \        x++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long left\
    \ = 0;\n    long right = a;\n    while (left <= right) {\n        long mid = left\
    \ + (right - left) / 2;\n        if (mid * mid * mid == a) {\n            return\
    \ true;\n        } else if (mid * mid * mid < a) {\n            left = mid + 1;\n\
    \        } else {\n            right = mid - 1;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long left\
    \ = 0;\n    long right = a;\n    while (left <= right) {\n        long mid = left\
    \ + (right - left) / 2;\n        if (mid * mid * mid == a) {\n            return\
    \ true;\n        } else if (mid * mid * mid < a) {\n            left = mid + 1;\n\
    \        } else {\n            right = mid - 1;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = 0;\n    while (b * b * b < a) {\n      \
    \  b++;\n    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    long x = 0;\n    while (x * x * x < a) {\n        x++;\n    }\n \
    \   return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    for (long i = 0; i * i * i <= b; i++) {\n        if (i * i * i == b) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong b = abs(a);\n\tlong\
    \ c = round(pow(b, 1.0/3));\n\treturn c*c*c == b;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int i = 1;\n    while\
    \ (i*i*i < a) {\n        i++;\n    }\n    return i*i*i == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpueg5sewa: /tmp/tmpueg5sewa.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = 1;\n    while (b * b * b < a) b++;\n   \
    \ return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a<0)\n        a=-a;\n    if(a==0)\n        return true;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return b == c * c * c;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0) {\n\t\ta = -a;\n\
    \t}\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tlong b = 1;\n\twhile (b * b * b\
    \ < a) {\n\t\tb++;\n\t}\n\treturn b * b * b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    if (a == 0)\n        return true;\n    long x = 1;\n    while (x\
    \ * x * x < a)\n        x++;\n    return x * x * x == a;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = round(pow(a, 1.0/3));\n    return b*b*b\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long i = 1;\n    while (i * i * i < a) {\n      \
    \  i++;\n    }\n    return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    for (long i = 0; i < a; i++) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl9d9479i: /tmp/tmpl9d9479i.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) a = -a;\n \
    \   long x = 1;\n    while (x * x * x < a) x++;\n    return x * x * x == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunj4supj: /tmp/tmpunj4supj.cpp:33: int main(): Assertion `candidate((0))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 0;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0) {\n\t\treturn\
    \ true;\n\t}\n\tif (a < 0) {\n\t\ta = -a;\n\t}\n\tlong i = 1;\n\twhile (i * i\
    \ * i <= a) {\n\t\tif (i * i * i == a) {\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a<0)\n        a=-a;\n    if(a==0)\n        return true;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a<0)\n        a=-a;\n    if(a==0)\n        return true;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0) return true;\n    if(a<0) a=-a;\n    long x=1;\n    while(x*x*x<=a)\n\
    \    {\n        if(x*x*x==a) return true;\n        x++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0)\n\t\ta = -a;\n\
    \tif (a == 0)\n\t\treturn true;\n\tlong i = 1;\n\twhile (i * i * i <= a) {\n\t\
    \tif (i * i * i == a)\n\t\t\treturn true;\n\t\ti++;\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a = -a;\n    long i =\
    \ 0;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = 0;\n    while\
    \ (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_yjz_639: /tmp/tmp_yjz_639.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) {\n    return\
    \ true;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  long i = 1;\n  while (i * i\
    \ * i <= a) {\n    if (i * i * i == a) {\n      return true;\n    }\n    i++;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a == 0) return true;\n    if(a < 0) a = -a;\n    long i = 1;\n    while(i\
    \ * i * i < a) i++;\n    return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long i = 1;\n    while (i * i * i < a) {\n      \
    \  i++;\n    }\n    return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = a;\n    if (a\
    \ < 0) {\n        b = -a;\n    }\n    long c = 0;\n    while (c * c * c < b) {\n\
    \        c++;\n    }\n    return c * c * c == b;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) {\n    return\
    \ true;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  long b = 1;\n  while (b * b\
    \ * b < a) {\n    b++;\n  }\n  return b * b * b == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) return true;\n\
    \  if (a < 0) a = -a;\n  long x = 1;\n  while (x * x * x < a) x++;\n  return x\
    \ * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a=-a;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return c*c*c == b;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    long i = 0;\n    while (i * i * i < a)\n        i++;\n    return\
    \ i * i * i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long c = 1;\n    while (c * c * c < a) c++;\n   \
    \ return c * c * c == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return b == c * c * c;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    long x = std::abs(a);\n    long y = std::pow(x, 1.0/3);\n\
    \    return y * y * y == x;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfwdgghxs: /tmp/tmpfwdgghxs.cpp:32: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long i = 1;\n    while (i * i * i < a) {\n      \
    \  i++;\n    }\n    return i * i * i == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long b =\
    \ 0;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i;\n    for (i =\
    \ 0; i * i * i <= a; i++) {\n        if (i * i * i == a) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpo0afg0bl: /tmp/tmpo0afg0bl.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return c*c*c == b;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long i = 1;\n    while (i * i * i < a) i++;\n   \
    \ return i * i * i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) {\n    return\
    \ true;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  long i = 1;\n  while (i * i\
    \ * i <= a) {\n    if (i * i * i == a) {\n      return true;\n    }\n    i++;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a<0)\n        a=-a;\n    if(a==0)\n        return true;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return (c*c*c == b);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) x++;\n   \
    \ return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long root = round(pow(a, 1.0/3));\n    return a ==\
    \ root * root * root;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x*x*x < a) x++;\n    return\
    \ x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long i = 1;\n    while (i * i * i < a) i++;\n   \
    \ return i * i * i == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = std::cbrt(b);\n    return b == c * c * c;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    if (a == 0)\n        return true;\n    for (int i = 1; i <= a; i++)\
    \ {\n        if (i * i * i == a)\n            return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) a = -a;\n \
    \   if (a == 0) return true;\n    long b = 1;\n    while (b * b * b < a) b++;\n\
    \    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    int i = 1;\n    while (i*i*i <= a) {\n        if\
    \ (i*i*i == a) return true;\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long b = 0;\n    while (b * b * b < a) {\n        b++;\n\
    \    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0) {\n    a = -a;\n\
    \  }\n  if (a == 0) {\n    return true;\n  }\n  long b = 0;\n  while (b * b *\
    \ b < a) {\n    b++;\n  }\n  return b * b * b == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  long b = a;\n    if(a < 0)\n        b = -a;\n    if(b == 0)\n        return\
    \ true;\n    long i = 1;\n    while(i * i * i <= b) {\n        if(i * i * i ==\
    \ b)\n            return true;\n        i++;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = 0;\n    while\
    \ (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_yjz_639: /tmp/tmp_yjz_639.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i = 0;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3cint_a: /tmp/tmpi3cint_a.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a == 0 || a ==\
    \ 1 || a == -1 || (a > 0 && (int)round(pow(a, 1.0/3)) == pow(a, 1.0/3));\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpik5glczq: /tmp/tmpik5glczq.cpp:27: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long x = 0;\n    while (x * x * x < a) {\n        x++;\n\
    \    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a=-a;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) return true;\n\
    \  if (a < 0) a = -a;\n  long x = 1;\n  while (x * x * x < a) x++;\n  return x\
    \ * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a=-a;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    for (long i = 0; i * i * i <= a; i++) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here\n  \
    \  if(a<0)\n        a*=-1;\n    if(a==0)\n        return true;\n    long i;\n\
    \    for(i=1;i*i*i<=a;i++){\n        if(i*i*i==a)\n            return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = 0;\n    while (b * b * b < a) {\n      \
    \  b++;\n    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i = 0;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3cint_a: /tmp/tmpi3cint_a.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = std::cbrt(a);\n\
    \    return x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 0;\n    while (i * i * i < a) {\n        i++;\n    }\n    return i * i * i ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long low\
    \ = 0;\n    long high = a;\n    while (low <= high) {\n        long mid = low\
    \ + (high - low) / 2;\n        if (mid * mid * mid == a) {\n            return\
    \ true;\n        } else if (mid * mid * mid < a) {\n            low = mid + 1;\n\
    \        } else {\n            high = mid - 1;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    if(a<0)\n        a=-a;\n    long i=1;\n\
    \    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n            return true;\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long b = 0;\n    while (b * b * b < a) {\n        b++;\n\
    \    }\n    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064345
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long x =\
    \ 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064344
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long b =\
    \ 1;\n    while (b * b * b < a) {\n        b++;\n    }\n    return b * b * b ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i = 0;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3cint_a: /tmp/tmpi3cint_a.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0) return true;\n    if(a<0) a=-a;\n    long l=0,r=a;\n    while(l<=r){\n\
    \        long mid=(l+r)/2;\n        if(mid*mid*mid==a) return true;\n        else\
    \ if(mid*mid*mid<a) l=mid+1;\n        else r=mid-1;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n          \
    \  return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) {\n      \
    \  x++;\n    }\n    return x * x * x == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064343
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    for (long i = 1; i <= a; i++) {\n        if (i *\
    \ i * i == a) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  return a==0||a==1||a==-1||(a>0&&(long)pow(floor(pow(a,1.0/3)),3)==a);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm1prsd85: /tmp/tmpm1prsd85.cpp:28: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660064346
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    if (a == 0)\n        return true;\n    long i = 1;\n    while (i\
    \ * i * i <= a) {\n        if (i * i * i == a)\n            return true;\n   \
    \     i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064346
