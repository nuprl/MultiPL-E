name: HumanEval_99_closest_integer
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a value (string) representing a number\n// and returns the closest integer to\
  \ it. If the number is equidistant\n// from two integers, round it away from zero.\n\
  // Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
  15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
  \ number is equidistant\n// from two integers, the one you should return is the\
  \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\")\
  \ should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string\
  \ value) {\n"
tests: "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
  10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
  -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
  0\")) == (0));\n}\n"
completions: ["    double d = std::stod(value);\n    return std::lround(d);", "  //\
    \ your code here\n  return std::stol(value);", "  double num = std::stod(value);\n\
    \  if (num >= 0) {\n    return std::ceil(num);\n  } else {\n    return std::floor(num);\n\
    \  }", "  std::stringstream ss(value);\n  double d;\n  ss >> d;\n  return round(d);",
  "    // your code here\n    double val = std::stod(value);\n    if(val > 0)\n  \
    \      return std::ceil(val);\n    else\n        return std::floor(val);", " \
    \ double d = std::stod(value);\n  return std::lround(d);", "  // your code here\n\
    \  double d = std::stod(value);\n  return std::round(d);", "  double d = std::stod(value);\n\
    \  return std::lround(d);", "  double d = std::stod(value);\n  return std::lround(d);",
  "  double d = std::stod(value);\n  return std::lround(d);", "  double num = std::stod(value);\n\
    \  double floor_num = std::floor(num);\n  double ceil_num = std::ceil(num);\n\
    \  if (num - floor_num < ceil_num - num) {\n    return floor_num;\n  } else {\n\
    \    return ceil_num;\n  }", "  double num = std::stod(value);\n  return std::lround(num);",
  "  double d = std::stod(value);\n  return std::lround(d);", "  // your code here\n\
    \  double d = std::stod(value);\n  if (d < 0) {\n    return std::ceil(d);\n  }\n\
    \  return std::floor(d);", "  // your code here\n  double d = std::stod(value);\n\
    \  if (d > 0) {\n    return std::ceil(d);\n  } else {\n    return std::floor(d);\n\
    \  }", "  double d = std::stod(value);\n  return std::round(d);", "  double val\
    \ = std::stod(value);\n  if (val > 0) {\n    return std::ceil(val);\n  } else\
    \ {\n    return std::floor(val);\n  }", "  double d = std::stod(value);\n  return\
    \ std::lround(d);", "  // your code here\n  long num = std::stol(value);\n  if\
    \ (num < 0) {\n    return num - 0.5;\n  }\n  return num + 0.5;", "  long number\
    \ = std::stol(value);\n  long decimal = number - (long)number;\n  if (decimal\
    \ >= 0.5) {\n    return (long)number + 1;\n  } else {\n    return (long)number;\n\
    \  }"]
stop_tokens:
- "\n}"
