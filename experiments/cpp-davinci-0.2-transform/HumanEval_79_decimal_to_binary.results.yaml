language: cpp
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphpklsznc: /tmp/tmphpklsznc.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphpklsznc: /tmp/tmphpklsznc.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_51c8htw: /tmp/tmp_51c8htw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    }\n\
    \    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n \
    \       decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpirtudbu6: /tmp/tmpirtudbu6.cpp:28: int main(): Assertion `candidate((32))
    == ("db100000db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) +\
    \ '0');\n        decimal /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpj_q50bfk: /tmp/tmpj_q50bfk.cpp:24: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_51c8htw: /tmp/tmp_51c8htw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_51c8htw: /tmp/tmp_51c8htw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphi9ztesh: /tmp/tmphi9ztesh.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    }\n\
    \    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n \
    \       decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += decimal % 2 ? \"1\"\
    \ : \"0\";\n    decimal /= 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpq_d6kyt_: /tmp/tmpq_d6kyt_.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    binary = \"db\";\n    while (decimal > 0) {\n        if (decimal\
    \ % 2 == 0) {\n            binary += \"0\";\n        } else {\n            binary\
    \ += \"1\";\n        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp6rxve5ah: /tmp/tmp6rxve5ah.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp4ucxlnmv: /tmp/tmp4ucxlnmv.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_51c8htw: /tmp/tmp_51c8htw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ result = \"db\";\n    while (decimal > 0) {\n        result += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpmw2twqxu: /tmp/tmpmw2twqxu.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphpklsznc: /tmp/tmphpklsznc.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n  \
    \    binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphpklsznc: /tmp/tmphpklsznc.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp5988uark: /tmp/tmp5988uark.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    if (decimal == 0) {\n        binary += \"0\";\n    }\n\
    \    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n \
    \       decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_nz2n7ls: /tmp/tmp_nz2n7ls.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary.push_back(decimal % 2\
    \ + '0');\n    decimal /= 2;\n  }\n  binary.push_back('d');\n  binary.push_back('b');\n\
    \  std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp9s1o38uy: /tmp/tmp9s1o38uy.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_nz2n7ls: /tmp/tmp_nz2n7ls.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp2_h443tm: /tmp/tmp2_h443tm.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary;\n  binary.append(\"db\");\n  while (decimal > 0) {\n    if (decimal\
    \ % 2 == 0) {\n      binary.append(\"0\");\n    } else {\n      binary.append(\"\
    1\");\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary.append(\"db\");\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpy7gy8_l5: /tmp/tmpy7gy8_l5.cpp:30: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmphi9ztesh: /tmp/tmphi9ztesh.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal != 0) {\n        if (decimal % 2 == 0)\
    \ {\n            binary += \"0\";\n        } else {\n            binary += \"\
    1\";\n        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpjwc664mg: /tmp/tmpjwc664mg.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    binary.append(\"db\");\n    while (decimal > 0) {\n        binary.append(std::to_string(decimal\
    \ % 2));\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary.append(\"db\");\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmptqanjmhm: /tmp/tmptqanjmhm.cpp:26: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n\
    \            binary += \"0\";\n        } else {\n            binary += \"1\";\n\
    \        }\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpoyq541zm: /tmp/tmpoyq541zm.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmp_51c8htw: /tmp/tmp_51c8htw.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpiml_qdm8: /tmp/tmpiml_qdm8.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n  std::string\
    \ binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n   \
    \   binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpw5kaqm27: /tmp/tmpw5kaqm27.cpp:29: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: Exception
  stderr: 'tmpnu3xe63b: /tmp/tmpnu3xe63b.cpp:25: int main(): Assertion `candidate((0))
    == ("db0db")'' failed.

    '
  stdout: ''
  timestamp: 1660064392
