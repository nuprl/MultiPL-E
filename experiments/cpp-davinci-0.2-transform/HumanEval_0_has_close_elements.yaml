name: HumanEval_0_has_close_elements
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given list of\
  \ numbers, are any two numbers closer to each other than\n// given threshold.\n\
  // >>> has_close_elements((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})),\
  \ (0.5))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0,\
  \ (float)2.8, (float)3.0, (float)4.0, (float)5.0, (float)2.0})), (0.3))\n// (true)\n\
  bool has_close_elements(std::vector<float> numbers, float threshold) {\n"
tests: "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.9, (float)4.0, (float)5.0, (float)2.2})), (0.3)) == (true));\n\
  \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.9, (float)4.0,\
  \ (float)5.0, (float)2.2})), (0.05)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)5.9, (float)4.0, (float)5.0})), (0.95)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)5.9, (float)4.0, (float)5.0})), (0.8)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0, (float)2.0})), (0.1)) == (true));\n\
  \    assert(candidate((std::vector<float>({(float)1.1, (float)2.2, (float)3.1, (float)4.1,\
  \ (float)5.1})), (1.0)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1,\
  \ (float)2.2, (float)3.1, (float)4.1, (float)5.1})), (0.5)) == (false));\n}\n"
completions: ["    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n      \
    \  if (numbers[i + 1] - numbers[i] < threshold) {\n            return true;\n\
    \        }\n    }\n    return false;", "    // Write your code here\n    // To\
    \ print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    int n = numbers.size();\n    for(int i=0;i<n;i++){\n\
    \        for(int j=i+1;j<n;j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size()\
    \ - 1; i++) {\n        if (numbers[i + 1] - numbers[i] < threshold) {\n      \
    \      return true;\n        }\n    }\n    return false;", "    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n      \
    \  if (numbers[i + 1] - numbers[i] < threshold) {\n            return true;\n\
    \        }\n    }\n    return false;", "    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "\t// Write your\
    \ code here\n\t// To print results to the standard output you can use std::cout\n\
    \t// Example: std::cout << \"Hello world!\";\n\tint n = numbers.size();\n\tfor(int\
    \ i=0;i<n;i++)\n\t{\n\t\tfor(int j=i+1;j<n;j++)\n\t\t{\n\t\t\tif(abs(numbers[i]-numbers[j])<threshold)\n\
    \t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;", "  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size();\
    \ j++) {\n      if (abs(numbers[i] - numbers[j]) < threshold) {\n        return\
    \ true;\n      }\n    }\n  }\n  return false;", "    // Write your code here\n\
    \    // To print results to the standard output you can use std::cout\n    //\
    \ Example: std::cout << \"Hello world!\";\n    std::sort(numbers.begin(), numbers.end());\n\
    \    for(int i = 0; i < numbers.size() - 1; i++) {\n        if(numbers[i+1] -\
    \ numbers[i] < threshold) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    // Your code goes here\n    for(int i=0;i<numbers.size();i++){\n\
    \        for(int j=i+1;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<threshold){\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    for(int i=0;i<numbers.size();i++){\n        for(int j=i+1;j<numbers.size();j++){\n\
    \            if(abs(numbers[i]-numbers[j])<threshold){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;"]
stop_tokens:
- "\n}"
