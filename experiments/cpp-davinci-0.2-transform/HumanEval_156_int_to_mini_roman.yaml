name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n\
  // (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n\
  // (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman;\n    std::string roman_numerals[13] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int arabic_numerals[13] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n      \
    \      roman += roman_numerals[i];\n        }\n    }\n    return roman;", "  \
    \  std::string roman;\n    while(number>=1000){\n        roman+=\"m\";\n     \
    \   number-=1000;\n    }\n    if(number>=900){\n        roman+=\"cm\";\n     \
    \   number-=900;\n    }\n    if(number>=500){\n        roman+=\"d\";\n       \
    \ number-=500;\n    }\n    if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n\
    \    }\n    while(number>=100){\n        roman+=\"c\";\n        number-=100;\n\
    \    }\n    if(number>=90){\n        roman+=\"xc\";\n        number-=90;\n   \
    \ }\n    if(number>=50){\n        roman+=\"l\";\n        number-=50;\n    }\n\
    \    if(number>=40){\n        roman+=\"xl\";\n        number-=40;\n    }\n   \
    \ while(number>=10){\n        roman+=\"x\";\n        number-=10;\n    }\n    if(number>=9){\n\
    \        roman+=\"ix\";\n        number-=9;\n    }\n    if(number>=5){\n     \
    \   roman+=\"v\";\n        number-=5;\n    }\n    if(number>=4){\n        roman+=\"\
    iv\";\n        number-=4;\n    }\n    while(number>=1){\n        roman+=\"i\"\
    ;\n        number-=1;\n    }\n    return roman;", "    std::string result;\n \
    \   std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0;\
    \ i++) {\n        while (number >= value[i]) {\n            number -= value[i];\n\
    \            result += roman[i];\n        }\n    }\n    return result;", "   \
    \ std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto numeral\
    \ : roman_numerals) {\n        while (number >= numeral.first) {\n           \
    \ roman += numeral.second;\n            number -= numeral.first;\n        }\n\
    \    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto &numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    // your code\
    \ here\n    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[13] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string roman;\n  std::string roman_numerals[13] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \  int values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \  for (int i = 0; i < 13; i++) {\n    while (number >= values[i]) {\n      number\
    \ -= values[i];\n      roman += roman_numerals[i];\n    }\n  }\n  return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    std::string roman = \"ivxlcdm\"\
    ;\n    int i = 0;\n    while (number > 0) {\n        int digit = number % 10;\n\
    \        if (digit == 9) {\n            result = roman[i] + roman[i + 2] + result;\n\
    \        } else if (digit >= 5) {\n            result = roman[i + 1] + std::string(digit\
    \ - 5, roman[i]) + result;\n        } else if (digit == 4) {\n            result\
    \ = roman[i] + roman[i + 1] + result;\n        } else {\n            result =\
    \ std::string(digit, roman[i]) + result;\n        }\n        number /= 10;\n \
    \       i += 2;\n    }\n    return result;", "    std::string roman;\n    int\
    \ num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string sym[] =\
    \ {\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\"\
    ,\"m\"};\n    int i=12;\n    while(number>0)\n    {\n        int div = number/num[i];\n\
    \        number = number%num[i];\n        while(div--)\n        {\n          \
    \  roman+=sym[i];\n        }\n        i--;\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman = thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number\
    \ % 100) / 10] + ones[number % 10];\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimals[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number\
    \ > 0; i++) {\n        while (number >= decimals[i]) {\n            number -=\
    \ decimals[i];\n            roman += roman_numerals[i];\n        }\n    }\n  \
    \  return roman;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string roman;\n\
    \    int num[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n   \
    \ std::string sym[] = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"\
    xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number\
    \ > 0) {\n        int div = number / num[i];\n        number = number % num[i];\n\
    \        while (div--) {\n            roman += sym[i];\n        }\n        i--;\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[13] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman = \"\";\n    while\
    \ (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n\
    \    if (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n\
    \    }\n    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n\
    \    }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -=\
    \ 400;\n    }\n    while (number >= 100) {\n        roman += \"c\";\n        number\
    \ -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    while(number>=1000){\n        roman+=\"m\";\n        number-=1000;\n    }\n\
    \    if(number>=900){\n        roman+=\"cm\";\n        number-=900;\n    }\n \
    \   if(number>=500){\n        roman+=\"d\";\n        number-=500;\n    }\n   \
    \ if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n    }\n    while(number>=100){\n\
    \        roman+=\"c\";\n        number-=100;\n    }\n    if(number>=90){\n   \
    \     roman+=\"xc\";\n        number-=90;\n    }\n    if(number>=50){\n      \
    \  roman+=\"l\";\n        number-=50;\n    }\n    if(number>=40){\n        roman+=\"\
    xl\";\n        number-=40;\n    }\n    while(number>=10){\n        roman+=\"x\"\
    ;\n        number-=10;\n    }\n    if(number>=9){\n        roman+=\"ix\";\n  \
    \      number-=9;\n    }\n    if(number>=5){\n        roman+=\"v\";\n        number-=5;\n\
    \    }\n    if(number>=4){\n        roman+=\"iv\";\n        number-=4;\n    }\n\
    \    while(number>=1){\n        roman+=\"i\";\n        number-=1;\n    }\n   \
    \ return roman;", "    std::string roman;\n    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n\
    \    std::string sym[] = {\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\"\
    ,\"c\",\"cd\",\"d\",\"cm\",\"m\"};\n    int i=12;\n    while(number>0)\n    {\n\
    \        int div = number/num[i];\n        number = number%num[i];\n        while(div--)\n\
    \        {\n            roman+=sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n\
    \    std::string sym[] = {\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\"\
    ,\"c\",\"cd\",\"d\",\"cm\",\"m\"};\n    int i=12;\n    while(number>0)\n    {\n\
    \        int div = number/num[i];\n        number = number%num[i];\n        while(div--)\n\
    \        {\n            roman+=sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] =\
    \ {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"\
    xc\"};\n    std::string hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"\
    d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\"\
    , \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number / 1000];\n    roman\
    \ += hundreds[(number % 1000) / 100];\n    roman += tens[(number % 100) / 10];\n\
    \    roman += ones[number % 10];\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman = \"\";\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= arabic_numerals[i]) {\n        \
    \    number -= arabic_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto rn : roman_numerals)\
    \ {\n        while (number >= rn.first) {\n            result += rn.second;\n\
    \            number -= rn.first;\n        }\n    }\n    return result;", "   \
    \ std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::vector<std::pair<int,\
    \ std::string>> values = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"},\
    \ {400, \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"\
    }, {10, \"x\"},   {9, \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"\
    }};\n  for (auto p : values) {\n    while (number >= p.first) {\n      roman +=\
    \ p.second;\n      number -= p.first;\n    }\n  }\n  return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n  \
    \      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto& rn : roman_numerals)\
    \ {\n        while (number >= rn.first) {\n            roman += rn.second;\n \
    \           number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto &pair : roman_numerals) {\n        while (number >=\
    \ pair.first) {\n            result += pair.second;\n            number -= pair.first;\n\
    \        }\n    }\n    return result;", "    std::string roman = \"\";\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     roman += roman_numerals[i];\n        }\n    }\n    return roman;", "   \
    \ std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    while(number>=1000){\n        roman+=\"m\";\n     \
    \   number-=1000;\n    }\n    if(number>=900){\n        roman+=\"cm\";\n     \
    \   number-=900;\n    }\n    if(number>=500){\n        roman+=\"d\";\n       \
    \ number-=500;\n    }\n    if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n\
    \    }\n    while(number>=100){\n        roman+=\"c\";\n        number-=100;\n\
    \    }\n    if(number>=90){\n        roman+=\"xc\";\n        number-=90;\n   \
    \ }\n    if(number>=50){\n        roman+=\"l\";\n        number-=50;\n    }\n\
    \    if(number>=40){\n        roman+=\"xl\";\n        number-=40;\n    }\n   \
    \ while(number>=10){\n        roman+=\"x\";\n        number-=10;\n    }\n    if(number>=9){\n\
    \        roman+=\"ix\";\n        number-=9;\n    }\n    if(number>=5){\n     \
    \   roman+=\"v\";\n        number-=5;\n    }\n    if(number>=4){\n        roman+=\"\
    iv\";\n        number-=4;\n    }\n    while(number>=1){\n        roman+=\"i\"\
    ;\n        number-=1;\n    }\n    return roman;", "    std::string roman;\n  \
    \  while(number>=1000){\n        roman+=\"m\";\n        number-=1000;\n    }\n\
    \    if(number>=900){\n        roman+=\"cm\";\n        number-=900;\n    }\n \
    \   if(number>=500){\n        roman+=\"d\";\n        number-=500;\n    }\n   \
    \ if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n    }\n    while(number>=100){\n\
    \        roman+=\"c\";\n        number-=100;\n    }\n    if(number>=90){\n   \
    \     roman+=\"xc\";\n        number-=90;\n    }\n    if(number>=50){\n      \
    \  roman+=\"l\";\n        number-=50;\n    }\n    if(number>=40){\n        roman+=\"\
    xl\";\n        number-=40;\n    }\n    while(number>=10){\n        roman+=\"x\"\
    ;\n        number-=10;\n    }\n    if(number>=9){\n        roman+=\"ix\";\n  \
    \      number-=9;\n    }\n    if(number>=5){\n        roman+=\"v\";\n        number-=5;\n\
    \    }\n    if(number>=4){\n        roman+=\"iv\";\n        number-=4;\n    }\n\
    \    while(number>=1){\n        roman+=\"i\";\n        number-=1;\n    }\n   \
    \ return roman;", "    std::string roman;\n    while(number>0){\n        if(number>=1000){\n\
    \            roman+=\"m\";\n            number-=1000;\n        }\n        else\
    \ if(number>=900){\n            roman+=\"cm\";\n            number-=900;\n   \
    \     }\n        else if(number>=500){\n            roman+=\"d\";\n          \
    \  number-=500;\n        }\n        else if(number>=400){\n            roman+=\"\
    cd\";\n            number-=400;\n        }\n        else if(number>=100){\n  \
    \          roman+=\"c\";\n            number-=100;\n        }\n        else if(number>=90){\n\
    \            roman+=\"xc\";\n            number-=90;\n        }\n        else\
    \ if(number>=50){\n            roman+=\"l\";\n            number-=50;\n      \
    \  }\n        else if(number>=40){\n            roman+=\"xl\";\n            number-=40;\n\
    \        }\n        else if(number>=10){\n            roman+=\"x\";\n        \
    \    number-=10;\n        }\n        else if(number>=9){\n            roman+=\"\
    ix\";\n            number-=9;\n        }\n        else if(number>=5){\n      \
    \      roman+=\"v\";\n            number-=5;\n        }\n        else if(number>=4){\n\
    \            roman+=\"iv\";\n            number-=4;\n        }\n        else if(number>=1){\n\
    \            roman+=\"i\";\n            number-=1;\n        }\n    }\n    return\
    \ roman;", "    std::string result;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto it = roman_numerals.begin(); it != roman_numerals.end(); ++it)\
    \ {\n        while (number >= it->first) {\n            result += it->second;\n\
    \            number -= it->first;\n        }\n    }\n    return result;", "  \
    \  std::string roman;\n    if(number>=1000){\n        roman+=\"m\";\n        number-=1000;\n\
    \    }\n    if(number>=900){\n        roman+=\"cm\";\n        number-=900;\n \
    \   }\n    if(number>=500){\n        roman+=\"d\";\n        number-=500;\n   \
    \ }\n    if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n    }\n\
    \    if(number>=100){\n        roman+=\"c\";\n        number-=100;\n    }\n  \
    \  if(number>=90){\n        roman+=\"xc\";\n        number-=90;\n    }\n    if(number>=50){\n\
    \        roman+=\"l\";\n        number-=50;\n    }\n    if(number>=40){\n    \
    \    roman+=\"xl\";\n        number-=40;\n    }\n    if(number>=10){\n       \
    \ roman+=\"x\";\n        number-=10;\n    }\n    if(number>=9){\n        roman+=\"\
    ix\";\n        number-=9;\n    }\n    if(number>=5){\n        roman+=\"v\";\n\
    \        number-=5;\n    }\n    if(number>=4){\n        roman+=\"iv\";\n     \
    \   number-=4;\n    }\n    if(number>=1){\n        roman+=\"i\";\n        number-=1;\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string ones[] =\
    \ {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\"\
    , \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n   \
    \ std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman = thousands[number\
    \ / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number\
    \ % 10];\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string roman = \"\";\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    while\
    \ (number > 0) {\n        while (number >= values[i]) {\n            number -=\
    \ values[i];\n            roman += roman_numerals[i];\n        }\n        i++;\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     result += roman_numerals[i];\n        }\n    }\n    return result;", " \
    \   std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int arabic_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= arabic_numerals[i])\
    \ {\n            number -= arabic_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman = \"ivxlcdm\";\n    int i = 0;\n    while (number > 0) {\n        int\
    \ digit = number % 10;\n        if (digit == 9) {\n            result = roman[i]\
    \ + roman[i + 2] + result;\n        } else if (digit >= 5) {\n            result\
    \ = roman[i + 1] + std::string(digit - 5, roman[i]) + result;\n        } else\
    \ if (digit == 4) {\n            result = roman[i] + roman[i + 1] + result;\n\
    \        } else {\n            result = std::string(digit, roman[i]) + result;\n\
    \        }\n        number /= 10;\n        i += 2;\n    }\n    return result;",
  "    std::string roman;\n    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n\
    \    std::string sym[] = {\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\"\
    ,\"c\",\"cd\",\"d\",\"cm\",\"m\"};\n    int i=12;\n    while(number>0)\n    {\n\
    \        int div = number/num[i];\n        number = number%num[i];\n        while(div--)\n\
    \        {\n            roman+=sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for\
    \ (auto const &pair : roman_numerals) {\n        while (number >= pair.first)\
    \ {\n            roman += pair.second;\n            number -= pair.first;\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    int num[] =\
    \ {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string sym[]\
    \ = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\"\
    , \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number > 0) {\n        int\
    \ div = number / num[i];\n        number = number % num[i];\n        while (div--)\
    \ {\n            roman += sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= values[i])\
    \ {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    int num[]\
    \ = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string sym[] = {\"i\"\
    ,\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\"\
    };\n    int i=12;\n    while(number>0)\n    {\n        int div = number/num[i];\n\
    \        number = number%num[i];\n        while(div--)\n        {\n          \
    \  roman+=sym[i];\n        }\n        i--;\n    }\n    return roman;", "    std::string\
    \ result = \"\";\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  \
    \  int decimal_numbers[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numbers[i])\
    \ {\n            number -= decimal_numbers[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[13] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= arabic_numerals[i]) {\n            number -=\
    \ arabic_numerals[i];\n            roman += roman_numerals[i];\n        }\n  \
    \  }\n    return roman;", "    std::string result;\n    std::string roman[] =\
    \ {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; ++i) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;", "    std::string roman;\n\
    \    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[13]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            roman += roman_numerals[i];\n        }\n    }\n \
    \   return roman;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    while(number>=1000){\n        roman+=\"m\";\n        number-=1000;\n\
    \    }\n    if(number>=900){\n        roman+=\"cm\";\n        number-=900;\n \
    \   }\n    if(number>=500){\n        roman+=\"d\";\n        number-=500;\n   \
    \ }\n    if(number>=400){\n        roman+=\"cd\";\n        number-=400;\n    }\n\
    \    while(number>=100){\n        roman+=\"c\";\n        number-=100;\n    }\n\
    \    if(number>=90){\n        roman+=\"xc\";\n        number-=90;\n    }\n   \
    \ if(number>=50){\n        roman+=\"l\";\n        number-=50;\n    }\n    if(number>=40){\n\
    \        roman+=\"xl\";\n        number-=40;\n    }\n    while(number>=10){\n\
    \        roman+=\"x\";\n        number-=10;\n    }\n    if(number>=9){\n     \
    \   roman+=\"ix\";\n        number-=9;\n    }\n    if(number>=5){\n        roman+=\"\
    v\";\n        number-=5;\n    }\n    if(number>=4){\n        roman+=\"iv\";\n\
    \        number-=4;\n    }\n    while(number>=1){\n        roman+=\"i\";\n   \
    \     number-=1;\n    }\n    return roman;", "    int num[] = {1, 4, 5, 9, 10,\
    \ 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string sym[] = {\"i\", \"iv\"\
    , \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"\
    m\"};\n    int i = 12;\n    std::string res = \"\";\n    while (number > 0) {\n\
    \        int div = number / num[i];\n        number = number % num[i];\n     \
    \   while (div--) {\n            res += sym[i];\n        }\n        i--;\n   \
    \ }\n    return res;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto it = roman_numerals.begin(); it != roman_numerals.end();\
    \ ++it) {\n        while (number >= it->first) {\n            roman += it->second;\n\
    \            number -= it->first;\n        }\n    }\n    return roman;", "  std::string\
    \ result;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ i < 13; i++) {\n    while (number >= values[i]) {\n      number -= values[i];\n\
    \      result += roman_numerals[i];\n    }\n  }\n  return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ arabic_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= arabic_numerals[i])\
    \ {\n            number -= arabic_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int num = number;\n    while(num > 0) {\n        if(num >= 1000)\
    \ {\n            result += \"m\";\n            num -= 1000;\n        }\n     \
    \   else if(num >= 900) {\n            result += \"cm\";\n            num -= 900;\n\
    \        }\n        else if(num >= 500) {\n            result += \"d\";\n    \
    \        num -= 500;\n        }\n        else if(num >= 400) {\n            result\
    \ += \"cd\";\n            num -= 400;\n        }\n        else if(num >= 100)\
    \ {\n            result += \"c\";\n            num -= 100;\n        }\n      \
    \  else if(num >= 90) {\n            result += \"xc\";\n            num -= 90;\n\
    \        }\n        else if(num >= 50) {\n            result += \"l\";\n     \
    \       num -= 50;\n        }\n        else if(num >= 40) {\n            result\
    \ += \"xl\";\n            num -= 40;\n        }\n        else if(num >= 10) {\n\
    \            result += \"x\";\n            num -= 10;\n        }\n        else\
    \ if(num >= 9) {\n            result += \"ix\";\n            num -= 9;\n     \
    \   }\n        else if(num >= 5) {\n            result += \"v\";\n           \
    \ num -= 5;\n        }\n        else if(num >= 4) {\n            result += \"\
    iv\";\n            num -= 4;\n        }\n        else if(num >= 1) {\n       \
    \     result += \"i\";\n            num -= 1;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            result += roman_numerals[i];\n \
    \       }\n    }\n    return result;", "    // your code here\n    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman += thousands[number / 1000];\n    roman += hundreds[(number % 1000)\
    \ / 100];\n    roman += tens[(number % 100) / 10];\n    roman += ones[number %\
    \ 10];\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &i : roman_numerals) {\n        while (number >= i.first)\
    \ {\n            roman += i.second;\n            number -= i.first;\n        }\n\
    \    }\n    return roman;", "    std::string result;\n    std::string roman =\
    \ \"IVXLCDM\";\n    int i = 0;\n    while (number > 0) {\n        int digit =\
    \ number % 10;\n        if (digit == 9) {\n            result = roman[i] + result;\n\
    \            result = roman[i + 2] + result;\n        } else if (digit >= 5) {\n\
    \            result = roman[i + 1] + result;\n            for (int j = 0; j <\
    \ digit - 5; j++) {\n                result = roman[i] + result;\n           \
    \ }\n        } else if (digit == 4) {\n            result = roman[i] + result;\n\
    \            result = roman[i + 1] + result;\n        } else {\n            for\
    \ (int j = 0; j < digit; j++) {\n                result = roman[i] + result;\n\
    \            }\n        }\n        number /= 10;\n        i += 2;\n    }\n   \
    \ return result;", "    std::string result;\n    std::string roman_symbols[] =\
    \ {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            result += roman_symbols[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    int num\
    \ = number;\n    int i = 0;\n    while(num > 0) {\n        if(num >= 1000) {\n\
    \            result += \"m\";\n            num -= 1000;\n        }\n        else\
    \ if(num >= 900) {\n            result += \"cm\";\n            num -= 900;\n \
    \       }\n        else if(num >= 500) {\n            result += \"d\";\n     \
    \       num -= 500;\n        }\n        else if(num >= 400) {\n            result\
    \ += \"cd\";\n            num -= 400;\n        }\n        else if(num >= 100)\
    \ {\n            result += \"c\";\n            num -= 100;\n        }\n      \
    \  else if(num >= 90) {\n            result += \"xc\";\n            num -= 90;\n\
    \        }\n        else if(num >= 50) {\n            result += \"l\";\n     \
    \       num -= 50;\n        }\n        else if(num >= 40) {\n            result\
    \ += \"xl\";\n            num -= 40;\n        }\n        else if(num >= 10) {\n\
    \            result += \"x\";\n            num -= 10;\n        }\n        else\
    \ if(num >= 9) {\n            result += \"ix\";\n            num -= 9;\n     \
    \   }\n        else if(num >= 5) {\n            result += \"v\";\n           \
    \ num -= 5;\n        }\n        else if(num >= 4) {\n            result += \"\
    iv\";\n            num -= 4;\n        }\n        else if(num >= 1) {\n       \
    \     result += \"i\";\n            num -= 1;\n        }\n    }\n    return result;",
  "    std::string roman_numeral;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_pair\
    \ : roman_numerals) {\n        while (number >= roman_pair.first) {\n        \
    \    roman_numeral += roman_pair.second;\n            number -= roman_pair.first;\n\
    \        }\n    }\n    return roman_numeral;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n      \
    \      roman += roman_numerals[i];\n        }\n    }\n    return roman;", "  \
    \  std::string roman;\n    std::string roman_numeral[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= decimal[i])\
    \ {\n            number -= decimal[i];\n            roman += roman_numeral[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::map<int,\
    \ std::string> roman_map;\n    roman_map[1] = \"i\";\n    roman_map[5] = \"v\"\
    ;\n    roman_map[10] = \"x\";\n    roman_map[50] = \"l\";\n    roman_map[100]\
    \ = \"c\";\n    roman_map[500] = \"d\";\n    roman_map[1000] = \"m\";\n    int\
    \ i = 0;\n    while (number > 0) {\n        int digit = number % 10;\n       \
    \ if (digit == 4) {\n            roman = roman_map[pow(10, i)] + roman_map[5 *\
    \ pow(10, i)] + roman;\n        } else if (digit == 9) {\n            roman =\
    \ roman_map[pow(10, i)] + roman_map[10 * pow(10, i)] + roman;\n        } else\
    \ {\n            if (digit >= 5) {\n                roman = roman_map[5 * pow(10,\
    \ i)] + roman;\n                digit -= 5;\n            }\n            for (int\
    \ j = 0; j < digit; j++) {\n                roman = roman_map[pow(10, i)] + roman;\n\
    \            }\n        }\n        number /= 10;\n        i++;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::map<int, std::string> roman_numerals\
    \ = {\n        {1, \"i\"},\n        {4, \"iv\"},\n        {5, \"v\"},\n      \
    \  {9, \"ix\"},\n        {10, \"x\"},\n        {40, \"xl\"},\n        {50, \"\
    l\"},\n        {90, \"xc\"},\n        {100, \"c\"},\n        {400, \"cd\"},\n\
    \        {500, \"d\"},\n        {900, \"cm\"},\n        {1000, \"m\"}\n    };\n\
    \    std::map<int, std::string>::reverse_iterator it;\n    for (it = roman_numerals.rbegin();\
    \ it != roman_numerals.rend(); ++it) {\n        while (number >= it->first) {\n\
    \            roman += it->second;\n            number -= it->first;\n        }\n\
    \    }\n    return roman;", "    std::string result;\n    std::string roman =\
    \ \"IVXLCDM\";\n    int i = 0;\n    while (number > 0) {\n        int digit =\
    \ number % 10;\n        if (digit == 9) {\n            result = roman[i] + roman[i\
    \ + 2] + result;\n        } else if (digit >= 5) {\n            result = roman[i\
    \ + 1] + std::string(digit - 5, roman[i]) + result;\n        } else if (digit\
    \ == 4) {\n            result = roman[i] + roman[i + 1] + result;\n        } else\
    \ {\n            result = std::string(digit, roman[i]) + result;\n        }\n\
    \        i += 2;\n        number /= 10;\n    }\n    return result;", "    std::string\
    \ result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numbers[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numbers[i]) {\n        \
    \    number -= decimal_numbers[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\",\
    \ \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman = thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number\
    \ % 100) / 10] + ones[number % 10];\n    return roman;", "    std::string result;\n\
    \    std::string roman_numerals[4][10] = {\n        {\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n        {\"\", \"x\", \"\
    xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n        {\"\
    \", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n\
    \        {\"\", \"m\", \"mm\", \"mmm\"}\n    };\n    int i = 0;\n    while (number\
    \ > 0) {\n        result = roman_numerals[i++][number % 10] + result;\n      \
    \  number /= 10;\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman += thousands[number / 1000];\n    roman += hundreds[(number % 1000)\
    \ / 100];\n    roman += tens[(number % 100) / 10];\n    roman += ones[number %\
    \ 10];\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    while(number>0){\n\
    \        if(number>=1000){\n            roman+=\"m\";\n            number-=1000;\n\
    \        }\n        else if(number>=900){\n            roman+=\"cm\";\n      \
    \      number-=900;\n        }\n        else if(number>=500){\n            roman+=\"\
    d\";\n            number-=500;\n        }\n        else if(number>=400){\n   \
    \         roman+=\"cd\";\n            number-=400;\n        }\n        else if(number>=100){\n\
    \            roman+=\"c\";\n            number-=100;\n        }\n        else\
    \ if(number>=90){\n            roman+=\"xc\";\n            number-=90;\n     \
    \   }\n        else if(number>=50){\n            roman+=\"l\";\n            number-=50;\n\
    \        }\n        else if(number>=40){\n            roman+=\"xl\";\n       \
    \     number-=40;\n        }\n        else if(number>=10){\n            roman+=\"\
    x\";\n            number-=10;\n        }\n        else if(number>=9){\n      \
    \      roman+=\"ix\";\n            number-=9;\n        }\n        else if(number>=5){\n\
    \            roman+=\"v\";\n            number-=5;\n        }\n        else if(number>=4){\n\
    \            roman+=\"iv\";\n            number-=4;\n        }\n        else if(number>=1){\n\
    \            roman+=\"i\";\n            number-=1;\n        }\n    }\n    return\
    \ roman;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto const& roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    int num[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000};\n    std::string sym[] = {\"i\", \"iv\", \"v\", \"ix\", \"\
    x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    int i =\
    \ 12;\n    while (number > 0) {\n        int div = number / num[i];\n        number\
    \ = number % num[i];\n        while (div--) {\n            roman += sym[i];\n\
    \        }\n        i--;\n    }\n    return roman;", "  std::string result = \"\
    \";\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13;\
    \ i++) {\n    while (number >= values[i]) {\n      number -= values[i];\n    \
    \  result += roman_numerals[i];\n    }\n  }\n  return result;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman;\n    std::string roman_numerals[13] = {\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto pair : roman_numerals) {\n        while (number >= pair.first)\
    \ {\n            roman += pair.second;\n            number -= pair.first;\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n    int\
    \ divisor = 1000;\n    int index = 6;\n    while (number > 0) {\n        int quotient\
    \ = number / divisor;\n        number %= divisor;\n        if (quotient < 4) {\n\
    \            roman.append(quotient, roman_numerals[index][0]);\n        } else\
    \ if (quotient == 4) {\n            roman.append(1, roman_numerals[index][0]);\n\
    \            roman.append(1, roman_numerals[index + 1][0]);\n        } else if\
    \ (quotient > 4 && quotient < 9) {\n            roman.append(1, roman_numerals[index\
    \ + 1][0]);\n            roman.append(quotient - 5, roman_numerals[index][0]);\n\
    \        } else if (quotient == 9) {\n            roman.append(1, roman_numerals[index][0]);\n\
    \            roman.append(1, roman_numerals[index + 2][0]);\n        }\n     \
    \   divisor /= 10;\n        index -= 2;\n    }\n    return roman;", "    std::string\
    \ result = \"\";\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman;\n    std::string roman_numeral[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number\
    \ >= decimal[i]) {\n            number -= decimal[i];\n            roman += roman_numeral[i];\n\
    \        }\n    }\n    return roman;", "    std::string result = \"\";\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    int i = 0;\n\
    \    while (number > 0) {\n        while (number >= decimal_numerals[i]) {\n \
    \           number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n        i++;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}};\n    for (auto const &numeral : roman_numerals)\
    \ {\n        while (number >= numeral.first) {\n            roman += numeral.second;\n\
    \            number -= numeral.first;\n        }\n    }\n    return roman;", " \
    \   std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto& roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"i\", \"v\", \"x\", \"l\", \"c\"\
    , \"d\", \"m\"};\n    int divisor = 1000;\n    int index = 6;\n    while (number\
    \ > 0) {\n        int quotient = number / divisor;\n        number %= divisor;\n\
    \        if (quotient < 4) {\n            roman.append(quotient, roman_numerals[index][0]);\n\
    \        } else if (quotient == 4) {\n            roman.append(1, roman_numerals[index][0]);\n\
    \            roman.append(1, roman_numerals[index + 1][0]);\n        } else if\
    \ (quotient > 4 && quotient < 9) {\n            roman.append(1, roman_numerals[index\
    \ + 1][0]);\n            roman.append(quotient - 5, roman_numerals[index][0]);\n\
    \        } else if (quotient == 9) {\n            roman.append(1, roman_numerals[index][0]);\n\
    \            roman.append(1, roman_numerals[index + 2][0]);\n        }\n     \
    \   divisor /= 10;\n        index -= 2;\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ decimal_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    assert(number > 0 && number <= 1000);\n\
    \    std::string result = \"\";\n    std::string roman[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    assert(number > 0);\n    assert(number\
    \ <= 1000);\n    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n    \
    \        roman += roman_numerals[i];\n        }\n    }\n    return roman;", " \
    \   std::string roman;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto rn\
    \ : roman_numerals) {\n        while (number >= rn.first) {\n            roman\
    \ += rn.second;\n            number -= rn.first;\n        }\n    }\n    return\
    \ roman;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::map<int, std::string> roman_map;\n    roman_map[1]\
    \ = \"i\";\n    roman_map[2] = \"ii\";\n    roman_map[3] = \"iii\";\n    roman_map[4]\
    \ = \"iv\";\n    roman_map[5] = \"v\";\n    roman_map[6] = \"vi\";\n    roman_map[7]\
    \ = \"vii\";\n    roman_map[8] = \"viii\";\n    roman_map[9] = \"ix\";\n    roman_map[10]\
    \ = \"x\";\n    roman_map[20] = \"xx\";\n    roman_map[30] = \"xxx\";\n    roman_map[40]\
    \ = \"xl\";\n    roman_map[50] = \"l\";\n    roman_map[60] = \"lx\";\n    roman_map[70]\
    \ = \"lxx\";\n    roman_map[80] = \"lxxx\";\n    roman_map[90] = \"xc\";\n   \
    \ roman_map[100] = \"c\";\n    roman_map[200] = \"cc\";\n    roman_map[300] =\
    \ \"ccc\";\n    roman_map[400] = \"cd\";\n    roman_map[500] = \"d\";\n    roman_map[600]\
    \ = \"dc\";\n    roman_map[700] = \"dcc\";\n    roman_map[800] = \"dccc\";\n \
    \   roman_map[900] = \"cm\";\n    roman_map[1000] = \"m\";\n    std::string result;\n\
    \    int i = 0;\n    while (number > 0) {\n        int digit = number % 10;\n\
    \        number /= 10;\n        if (digit == 0) {\n            i++;\n        \
    \    continue;\n        }\n        result = roman_map[digit * pow(10, i)] + result;\n\
    \        i++;\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     result += roman_numerals[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n  \
    \      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto& roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &pair : roman_numerals) {\n        while (number >=\
    \ pair.first) {\n            result += pair.second;\n            number -= pair.first;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string result;\n    std::string roman[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    if (number < 1 || number > 1000)\n        return result;\n\
    \    while (number >= 1000) {\n        result += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        result += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        result += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        result += \"cd\";\n      \
    \  number -= 400;\n    }\n    while (number >= 100) {\n        result += \"c\"\
    ;\n        number -= 100;\n    }\n    if (number >= 90) {\n        result += \"\
    xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n        result +=\
    \ \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        result\
    \ += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n     \
    \   result += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n \
    \       result += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n\
    \        result += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n\
    \        result += \"iv\";\n        number -= 4;\n    }\n    while (number >=\
    \ 1) {\n        result += \"i\";\n        number -= 1;\n    }\n    return result;",
  "    std::string roman;\n    int num[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000};\n    std::string sym[] = {\"i\", \"iv\", \"v\", \"ix\", \"\
    x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    int i =\
    \ 12;\n    while (number > 0) {\n        int div = number / num[i];\n        number\
    \ = number % num[i];\n        while (div--) {\n            roman += sym[i];\n\
    \        }\n        i--;\n    }\n    return roman;", "    std::string result;\n\
    \    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0;\
    \ i++) {\n        while (number >= value[i]) {\n            number -= value[i];\n\
    \            result += roman[i];\n        }\n    }\n    return result;", "   \
    \ std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string result;\n    std::string roman[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n  \
    \      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto &pair : roman_numerals)\
    \ {\n        while (number >= pair.first) {\n            roman += pair.second;\n\
    \            number -= pair.first;\n        }\n    }\n    return roman;", "  \
    \  std::string result;\n    std::string roman[13] = {\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  \
    \  int values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    while(number>0){\n        if(number>=1000){\n     \
    \       roman+=\"m\";\n            number-=1000;\n        }\n        else if(number>=900){\n\
    \            roman+=\"cm\";\n            number-=900;\n        }\n        else\
    \ if(number>=500){\n            roman+=\"d\";\n            number-=500;\n    \
    \    }\n        else if(number>=400){\n            roman+=\"cd\";\n          \
    \  number-=400;\n        }\n        else if(number>=100){\n            roman+=\"\
    c\";\n            number-=100;\n        }\n        else if(number>=90){\n    \
    \        roman+=\"xc\";\n            number-=90;\n        }\n        else if(number>=50){\n\
    \            roman+=\"l\";\n            number-=50;\n        }\n        else if(number>=40){\n\
    \            roman+=\"xl\";\n            number-=40;\n        }\n        else\
    \ if(number>=10){\n            roman+=\"x\";\n            number-=10;\n      \
    \  }\n        else if(number>=9){\n            roman+=\"ix\";\n            number-=9;\n\
    \        }\n        else if(number>=5){\n            roman+=\"v\";\n         \
    \   number-=5;\n        }\n        else if(number>=4){\n            roman+=\"\
    iv\";\n            number-=4;\n        }\n        else if(number>=1){\n      \
    \      roman+=\"i\";\n            number-=1;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::map<int,\
    \ std::string> roman_numerals = {\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"\
    }, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n        {50, \"l\"}, {90, \"xc\"},\
    \ {100, \"c\"}, {400, \"cd\"}, {500, \"d\"},\n        {900, \"cm\"}, {1000, \"\
    m\"}\n    };\n    std::map<int, std::string>::reverse_iterator it;\n    for (it\
    \ = roman_numerals.rbegin(); it != roman_numerals.rend(); ++it) {\n        while\
    \ (number >= it->first) {\n            roman += it->second;\n            number\
    \ -= it->first;\n        }\n    }\n    return roman;", "  std::string roman;\n\
    \  std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int decimal_numerals[13]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ i < 13; i++) {\n    while (number >= decimal_numerals[i]) {\n      number -=\
    \ decimal_numerals[i];\n      roman += roman_numerals[i];\n    }\n  }\n  return\
    \ roman;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= values[i])\
    \ {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto &pair : roman_numerals) {\n        while (number >= pair.first)\
    \ {\n            roman += pair.second;\n            number -= pair.first;\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman;\n    while(number>0){\n        if(number>=1000){\n\
    \            roman+=\"m\";\n            number-=1000;\n        }\n        else\
    \ if(number>=900){\n            roman+=\"cm\";\n            number-=900;\n   \
    \     }\n        else if(number>=500){\n            roman+=\"d\";\n          \
    \  number-=500;\n        }\n        else if(number>=400){\n            roman+=\"\
    cd\";\n            number-=400;\n        }\n        else if(number>=100){\n  \
    \          roman+=\"c\";\n            number-=100;\n        }\n        else if(number>=90){\n\
    \            roman+=\"xc\";\n            number-=90;\n        }\n        else\
    \ if(number>=50){\n            roman+=\"l\";\n            number-=50;\n      \
    \  }\n        else if(number>=40){\n            roman+=\"xl\";\n            number-=40;\n\
    \        }\n        else if(number>=10){\n            roman+=\"x\";\n        \
    \    number-=10;\n        }\n        else if(number>=9){\n            roman+=\"\
    ix\";\n            number-=9;\n        }\n        else if(number>=5){\n      \
    \      roman+=\"v\";\n            number-=5;\n        }\n        else if(number>=4){\n\
    \            roman+=\"iv\";\n            number-=4;\n        }\n        else if(number>=1){\n\
    \            roman+=\"i\";\n            number-=1;\n        }\n    }\n    return\
    \ roman;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    while(number>0){\n        if(number>=1000){\n     \
    \       roman+=\"m\";\n            number-=1000;\n        }\n        else if(number>=900){\n\
    \            roman+=\"cm\";\n            number-=900;\n        }\n        else\
    \ if(number>=500){\n            roman+=\"d\";\n            number-=500;\n    \
    \    }\n        else if(number>=400){\n            roman+=\"cd\";\n          \
    \  number-=400;\n        }\n        else if(number>=100){\n            roman+=\"\
    c\";\n            number-=100;\n        }\n        else if(number>=90){\n    \
    \        roman+=\"xc\";\n            number-=90;\n        }\n        else if(number>=50){\n\
    \            roman+=\"l\";\n            number-=50;\n        }\n        else if(number>=40){\n\
    \            roman+=\"xl\";\n            number-=40;\n        }\n        else\
    \ if(number>=10){\n            roman+=\"x\";\n            number-=10;\n      \
    \  }\n        else if(number>=9){\n            roman+=\"ix\";\n            number-=9;\n\
    \        }\n        else if(number>=5){\n            roman+=\"v\";\n         \
    \   number-=5;\n        }\n        else if(number>=4){\n            roman+=\"\
    iv\";\n            number-=4;\n        }\n        else if(number>=1){\n      \
    \      roman+=\"i\";\n            number-=1;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto r : roman_numerals)\
    \ {\n        while (number >= r.first) {\n            roman += r.second;\n   \
    \         number -= r.first;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >= decimal[i])\
    \ {\n            number -= decimal[i];\n            result += roman[i];\n    \
    \    }\n    }\n    return result;", "    std::string roman = \"\";\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman = \"\";\n    std::map<int, std::string> roman_map;\n    roman_map[1]\
    \ = \"i\";\n    roman_map[5] = \"v\";\n    roman_map[10] = \"x\";\n    roman_map[50]\
    \ = \"l\";\n    roman_map[100] = \"c\";\n    roman_map[500] = \"d\";\n    roman_map[1000]\
    \ = \"m\";\n    std::vector<int> keys = {1000, 500, 100, 50, 10, 5, 1};\n    for\
    \ (int i = 0; i < keys.size(); i++) {\n        int key = keys[i];\n        int\
    \ count = number / key;\n        if (count > 0) {\n            if (count == 4)\
    \ {\n                roman += roman_map[key];\n                roman += roman_map[key\
    \ * 5];\n            } else if (count == 9) {\n                roman += roman_map[key];\n\
    \                roman += roman_map[key * 10];\n            } else {\n       \
    \         if (count >= 5) {\n                    roman += roman_map[key * 5];\n\
    \                    count -= 5;\n                }\n                for (int\
    \ j = 0; j < count; j++) {\n                    roman += roman_map[key];\n   \
    \             }\n            }\n        }\n        number = number % key;\n  \
    \  }\n    return roman;", "  std::string result;\n  std::string roman[] = {\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"};\n  int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n  for (int i = 0; number != 0; i++) {\n    while (number >= value[i])\
    \ {\n      number -= value[i];\n      result += roman[i];\n    }\n  }\n  return\
    \ result;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    while (number > 0) {\n        int\
    \ div = number / decimal_numerals[i];\n        number = number % decimal_numerals[i];\n\
    \        while (div--) {\n            roman += roman_numerals[i];\n        }\n\
    \        i++;\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result = \"\";\n    std::vector<int> nums = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::vector<std::string> roman = {\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"};\n    for (int i = 0; i < nums.size(); i++) {\n        while\
    \ (number >= nums[i]) {\n            result += roman[i];\n            number -=\
    \ nums[i];\n        }\n    }\n    return result;", "    std::string roman;\n \
    \   std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    assert(number >= 1 && number <= 1000);\n\
    \    std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    // your code here\n    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman;\n    std::vector<int> values = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::vector<std::string> numerals\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < values.size(); i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     roman += numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            roman += roman_numerals[i];\n        }\n    }\n \
    \   return roman;", "    std::string result;\n    std::string roman[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            roman += roman_numerals[i];\n        }\n    }\n \
    \   return roman;", "    std::string roman;\n    std::vector<std::pair<int, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for\
    \ (auto const &numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::map<int,\
    \ std::string> roman_map = {\n        {1, \"i\"},\n        {5, \"v\"},\n     \
    \   {10, \"x\"},\n        {50, \"l\"},\n        {100, \"c\"},\n        {500, \"\
    d\"},\n        {1000, \"m\"}\n    };\n    std::vector<int> roman_numbers = {1000,\
    \ 500, 100, 50, 10, 5, 1};\n    for (auto roman_number : roman_numbers) {\n  \
    \      while (number >= roman_number) {\n            roman += roman_map[roman_number];\n\
    \            number -= roman_number;\n        }\n    }\n    return roman;", " \
    \   std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto const &numeral : roman_numerals) {\n    while (number >= numeral.first)\
    \ {\n      roman += numeral.second;\n      number -= numeral.first;\n    }\n \
    \ }\n  return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    while (number > 0) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n        i++;\n    }\n    return roman;", " \
    \   std::string result;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= decimal[i]) {\n            number -= decimal[i];\n     \
    \       result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    int num[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\
    \    std::string sym[] = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\",\
    \ \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number\
    \ > 0) {\n        int div = number / num[i];\n        number = number % num[i];\n\
    \        while (div--) {\n            roman += sym[i];\n        }\n        i--;\n\
    \    }\n    return roman;", "    std::string roman;\n    std::map<int, std::string>\
    \ roman_map = {\n        {1, \"i\"},\n        {5, \"v\"},\n        {10, \"x\"\
    },\n        {50, \"l\"},\n        {100, \"c\"},\n        {500, \"d\"},\n     \
    \   {1000, \"m\"}\n    };\n    std::vector<int> keys = {1000, 500, 100, 50, 10,\
    \ 5, 1};\n    int i = 0;\n    while (number > 0) {\n        int div = number /\
    \ keys[i];\n        number %= keys[i];\n        if (div < 4) {\n            roman\
    \ += std::string(div, roman_map[keys[i]][0]);\n        } else if (div == 4) {\n\
    \            roman += roman_map[keys[i]];\n            roman += roman_map[keys[i-1]];\n\
    \        } else if (div == 9) {\n            roman += roman_map[keys[i]];\n  \
    \          roman += roman_map[keys[i-2]];\n        }\n        ++i;\n    }\n  \
    \  return roman;", "    std::string roman = \"\";\n    while (number >= 1000)\
    \ {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if (number >=\
    \ 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number\
    \ >= 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    std::map<int, std::string> roman_map = {\n        {1, \"i\"},\n\
    \        {5, \"v\"},\n        {10, \"x\"},\n        {50, \"l\"},\n        {100,\
    \ \"c\"},\n        {500, \"d\"},\n        {1000, \"m\"}\n    };\n    std::vector<int>\
    \ keys = {1000, 500, 100, 50, 10, 5, 1};\n    int i = 0;\n    while (number >\
    \ 0) {\n        int div = number / keys[i];\n        number %= keys[i];\n    \
    \    if (div == 4) {\n            result += roman_map[keys[i]];\n            result\
    \ += roman_map[keys[i - 1]];\n        } else if (div == 9) {\n            result\
    \ += roman_map[keys[i]];\n            result += roman_map[keys[i - 2]];\n    \
    \    } else {\n            if (div >= 5) {\n                result += roman_map[keys[i\
    \ - 1]];\n                div -= 5;\n            }\n            for (int j = 0;\
    \ j < div; j++) {\n                result += roman_map[keys[i]];\n           \
    \ }\n        }\n        i++;\n    }\n    return result;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}};\n    for (auto rn : roman_numerals) {\n   \
    \     while (number >= rn.first) {\n            roman += rn.second;\n        \
    \    number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numeral[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= decimal[i])\
    \ {\n            number -= decimal[i];\n            roman += roman_numeral[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto& roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman = \"\";\n    while (number >= 1000) {\n        roman += \"\
    m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n        roman\
    \ += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n      \
    \  roman += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n\
    \        roman += \"cd\";\n        number -= 400;\n    }\n    while (number >=\
    \ 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto it = roman_numerals.begin(); it != roman_numerals.end();\
    \ ++it) {\n        while (number >= it->first) {\n            roman += it->second;\n\
    \            number -= it->first;\n        }\n    }\n    return roman;", "   \
    \ std::string roman;\n    std::vector<std::pair<int, char>> roman_numerals = {{1000,\
    \ 'm'}, {900, 'c'}, {500, 'd'}, {400, 'c'}, {100, 'c'}, {90, 'x'}, {50, 'l'},\
    \ {40, 'x'}, {10, 'x'}, {9, 'i'}, {5, 'v'}, {4, 'i'}, {1, 'i'}};\n    for (auto\
    \ roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;"]
stop_tokens:
- "\n}"
