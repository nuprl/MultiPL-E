language: cpp
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> words;\n  std::string word;\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      words.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53hlslgf.cpp: In function 'int main()':\n/tmp/tmp53hlslgf.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp53hlslgf.cpp:2:\n/tmp/tmp53hlslgf.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp53hlslgf.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp53hlslgf.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp53hlslgf.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp53hlslgf.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp53hlslgf.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzj6c8ad.cpp: In function 'int main()':\n/tmp/tmpmzj6c8ad.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmzj6c8ad.cpp:2:\n/tmp/tmpmzj6c8ad.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpmzj6c8ad.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmzj6c8ad.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmzj6c8ad.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gxzrw3e.cpp: In function 'int main()':\n/tmp/tmp1gxzrw3e.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gxzrw3e.cpp:2:\n/tmp/tmp1gxzrw3e.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp1gxzrw3e.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp1gxzrw3e.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp1gxzrw3e.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1gxzrw3e.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1gxzrw3e.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzj6c8ad.cpp: In function 'int main()':\n/tmp/tmpmzj6c8ad.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmzj6c8ad.cpp:2:\n/tmp/tmpmzj6c8ad.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpmzj6c8ad.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmzj6c8ad.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmzj6c8ad.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> words;\n  std::string word;\n  for (char c\
    \ : s) {\n    if (c == ' ' || c == ',') {\n      words.push_back(word);\n    \
    \  word = \"\";\n    } else {\n      word += c;\n    }\n  }\n  words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksqzifjs.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmpksqzifjs.cpp:13:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (char c : s) {\n         \
    \        ^\n/tmp/tmpksqzifjs.cpp: In function 'int main()':\n/tmp/tmpksqzifjs.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpksqzifjs.cpp:2:\n/tmp/tmpksqzifjs.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpksqzifjs.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpksqzifjs.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpksqzifjs.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpksqzifjs.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> result;\n  std::string temp;\n  for (int i\
    \ = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      result.push_back(temp);\n\
    \      temp = \"\";\n    } else {\n      temp += s[i];\n    }\n  }\n  result.push_back(temp);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2msc5uos.cpp: In function 'int main()':\n/tmp/tmp2msc5uos.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2msc5uos.cpp:2:\n/tmp/tmp2msc5uos.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp2msc5uos.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp2msc5uos.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp2msc5uos.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2msc5uos.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2msc5uos.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word = \"\";\n  \
    \  for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] ==\
    \ ',') {\n            words.push_back(word);\n            word = \"\";\n     \
    \   } else {\n            word += s[i];\n        }\n    }\n    words.push_back(word);\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp388rtf6a.cpp: In function 'int main()':\n/tmp/tmp388rtf6a.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp388rtf6a.cpp:2:\n/tmp/tmp388rtf6a.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp388rtf6a.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp388rtf6a.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp388rtf6a.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp388rtf6a.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp388rtf6a.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while(getline(ss, word, ' ')) {\n        v.push_back(word);\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtqdffe6.cpp: In function 'int main()':\n/tmp/tmpxtqdffe6.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxtqdffe6.cpp:2:\n/tmp/tmpxtqdffe6.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpxtqdffe6.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpxtqdffe6.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpxtqdffe6.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxtqdffe6.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxtqdffe6.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ v;\n    while(ss >> word) {\n        v.push_back(word);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsy6w1fh.cpp: In function 'int main()':\n/tmp/tmpcsy6w1fh.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcsy6w1fh.cpp:2:\n/tmp/tmpcsy6w1fh.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpcsy6w1fh.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpcsy6w1fh.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpcsy6w1fh.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcsy6w1fh.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcsy6w1fh.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n \
    \   std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi0akvfg.cpp: In function 'int main()':\n/tmp/tmpgi0akvfg.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgi0akvfg.cpp:2:\n/tmp/tmpgi0akvfg.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpgi0akvfg.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpgi0akvfg.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpgi0akvfg.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgi0akvfg.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgi0akvfg.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while(ss >> word) {\n        v.push_back(word);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph9gidpsj.cpp: In function 'int main()':\n/tmp/tmph9gidpsj.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph9gidpsj.cpp:2:\n/tmp/tmph9gidpsj.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmph9gidpsj.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmph9gidpsj.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmph9gidpsj.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmph9gidpsj.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmph9gidpsj.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::stringstream ss(s);\n  std::vector<std::string> v;\n  std::string\
    \ word;\n  while (ss >> word) {\n    v.push_back(word);\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt008yn9j.cpp: In function 'int main()':\n/tmp/tmpt008yn9j.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt008yn9j.cpp:2:\n/tmp/tmpt008yn9j.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpt008yn9j.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpt008yn9j.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpt008yn9j.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt008yn9j.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt008yn9j.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> result;\n    std::string word = \"\";\n \
    \   for (char c : s) {\n        if (c == ' ' || c == ',') {\n            result.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    result.push_back(word);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"\
    One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8qx_bbjw.cpp: In function 'std::vector<std::basic_string<char>\
    \ > words_string(std::string)':\n/tmp/tmp8qx_bbjw.cpp:13:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : s) {\n       \
    \            ^\n/tmp/tmp8qx_bbjw.cpp: In function 'int main()':\n/tmp/tmp8qx_bbjw.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8qx_bbjw.cpp:2:\n/tmp/tmp8qx_bbjw.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp8qx_bbjw.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp8qx_bbjw.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp8qx_bbjw.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8qx_bbjw.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n \
    \   std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi0akvfg.cpp: In function 'int main()':\n/tmp/tmpgi0akvfg.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgi0akvfg.cpp:2:\n/tmp/tmpgi0akvfg.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpgi0akvfg.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpgi0akvfg.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpgi0akvfg.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgi0akvfg.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgi0akvfg.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> words;\n  std::string word;\n  std::stringstream\
    \ ss(s);\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5j2248gg.cpp: In function 'int main()':\n/tmp/tmp5j2248gg.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5j2248gg.cpp:2:\n/tmp/tmp5j2248gg.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp5j2248gg.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp5j2248gg.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp5j2248gg.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5j2248gg.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5j2248gg.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (getline(ss, word, ' ')) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpks74xqpu.cpp: In function 'int main()':\n/tmp/tmpks74xqpu.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpks74xqpu.cpp:2:\n/tmp/tmpks74xqpu.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpks74xqpu.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpks74xqpu.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpks74xqpu.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpks74xqpu.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpks74xqpu.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzj6c8ad.cpp: In function 'int main()':\n/tmp/tmpmzj6c8ad.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmzj6c8ad.cpp:2:\n/tmp/tmpmzj6c8ad.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpmzj6c8ad.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmzj6c8ad.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmzj6c8ad.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> v;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    v.push_back(word);\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2ysn0g9.cpp: In function 'int main()':\n/tmp/tmpz2ysn0g9.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz2ysn0g9.cpp:2:\n/tmp/tmpz2ysn0g9.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpz2ysn0g9.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpz2ysn0g9.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpz2ysn0g9.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpz2ysn0g9.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpz2ysn0g9.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gxzrw3e.cpp: In function 'int main()':\n/tmp/tmp1gxzrw3e.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gxzrw3e.cpp:2:\n/tmp/tmp1gxzrw3e.cpp:21:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmp1gxzrw3e.cpp:21:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmp1gxzrw3e.cpp:21:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmp1gxzrw3e.cpp:21:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1gxzrw3e.cpp:21:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1gxzrw3e.cpp:21:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// >>> words_string((\"\
    Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n//\
    \ >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
    \ s) {\n    std::vector<std::string> words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) ==\
    \ (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"\
    name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) ==\
    \ (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"\
    three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"\
    gamal\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzj6c8ad.cpp: In function 'int main()':\n/tmp/tmpmzj6c8ad.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_string;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmzj6c8ad.cpp:2:\n/tmp/tmpmzj6c8ad.cpp:26:45: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                             ^\n/tmp/tmpmzj6c8ad.cpp:26:75: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"\
    Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"\
    John\"})));\n                                                                \
    \           ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n\
    \                                                                            \
    \                                                                            \
    \                       ^\n/tmp/tmpmzj6c8ad.cpp:26:175: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmzj6c8ad.cpp:26:175: error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmzj6c8ad.cpp:26:175:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linu"
  stdout: ''
