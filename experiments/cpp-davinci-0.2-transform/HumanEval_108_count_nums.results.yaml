language: cpp
name: HumanEval_108_count_nums
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpabpkttyu: /tmp/tmpabpkttyu.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n          \
    \  i = -i;\n        }\n        while (i > 0) {\n            count += i % 10;\n\
    \            i /= 10;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp3qpev6gd: /tmp/tmp3qpev6gd.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum /= 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp7anass6v: /tmp/tmp7anass6v.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (auto i : arr) {\n    long sum = 0;\n    if (i < 0) {\n  \
    \    sum += i * -1;\n    } else {\n      sum += i;\n    }\n    while (sum > 0)\
    \ {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if (sum > 0) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpt3mg2au0: /tmp/tmpt3mg2au0.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n    \
    \    while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n            continue;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpud8hh60r: /tmp/tmpud8hh60r.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum /= 10;\n            sum +=\
    \ digit;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n\
    \    long sum = 0;\n    if (num < 0) {\n      sum += num * -1;\n    } else {\n\
    \      sum += num;\n    }\n    while (sum > 0) {\n      sum -= sum % 10;\n   \
    \   sum /= 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpw891n1t0: /tmp/tmpw891n1t0.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           int digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpjmqhaq6n: /tmp/tmpjmqhaq6n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   long num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n   \
    \ while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n  \
    \  if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpi2ybbivk: /tmp/tmpi2ybbivk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n  \
    \  long num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n    while\
    \ (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp315p1ek5: /tmp/tmp315p1ek5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum /= 10;\n            sum +=\
    \ digit;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            i = -i;\n        }\n        while (i > 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp486654xe: /tmp/tmp486654xe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum /= 10;\n            sum +=\
    \ digit;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            i = -i;\n        }\n        while (i > 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp486654xe: /tmp/tmp486654xe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            sum += i * -1;\n        } else {\n            sum +=\
    \ i;\n        }\n        while (sum > 0) {\n            sum -= sum % 10;\n   \
    \         sum /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc10o7bzu: /tmp/tmpc10o7bzu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long sum = 0;\n  \
    \  long num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n    while\
    \ (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp315p1ek5: /tmp/tmp315p1ek5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = -arr[i];\n           \
    \ sum += -1;\n        }\n        while (arr[i] > 0) {\n            sum += arr[i]\
    \ % 10;\n            arr[i] /= 10;\n        }\n        if (sum > 0) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc9_ltgvw: /tmp/tmpc9_ltgvw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpa5s9u6yz: /tmp/tmpa5s9u6yz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            sum += i * -1;\n        } else {\n            sum +=\
    \ i;\n        }\n        while (sum > 0) {\n            sum -= sum % 10;\n   \
    \         sum /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc10o7bzu: /tmp/tmpc10o7bzu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long n = arr[i];\n        if (n < 0) {\n            n = -n;\n\
    \        }\n        while (n > 0) {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpv4f5jgb8: /tmp/tmpv4f5jgb8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1xdmzx23: /tmp/tmp1xdmzx23.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1xdmzx23: /tmp/tmp1xdmzx23.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum = arr[i] * -1;\n        } else\
    \ {\n            sum = arr[i];\n        }\n        while (sum > 0) {\n       \
    \     sum = sum / 10;\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpie4mx0p8: /tmp/tmpie4mx0p8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            sum += -1 * (i % 10);\n            i = -1 * (i / 10);\n\
    \        }\n        while (i > 0) {\n            sum += i % 10;\n            i\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp73wzpsu3: /tmp/tmp73wzpsu3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            if\
    \ (digit > 0) {\n                count++;\n                break;\n          \
    \  }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuwjcfsyi: /tmp/tmpuwjcfsyi.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n        \
    \    arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6qvxamgd: /tmp/tmp6qvxamgd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpfjoymfrr: /tmp/tmpfjoymfrr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n        \
    \    arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp6qvxamgd: /tmp/tmp6qvxamgd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            i = -i;\n        }\n        while (i > 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp486654xe: /tmp/tmp486654xe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n     \
    \   if (*i < 0) {\n            sum += *i;\n        }\n        else {\n       \
    \     sum += *i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpaw1kgwfs: /tmp/tmpaw1kgwfs.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpa5s9u6yz: /tmp/tmpa5s9u6yz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   long n = arr[i];\n    if (n < 0) {\n      n = -n;\n    }\n    while (n > 0)\
    \ {\n      sum += n % 10;\n      n /= 10;\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpekv_rlpe: /tmp/tmpekv_rlpe.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpdlsxp_jg: /tmp/tmpdlsxp_jg.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            sum = sum / 10;\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpe_x84jne: /tmp/tmpe_x84jne.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxvjvf8xt: /tmp/tmpxvjvf8xt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            sum += i * -1;\n        } else {\n            sum +=\
    \ i;\n        }\n        while (sum > 0) {\n            sum -= sum % 10;\n   \
    \         sum /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpc10o7bzu: /tmp/tmpc10o7bzu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum = arr[i] * -1;\n        } else\
    \ {\n            sum = arr[i];\n        }\n        while (sum > 0) {\n       \
    \     long digit = sum % 10;\n            sum = sum / 10;\n            count +=\
    \ digit;\n        }\n        if (count > 0) {\n            count = 1;\n      \
    \  } else {\n            count = 0;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpaamf_i4r: /tmp/tmpaamf_i4r.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            i = i * -1;\n        }\n        while (i > 0) {\n   \
    \         sum += i % 10;\n            i = i / 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpp5711o2r: /tmp/tmpp5711o2r.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   long num = arr[i];\n    if (num < 0) {\n      num = num * -1;\n    }\n   \
    \ while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n  \
    \  if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpi2ybbivk: /tmp/tmpi2ybbivk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n\tlong\
    \ count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\
    \tlong n = arr[i];\n\t\tif (n < 0) {\n\t\t\tn = n * -1;\n\t\t}\n\t\twhile (n >\
    \ 0) {\n\t\t\tsum += n % 10;\n\t\t\tn = n / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp9ytrf8ua: /tmp/tmp9ytrf8ua.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyoo_vzp_: /tmp/tmpyoo_vzp_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += -1 * (arr[i] % 10);\n  \
    \          arr[i] = arr[i] / 10;\n        }\n        while (arr[i] != 0) {\n \
    \           sum += arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp29l_kzg8: /tmp/tmp29l_kzg8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] != 0) {\n            sum += arr[i] % 10;\n        \
    \    arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpkmjr5n8k: /tmp/tmpkmjr5n8k.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxvjvf8xt: /tmp/tmpxvjvf8xt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpb809kuk4: /tmp/tmpb809kuk4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            if\
    \ (digit > 0) {\n                count++;\n                break;\n          \
    \  }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuwjcfsyi: /tmp/tmpuwjcfsyi.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1xdmzx23: /tmp/tmp1xdmzx23.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        while (num != 0) {\n \
    \           sum += num % 10;\n            num /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpcd_xws59: /tmp/tmpcd_xws59.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)12,
    (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            if\
    \ (sum == 0) {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp__9_lrqd: /tmp/tmp__9_lrqd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpj46btllm: /tmp/tmpj46btllm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum /= 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpv9ssw33q: /tmp/tmpv9ssw33q.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2kmgzpvv: /tmp/tmp2kmgzpvv.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ != 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2jwnh5c8: /tmp/tmp2jwnh5c8.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long sum = 0;\n \
    \   if (arr[i] < 0) {\n      sum += arr[i] * -1;\n    } else {\n      sum += arr[i];\n\
    \    }\n    while (sum > 0) {\n      sum = sum / 10;\n      count++;\n    }\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxv8fefwe: /tmp/tmpxv8fefwe.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1xdmzx23: /tmp/tmp1xdmzx23.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmplowe12fb: /tmp/tmplowe12fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum % 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660060529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long n = arr[i];\n        if (n < 0) {\n            n = -n;\n\
    \        }\n        while (n > 0) {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpgq6mzoe5: /tmp/tmpgq6mzoe5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            if\
    \ (digit > 0) {\n                count++;\n                break;\n          \
    \  }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpuwjcfsyi: /tmp/tmpuwjcfsyi.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp2bhwebzw: /tmp/tmp2bhwebzw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum -= sum % 10;\n            sum /= 10;\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpl56435qe: /tmp/tmpl56435qe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num\
    \ = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            num =\
    \ num * -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpyoo_vzp_: /tmp/tmpyoo_vzp_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += -1 * arr[i] % 10;\n    \
    \        arr[i] /= -10;\n        }\n        while (arr[i] > 0) {\n           \
    \ sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n        if (sum >\
    \ 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpslpq0hpp: /tmp/tmpslpq0hpp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum = sum / 10;\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp1xdmzx23: /tmp/tmp1xdmzx23.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n       \
    \ }\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n         \
    \   arr[i] = arr[i] / 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpabpkttyu: /tmp/tmpabpkttyu.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        if\
    \ (i < 0) {\n            sum += -1 * (i % 10);\n            i = -1 * (i / 10);\n\
    \        }\n        while (i > 0) {\n            sum += i % 10;\n            i\
    \ /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmp73wzpsu3: /tmp/tmp73wzpsu3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           long digit = sum % 10;\n            sum = sum / 10;\n            count\
    \ += digit;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpsgjcmcpz: /tmp/tmpsgjcmcpz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        if (arr[i] < 0) {\n            sum += arr[i] * -1;\n        }\
    \ else {\n            sum += arr[i];\n        }\n        while (sum > 0) {\n \
    \           sum /= 10;\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpgyq5h0k_: /tmp/tmpgyq5h0k_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        long num = arr[i];\n        if (num < 0) {\n            num =\
    \ -num;\n        }\n        while (num > 0) {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: Exception
  stderr: 'tmpxfphlogf: /tmp/tmpxfphlogf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)0}))) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660060522
