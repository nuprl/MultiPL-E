name: HumanEval_2_truncate_number
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
  \ point number, it can be decomposed into\n// and integer part (largest integer\
  \ smaller than given number) and decimals\n// (leftover part always smaller than\
  \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
  // (0.5)\nfloat truncate_number(float number) {\n"
tests: "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
  \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
  \ == (0.0));\n}\n"
completions: ["    // Write your code here\n    int a = number;\n    float b = number\
    \ - a;\n    return b;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    // TODO: implement\
    \ this function\n    return number - (int)number;", '  return number - (int)number;',
  "    // TODO: implement this function\n    int x = number;\n    float y = number\
    \ - x;\n    return y;", "    // TODO: Implement this function\n    return number\
    \ - (int)number;", "  // Write your code here\n  int a = number;\n  float b =\
    \ number - a;\n  return b;", '    return number - (int)number;', "    // Write\
    \ your code here\n    return number - (int)number;", "    int integer = (int)number;\n\
    \    return number - integer;", '    return number - (int)number;', "    // TODO:\
    \ implement this function\n    return number - (int)number;", "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", '    return number - (int)number;', '    return number - (int)number;',
  "    // TODO: Write your code here\n    int int_part = (int)number;\n    return\
    \ number - int_part;", '    return number - (int)number;', "    int integer_part\
    \ = (int)number;\n    float decimal_part = number - integer_part;\n    return\
    \ decimal_part;", "    int integer_part = (int)number;\n    float decimal_part\
    \ = number - integer_part;\n    return decimal_part;", "    // TODO: implement\
    \ this function\n    int integer = (int)number;\n    float decimal = number -\
    \ integer;\n    return decimal;"]
stop_tokens:
- "\n}"
