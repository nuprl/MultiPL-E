language: cpp
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : token) {\n        \
    \    if (c == '(') {\n                stk.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string token;\n  while (std::getline(ss, token, ' ')) {\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : token) {\n      if (c == '(') {\n\
    \        depth++;\n        max_depth = std::max(max_depth, depth);\n      } else\
    \ if (c == ')') {\n        depth--;\n      }\n    }\n    result.push_back(max_depth);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcik7cs2.cpp: In function \u2018std::vector<long int> parse_nested_parens(std::string)\u2019\
    :\n/tmp/tmplcik7cs2.cpp:13:26: error: \u2018parse_nested_parens_helper\u2019 was\
    \ not declared in this scope; did you mean \u2018parse_nested_parens\u2019?\n\
    \   13 |         result.push_back(parse_nested_parens_helper(item));\n      |\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |               \
    \           parse_nested_parens\n"
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren;\n    while (std::getline(ss, paren, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : paren) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (int i = 0; i < token.size();\
    \ i++) {\n            if (token[i] == '(') {\n                depth++;\n     \
    \           max_depth = std::max(max_depth, depth);\n            } else if (token[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_depth;\n    int depth = 0;\n    int\
    \ max = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if\
    \ (paren_string[i] == '(') {\n            depth++;\n            if (depth > max)\
    \ {\n                max = depth;\n            }\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            max_depth.push_back(max);\n            max = 0;\n           \
    \ depth = 0;\n        }\n    }\n    max_depth.push_back(max);\n    return max_depth;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_nesting_levels;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting_level = 0;\n        long current_nesting_level\
    \ = 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n  \
    \              current_nesting_level++;\n                max_nesting_level = std::max(max_nesting_level,\
    \ current_nesting_level);\n            } else if (c == ')') {\n              \
    \  current_nesting_level--;\n            }\n        }\n        max_nesting_levels.push_back(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        int\
    \ max_depth = 0;\n        int depth = 0;\n        for (char c : token) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        res.push_back(max_depth);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_count = 0;\n        long count = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                count++;\n                max_count\
    \ = std::max(max_count, count);\n            } else if (c == ')') {\n        \
    \        count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (ss >> paren_group) {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (auto c : paren_group) {\n      \
    \      if (c == '(') {\n                depth++;\n                max_depth =\
    \ std::max(max_depth, depth);\n            } else if (c == ')') {\n          \
    \      depth--;\n            }\n        }\n        assert(depth == 0);\n     \
    \   result.push_back(max_depth);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    // Write your code here\n    std::vector<long> result;\n\
    \    std::stringstream ss(paren_string);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        std::stack<char> s;\n        long max_depth = 0;\n \
    \       long depth = 0;\n        for(char c : token) {\n            if(c == '(')\
    \ {\n                depth++;\n                if(depth > max_depth) {\n     \
    \               max_depth = depth;\n                }\n            } else if(c\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (int i = 0;\
    \ i < token.length(); i++) {\n            if (token[i] == '(') {\n           \
    \     current_nesting++;\n                max_nesting = std::max(max_nesting,\
    \ current_nesting);\n            } else if (token[i] == ')') {\n             \
    \   current_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                assert(!stk.empty());\n                stk.pop();\n         \
    \   }\n        }\n        assert(stk.empty());\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (getline(ss, token, ' ')) {\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        res.push_back(max_depth);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        for (char c : token) {\n          \
    \  if (c == '(') {\n                s.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)s.size());\n            } else if (c == ')') {\n                s.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        long curr_depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                s.push(c);\n     \
    \           curr_depth++;\n                max_depth = std::max(max_depth, curr_depth);\n\
    \            } else if (c == ')') {\n                s.pop();\n              \
    \  curr_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_depth;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ depth = 0;\n        long max_depth_so_far = 0;\n        for (auto c : group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth_so_far\
    \ = std::max(max_depth_so_far, depth);\n            } else if (c == ')') {\n \
    \               depth--;\n            }\n        }\n        max_depth.push_back(max_depth_so_far);\n\
    \    }\n    return max_depth;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item.size() == 0) {\n            continue;\n        }\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (int i = 0; i < item.size(); i++)\
    \ {\n            if (item[i] == '(') {\n                depth++;\n           \
    \     max_depth = std::max(max_depth, depth);\n            } else if (item[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string token;\n  while (std::getline(ss, token, ' ')) {\n    long max_nesting\
    \ = 0;\n    long current_nesting = 0;\n    for (auto c : token) {\n      if (c\
    \ == '(') {\n        current_nesting++;\n        max_nesting = std::max(max_nesting,\
    \ current_nesting);\n      } else if (c == ')') {\n        current_nesting--;\n\
    \      }\n    }\n    result.push_back(max_nesting);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long current_depth = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                ++level;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        --level;\n            }\n        }\n        res.push_back(max_level);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren;\n    while (ss >> paren) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : paren) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                assert(!st.empty());\n\
    \                st.pop();\n            }\n        }\n        assert(st.empty());\n\
    \        result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long level = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                level++;\n  \
    \              max_level = std::max(max_level, level);\n            } else if\
    \ (c == ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::istringstream iss(paren_string);\n\
    \    std::string token;\n    while (std::getline(iss, token, ' ')) {\n       \
    \ long max_nesting = 0;\n        long current_nesting = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = std::max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   }\n        }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        int\
    \ max_depth = 0;\n        int current_depth = 0;\n        for (int i = 0; i <\
    \ token.length(); i++) {\n            if (token[i] == '(') {\n               \
    \ current_depth++;\n                max_depth = std::max(max_depth, current_depth);\n\
    \            } else if (token[i] == ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_depth;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        std::stack<char>\
    \ st;\n        long max = 0;\n        for (char c : group) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max = std::max(max,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        max_depth.push_back(max);\n    }\n    return\
    \ max_depth;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n   \
    \ assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                ++current_nesting;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                --current_nesting;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    // write your code here\n    std::vector<long> v;\n   \
    \ std::stringstream ss(paren_string);\n    std::string s;\n    while(ss >> s)\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for(int i =\
    \ 0; i < s.length(); i++) {\n            if(s[i] == '(') {\n                depth++;\n\
    \                max_depth = std::max(max_depth, depth);\n            } else if(s[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        v.push_back(max_depth);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string paren_group;\n  while (std::getline(ss, paren_group, ' ')) {\n\
    \    std::stack<char> paren_stack;\n    long max_depth = 0;\n    for (char c :\
    \ paren_group) {\n      if (c == '(') {\n        paren_stack.push(c);\n      \
    \  max_depth = std::max(max_depth, (long)paren_stack.size());\n      } else if\
    \ (c == ')') {\n        assert(!paren_stack.empty());\n        paren_stack.pop();\n\
    \      }\n    }\n    assert(paren_stack.empty());\n    result.push_back(max_depth);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (auto c : token) {\n        \
    \    if (c == '(') {\n                stk.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long nesting = 0;\n        for (char c : token) {\n\
    \            if (c == '(') {\n                nesting++;\n                max_nesting\
    \ = std::max(max_nesting, nesting);\n            } else if (c == ')') {\n    \
    \            nesting--;\n            }\n        }\n        assert(nesting == 0);\n\
    \        result.push_back(max_nesting);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long current_level = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = std::max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            }\n  \
    \      }\n        result.push_back(max_level);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_nesting = 0;\n        for (char c : token) {\n      \
    \      if (c == '(') {\n                stk.push(c);\n                max_nesting\
    \ = std::max(max_nesting, (long)stk.size());\n            } else if (c == ')')\
    \ {\n                stk.pop();\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long curr_depth = 0;\n        for (auto c : token) {\n\
    \            if (c == '(') {\n                curr_depth++;\n                max_depth\
    \ = std::max(max_depth, curr_depth);\n            } else if (c == ')') {\n   \
    \             curr_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long curr_depth = 0;\n        for\
    \ (char c : item) {\n            if (c == '(') {\n                curr_depth++;\n\
    \                max_depth = std::max(max_depth, curr_depth);\n              \
    \  st.push(c);\n            } else if (c == ')') {\n                if (st.empty())\
    \ {\n                    std::cout << \"Invalid input\" << std::endl;\n      \
    \              return result;\n                }\n                st.pop();\n\
    \                curr_depth--;\n            }\n        }\n        if (!st.empty())\
    \ {\n            std::cout << \"Invalid input\" << std::endl;\n            return\
    \ result;\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        int\
    \ max_depth = 0;\n        int depth = 0;\n        for (int i = 0; i < token.size();\
    \ i++) {\n            if (token[i] == '(') {\n                depth++;\n     \
    \           max_depth = std::max(max_depth, depth);\n            } else if (token[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        assert(depth == 0);\n   \
    \     result.push_back(max_depth);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        for (char c : token) {\n          \
    \  if (c == '(') {\n                s.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)s.size());\n            } else if (c == ')') {\n                assert(!s.empty());\n\
    \                s.pop();\n            }\n        }\n        assert(s.empty());\n\
    \        result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n\tstd::vector<long> result;\n\tstd::stringstream ss(paren_string);\n\
    \tstd::string paren_group;\n\twhile (std::getline(ss, paren_group, ' ')) {\n\t\
    \tlong max_level = 0;\n\t\tlong level = 0;\n\t\tfor (char c : paren_group) {\n\
    \t\t\tif (c == '(') {\n\t\t\t\tlevel++;\n\t\t\t\tmax_level = std::max(max_level,\
    \ level);\n\t\t\t}\n\t\t\telse if (c == ')') {\n\t\t\t\tlevel--;\n\t\t\t}\n\t\t\
    }\n\t\tresult.push_back(max_level);\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_nesting_levels;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting_level = 0;\n        long current_nesting_level\
    \ = 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n  \
    \              current_nesting_level++;\n                max_nesting_level = std::max(max_nesting_level,\
    \ current_nesting_level);\n            } else if (c == ')') {\n              \
    \  current_nesting_level--;\n            }\n        }\n        max_nesting_levels.push_back(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\nint main() {\n    auto candidate =\
    \ parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ depth = 0;\n        long max_depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                assert(!stk.empty());\n                stk.pop();\n         \
    \   }\n        }\n        assert(stk.empty());\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long current_level = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = std::max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            }\n        }\n \
    \       result.push_back(max_level);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stack;\n        long max_depth = 0;\n        for (char c : item) {\n       \
    \     if (c == '(') {\n                stack.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stack.size());\n            } else if (c == ')')\
    \ {\n                stack.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        assert(depth == 0);\n   \
    \     res.push_back(max_depth);\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (ss >> paren_group) {\n        long max_nesting\
    \ = 0;\n        long curr_nesting = 0;\n        for (char c : paren_group) {\n\
    \            if (c == '(') {\n                curr_nesting++;\n              \
    \  max_nesting = std::max(max_nesting, curr_nesting);\n            } else if (c\
    \ == ')') {\n                curr_nesting--;\n            }\n        }\n     \
    \   result.push_back(max_nesting);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string s;\n    while (ss >> s) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item.empty()) {\n            continue;\n        }\n        std::stack<char>\
    \ stack;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n                stack.push(c);\n\
    \            } else if (c == ')') {\n                depth--;\n              \
    \  stack.pop();\n            }\n        }\n        assert(stack.empty());\n  \
    \      result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long curr_depth = 0;\n        for (char c : token) {\n\
    \            if (c == '(') {\n                curr_depth++;\n                max_depth\
    \ = std::max(max_depth, curr_depth);\n            } else if (c == ')') {\n   \
    \             curr_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : token) {\n        \
    \    if (c == '(') {\n                stk.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long cur_level = 0;\n        for (char\
    \ c : paren_group) {\n            if (c == '(') {\n                cur_level++;\n\
    \                max_level = std::max(max_level, cur_level);\n            } else\
    \ if (c == ')') {\n                cur_level--;\n            }\n        }\n  \
    \      result.push_back(max_level);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (auto c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : token) {\n        \
    \    if (c == '(') {\n                stk.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string token;\n  while (std::getline(ss, token, ' ')) {\n    int max_level\
    \ = 0;\n    int level = 0;\n    for (int i = 0; i < token.size(); i++) {\n   \
    \   if (token[i] == '(') {\n        level++;\n        max_level = std::max(max_level,\
    \ level);\n      } else if (token[i] == ')') {\n        level--;\n      }\n  \
    \  }\n    result.push_back(max_level);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        long curr_depth = 0;\n        for\
    \ (char c : item) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                curr_depth++;\n                max_depth = std::max(max_depth,\
    \ curr_depth);\n            } else if (c == ')') {\n                if (stk.empty())\
    \ {\n                    assert(false);\n                }\n                stk.pop();\n\
    \                curr_depth--;\n            }\n        }\n        if (!stk.empty())\
    \ {\n            assert(false);\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long level = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                level++;\n  \
    \              max_level = std::max(max_level, level);\n            } else if\
    \ (c == ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (long i = 0;\
    \ i < token.size(); i++) {\n            if (token[i] == '(') {\n             \
    \   current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (token[i] == ')') {\n                current_nesting--;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (ss >> group) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : group) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ count = 0;\n        long max_count = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                count++;\n                max_count\
    \ = std::max(max_count, count);\n            } else if (c == ')') {\n        \
    \        count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ count = 0;\n        long max_count = 0;\n        for (int i = 0; i < item.length();\
    \ i++) {\n            if (item[i] == '(') {\n                count++;\n      \
    \          if (count > max_count) {\n                    max_count = count;\n\
    \                }\n            } else if (item[i] == ')') {\n               \
    \ count--;\n            }\n        }\n        result.push_back(max_count);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ paren_stack;\n        long max_depth = 0;\n        for (char c : token) {\n\
    \            if (c == '(') {\n                paren_stack.push(c);\n         \
    \       max_depth = std::max(max_depth, (long)paren_stack.size());\n         \
    \   } else if (c == ')') {\n                paren_stack.pop();\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    // TODO: Implement this function\n    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while(std::getline(ss, token, ' ')){\n        std::stack<char> st;\n     \
    \   long max_depth = 0;\n        long curr_depth = 0;\n        for(int i = 0;\
    \ i < token.length(); i++){\n            if(token[i] == '('){\n              \
    \  st.push(token[i]);\n                curr_depth++;\n                max_depth\
    \ = std::max(max_depth, curr_depth);\n            }\n            else if(token[i]\
    \ == ')'){\n                st.pop();\n                curr_depth--;\n       \
    \     }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string paren_group;\n  while (std::getline(ss, paren_group, ' ')) {\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (char c : paren_group)\
    \ {\n      if (c == '(') {\n        depth++;\n        max_depth = std::max(max_depth,\
    \ depth);\n      } else if (c == ')') {\n        depth--;\n      }\n    }\n  \
    \  result.push_back(max_depth);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> ans;\n    std::stringstream ss(paren_string);\n\
    \    std::string s;\n    while (ss >> s) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        ans.push_back(max_depth);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string paren_group;\n  while (std::getline(ss, paren_group, ' ')) {\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (char c : paren_group)\
    \ {\n      if (c == '(') {\n        depth++;\n        max_depth = std::max(max_depth,\
    \ depth);\n      } else if (c == ')') {\n        depth--;\n      }\n    }\n  \
    \  result.push_back(max_depth);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> max_nest_levels;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nest_level = 0;\n        long curr_nest_level\
    \ = 0;\n        for (auto c : paren_group) {\n            if (c == '(') {\n  \
    \              curr_nest_level++;\n                max_nest_level = std::max(max_nest_level,\
    \ curr_nest_level);\n            } else if (c == ')') {\n                curr_nest_level--;\n\
    \            }\n        }\n        max_nest_levels.push_back(max_nest_level);\n\
    \    }\n    return max_nest_levels;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long current_depth = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064101
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long level = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                level++;\n  \
    \              max_level = std::max(max_level, level);\n            } else if\
    \ (c == ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (auto c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064104
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                st.push(c);\n    \
    \            depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                st.pop();\n             \
    \   depth--;\n            }\n        }\n        assert(st.empty());\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> v;\n    std::stringstream ss(paren_string);\n\
    \    std::string s;\n    while(ss >> s) {\n        long count = 0;\n        long\
    \ max = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s[i]\
    \ == '(') {\n                count++;\n                if(count > max) {\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(s[i] == ')') {\n                count--;\n            }\n        }\n\
    \        v.push_back(max);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (auto c : token) {\n        \
    \    if (c == '(') {\n                stk.push(c);\n                max_depth\
    \ = std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                st.push(c);\n    \
    \            depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                assert(!st.empty());\n  \
    \              st.pop();\n                depth--;\n            }\n        }\n\
    \        assert(st.empty());\n        result.push_back(max_depth);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> ret;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        int\
    \ max_level = 0;\n        int level = 0;\n        for (char c : item) {\n    \
    \        if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        ret.push_back(max_level);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
    \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064103
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
    \ (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064105
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n\
    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
    \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
    \ paren_string) {\n    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = parse_nested_parens;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2,\
    \ (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\"\
    )) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"\
    (()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660064102
